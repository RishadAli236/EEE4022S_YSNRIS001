
C:\Users\Yasin\Desktop\thesis\Debug\thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cbc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012c78  08005e44  08005e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08018abc  08018abc  00028abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08018ac0  08018ac0  00028ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001a8  20000000  08018ac4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000301a8  2**0
                  CONTENTS
  7 .bss          0000107c  200001a8  200001a8  000301a8  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20001224  20001224  000301a8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012af2  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002bf3  00000000  00000000  00042cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f58  00000000  00000000  000458c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000db0  00000000  00000000  00046818  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005b81  00000000  00000000  000475c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005372  00000000  00000000  0004d149  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000524bb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003df8  00000000  00000000  0005253c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00056334  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001a8 	.word	0x200001a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e2c 	.word	0x08005e2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001ac 	.word	0x200001ac
 80001c4:	08005e2c 	.word	0x08005e2c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <NVIC_PriorityGroupConfig+0x24>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	60d3      	str	r3, [r2, #12]
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73bb      	strb	r3, [r7, #14]
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	78db      	ldrb	r3, [r3, #3]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d038      	beq.n	8000b62 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000af0:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <NVIC_Init+0xbc>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	43db      	mvns	r3, r3
 8000af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000afa:	0a1b      	lsrs	r3, r3, #8
 8000afc:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	f1c3 0304 	rsb	r3, r3, #4
 8000b04:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000b06:	7b7a      	ldrb	r2, [r7, #13]
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	fa42 f303 	asr.w	r3, r2, r3
 8000b0e:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	785b      	ldrb	r3, [r3, #1]
 8000b14:	461a      	mov	r2, r3
 8000b16:	7bbb      	ldrb	r3, [r7, #14]
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	789a      	ldrb	r2, [r3, #2]
 8000b22:	7b7b      	ldrb	r3, [r7, #13]
 8000b24:	4013      	ands	r3, r2
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	011b      	lsls	r3, r3, #4
 8000b32:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000b34:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <NVIC_Init+0xc0>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	7bfa      	ldrb	r2, [r7, #15]
 8000b3e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b42:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <NVIC_Init+0xc0>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	095b      	lsrs	r3, r3, #5
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	f003 031f 	and.w	r3, r3, #31
 8000b56:	2101      	movs	r1, #1
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b5c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000b60:	e00f      	b.n	8000b82 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b62:	490c      	ldr	r1, [pc, #48]	; (8000b94 <NVIC_Init+0xc0>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	095b      	lsrs	r3, r3, #5
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	f003 031f 	and.w	r3, r3, #31
 8000b76:	2201      	movs	r2, #1
 8000b78:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b7a:	f100 0320 	add.w	r3, r0, #32
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000ba2:	f000 fbc3 	bl	800132c <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000bac:	f000 fbbe 	bl	800132c <RCC_APB1PeriphResetCmd>
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <DAC_Init+0x64>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000bcc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000bec:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <DAC_Init+0x64>)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6013      	str	r3, [r2, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40007400 	.word	0x40007400

08000c1c <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c28:	78fb      	ldrb	r3, [r7, #3]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d009      	beq.n	8000c42 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000c2e:	490d      	ldr	r1, [pc, #52]	; (8000c64 <DAC_Cmd+0x48>)
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <DAC_Cmd+0x48>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	2001      	movs	r0, #1
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	fa00 f303 	lsl.w	r3, r0, r3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8000c40:	e009      	b.n	8000c56 <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <DAC_Cmd+0x48>)
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <DAC_Cmd+0x48>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	2001      	movs	r0, #1
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	fa00 f303 	lsl.w	r3, r0, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	4013      	ands	r3, r2
 8000c54:	600b      	str	r3, [r1, #0]
  }
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40007400 	.word	0x40007400

08000c68 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00a      	beq.n	8000c90 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8000c7a:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <DAC_DMACmd+0x4c>)
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <DAC_DMACmd+0x4c>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	fa00 f303 	lsl.w	r3, r0, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 8000c8e:	e00a      	b.n	8000ca6 <DAC_DMACmd+0x3e>
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8000c90:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <DAC_DMACmd+0x4c>)
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <DAC_DMACmd+0x4c>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	fa00 f303 	lsl.w	r3, r0, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	600b      	str	r3, [r1, #0]
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40007400 	.word	0x40007400

08000cb8 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f023 0201 	bic.w	r2, r3, #1
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2221      	movs	r2, #33	; 0x21
 8000cee:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a46      	ldr	r2, [pc, #280]	; (8000e0c <DMA_DeInit+0x154>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d103      	bne.n	8000d00 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000cf8:	4b45      	ldr	r3, [pc, #276]	; (8000e10 <DMA_DeInit+0x158>)
 8000cfa:	223d      	movs	r2, #61	; 0x3d
 8000cfc:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000cfe:	e07e      	b.n	8000dfe <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a44      	ldr	r2, [pc, #272]	; (8000e14 <DMA_DeInit+0x15c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d104      	bne.n	8000d12 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000d08:	4b41      	ldr	r3, [pc, #260]	; (8000e10 <DMA_DeInit+0x158>)
 8000d0a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000d0e:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000d10:	e075      	b.n	8000dfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a40      	ldr	r2, [pc, #256]	; (8000e18 <DMA_DeInit+0x160>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d104      	bne.n	8000d24 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000d1a:	4b3d      	ldr	r3, [pc, #244]	; (8000e10 <DMA_DeInit+0x158>)
 8000d1c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000d20:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000d22:	e06c      	b.n	8000dfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a3d      	ldr	r2, [pc, #244]	; (8000e1c <DMA_DeInit+0x164>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d104      	bne.n	8000d36 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000d2c:	4b38      	ldr	r3, [pc, #224]	; (8000e10 <DMA_DeInit+0x158>)
 8000d2e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000d32:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000d34:	e063      	b.n	8000dfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a39      	ldr	r2, [pc, #228]	; (8000e20 <DMA_DeInit+0x168>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d103      	bne.n	8000d46 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000d3e:	4b34      	ldr	r3, [pc, #208]	; (8000e10 <DMA_DeInit+0x158>)
 8000d40:	4a38      	ldr	r2, [pc, #224]	; (8000e24 <DMA_DeInit+0x16c>)
 8000d42:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000d44:	e05b      	b.n	8000dfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a37      	ldr	r2, [pc, #220]	; (8000e28 <DMA_DeInit+0x170>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d103      	bne.n	8000d56 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000d4e:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <DMA_DeInit+0x158>)
 8000d50:	4a36      	ldr	r2, [pc, #216]	; (8000e2c <DMA_DeInit+0x174>)
 8000d52:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000d54:	e053      	b.n	8000dfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a35      	ldr	r2, [pc, #212]	; (8000e30 <DMA_DeInit+0x178>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d103      	bne.n	8000d66 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000d5e:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <DMA_DeInit+0x158>)
 8000d60:	4a34      	ldr	r2, [pc, #208]	; (8000e34 <DMA_DeInit+0x17c>)
 8000d62:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000d64:	e04b      	b.n	8000dfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a33      	ldr	r2, [pc, #204]	; (8000e38 <DMA_DeInit+0x180>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d104      	bne.n	8000d78 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000d6e:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <DMA_DeInit+0x158>)
 8000d70:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000d74:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000d76:	e042      	b.n	8000dfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a30      	ldr	r2, [pc, #192]	; (8000e3c <DMA_DeInit+0x184>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d103      	bne.n	8000d88 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000d80:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <DMA_DeInit+0x188>)
 8000d82:	223d      	movs	r2, #61	; 0x3d
 8000d84:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000d86:	e03a      	b.n	8000dfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a2e      	ldr	r2, [pc, #184]	; (8000e44 <DMA_DeInit+0x18c>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d104      	bne.n	8000d9a <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000d90:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <DMA_DeInit+0x188>)
 8000d92:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000d96:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000d98:	e031      	b.n	8000dfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a2a      	ldr	r2, [pc, #168]	; (8000e48 <DMA_DeInit+0x190>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d104      	bne.n	8000dac <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <DMA_DeInit+0x188>)
 8000da4:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000da8:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000daa:	e028      	b.n	8000dfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a27      	ldr	r2, [pc, #156]	; (8000e4c <DMA_DeInit+0x194>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d104      	bne.n	8000dbe <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <DMA_DeInit+0x188>)
 8000db6:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000dba:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000dbc:	e01f      	b.n	8000dfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a23      	ldr	r2, [pc, #140]	; (8000e50 <DMA_DeInit+0x198>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d103      	bne.n	8000dce <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <DMA_DeInit+0x188>)
 8000dc8:	4a16      	ldr	r2, [pc, #88]	; (8000e24 <DMA_DeInit+0x16c>)
 8000dca:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000dcc:	e017      	b.n	8000dfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a20      	ldr	r2, [pc, #128]	; (8000e54 <DMA_DeInit+0x19c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d103      	bne.n	8000dde <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <DMA_DeInit+0x188>)
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <DMA_DeInit+0x174>)
 8000dda:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000ddc:	e00f      	b.n	8000dfe <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <DMA_DeInit+0x1a0>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d103      	bne.n	8000dee <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <DMA_DeInit+0x188>)
 8000de8:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <DMA_DeInit+0x17c>)
 8000dea:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000dec:	e007      	b.n	8000dfe <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a1a      	ldr	r2, [pc, #104]	; (8000e5c <DMA_DeInit+0x1a4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d103      	bne.n	8000dfe <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <DMA_DeInit+0x188>)
 8000df8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000dfc:	60da      	str	r2, [r3, #12]
    }
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40026010 	.word	0x40026010
 8000e10:	40026000 	.word	0x40026000
 8000e14:	40026028 	.word	0x40026028
 8000e18:	40026040 	.word	0x40026040
 8000e1c:	40026058 	.word	0x40026058
 8000e20:	40026070 	.word	0x40026070
 8000e24:	2000003d 	.word	0x2000003d
 8000e28:	40026088 	.word	0x40026088
 8000e2c:	20000f40 	.word	0x20000f40
 8000e30:	400260a0 	.word	0x400260a0
 8000e34:	203d0000 	.word	0x203d0000
 8000e38:	400260b8 	.word	0x400260b8
 8000e3c:	40026410 	.word	0x40026410
 8000e40:	40026400 	.word	0x40026400
 8000e44:	40026428 	.word	0x40026428
 8000e48:	40026440 	.word	0x40026440
 8000e4c:	40026458 	.word	0x40026458
 8000e50:	40026470 	.word	0x40026470
 8000e54:	40026488 	.word	0x40026488
 8000e58:	400264a0 	.word	0x400264a0
 8000e5c:	400264b8 	.word	0x400264b8

08000e60 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <DMA_Init+0xac>)
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000e8a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000e96:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ea2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000eae:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb4:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f023 0307 	bic.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	691a      	ldr	r2, [r3, #16]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60da      	str	r2, [r3, #12]
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	f01c803f 	.word	0xf01c803f

08000f10 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d006      	beq.n	8000f30 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f043 0201 	orr.w	r2, r3, #1
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000f2e:	e005      	b.n	8000f3c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f023 0201 	bic.w	r2, r3, #1
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	601a      	str	r2, [r3, #0]
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <EXTI_ClearITPendingBit+0x1c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6153      	str	r3, [r2, #20]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40013c00 	.word	0x40013c00

08000f68 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e076      	b.n	8001072 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000f84:	2201      	movs	r2, #1
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d165      	bne.n	800106c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2103      	movs	r1, #3
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	791b      	ldrb	r3, [r3, #4]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	791b      	ldrb	r3, [r3, #4]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d003      	beq.n	8000fde <GPIO_Init+0x76>
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	791b      	ldrb	r3, [r3, #4]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d12e      	bne.n	800103c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	401a      	ands	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	795b      	ldrb	r3, [r3, #5]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	431a      	orrs	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	b29b      	uxth	r3, r3
 8001014:	2101      	movs	r1, #1
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	401a      	ands	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	799b      	ldrb	r3, [r3, #6]
 800102a:	4619      	mov	r1, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	b29b      	uxth	r3, r3
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	b29b      	uxth	r3, r3
 8001036:	431a      	orrs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	b29b      	uxth	r3, r3
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2103      	movs	r1, #3
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	401a      	ands	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	79db      	ldrb	r3, [r3, #7]
 800105c:	4619      	mov	r1, r3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	3301      	adds	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d985      	bls.n	8000f84 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001078:	bf00      	nop
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]
 8001090:	4613      	mov	r3, r2
 8001092:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800109c:	787a      	ldrb	r2, [r7, #1]
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	08db      	lsrs	r3, r3, #3
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	08db      	lsrs	r3, r3, #3
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	461a      	mov	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	210f      	movs	r1, #15
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	ea02 0103 	and.w	r1, r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f100 0208 	add.w	r2, r0, #8
 80010de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80010e2:	887b      	ldrh	r3, [r7, #2]
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3208      	adds	r2, #8
 80010ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	08db      	lsrs	r3, r3, #3
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3208      	adds	r2, #8
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	2302      	movs	r3, #2
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	2302      	movs	r3, #2
 8001136:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001138:	4b48      	ldr	r3, [pc, #288]	; (800125c <RCC_GetClocksFreq+0x144>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	2b04      	cmp	r3, #4
 8001146:	d007      	beq.n	8001158 <RCC_GetClocksFreq+0x40>
 8001148:	2b08      	cmp	r3, #8
 800114a:	d009      	beq.n	8001160 <RCC_GetClocksFreq+0x48>
 800114c:	2b00      	cmp	r3, #0
 800114e:	d13f      	bne.n	80011d0 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a43      	ldr	r2, [pc, #268]	; (8001260 <RCC_GetClocksFreq+0x148>)
 8001154:	601a      	str	r2, [r3, #0]
      break;
 8001156:	e03f      	b.n	80011d8 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a42      	ldr	r2, [pc, #264]	; (8001264 <RCC_GetClocksFreq+0x14c>)
 800115c:	601a      	str	r2, [r3, #0]
      break;
 800115e:	e03b      	b.n	80011d8 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001160:	4b3e      	ldr	r3, [pc, #248]	; (800125c <RCC_GetClocksFreq+0x144>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001168:	0d9b      	lsrs	r3, r3, #22
 800116a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800116c:	4b3b      	ldr	r3, [pc, #236]	; (800125c <RCC_GetClocksFreq+0x144>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001174:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00d      	beq.n	8001198 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800117c:	4a39      	ldr	r2, [pc, #228]	; (8001264 <RCC_GetClocksFreq+0x14c>)
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	fbb2 f2f3 	udiv	r2, r2, r3
 8001184:	4b35      	ldr	r3, [pc, #212]	; (800125c <RCC_GetClocksFreq+0x144>)
 8001186:	6859      	ldr	r1, [r3, #4]
 8001188:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800118c:	400b      	ands	r3, r1
 800118e:	099b      	lsrs	r3, r3, #6
 8001190:	fb03 f302 	mul.w	r3, r3, r2
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	e00c      	b.n	80011b2 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001198:	4a31      	ldr	r2, [pc, #196]	; (8001260 <RCC_GetClocksFreq+0x148>)
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	fbb2 f2f3 	udiv	r2, r2, r3
 80011a0:	4b2e      	ldr	r3, [pc, #184]	; (800125c <RCC_GetClocksFreq+0x144>)
 80011a2:	6859      	ldr	r1, [r3, #4]
 80011a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80011a8:	400b      	ands	r3, r1
 80011aa:	099b      	lsrs	r3, r3, #6
 80011ac:	fb03 f302 	mul.w	r3, r3, r2
 80011b0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <RCC_GetClocksFreq+0x144>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ba:	0c1b      	lsrs	r3, r3, #16
 80011bc:	3301      	adds	r3, #1
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	601a      	str	r2, [r3, #0]
      break;
 80011ce:	e003      	b.n	80011d8 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a23      	ldr	r2, [pc, #140]	; (8001260 <RCC_GetClocksFreq+0x148>)
 80011d4:	601a      	str	r2, [r3, #0]
      break;
 80011d6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80011d8:	4b20      	ldr	r3, [pc, #128]	; (800125c <RCC_GetClocksFreq+0x144>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011e0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80011e8:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <RCC_GetClocksFreq+0x150>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	40da      	lsrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <RCC_GetClocksFreq+0x144>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001208:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	0a9b      	lsrs	r3, r3, #10
 800120e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001210:	4a15      	ldr	r2, [pc, #84]	; (8001268 <RCC_GetClocksFreq+0x150>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4413      	add	r3, r2
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	40da      	lsrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <RCC_GetClocksFreq+0x144>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001230:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	0b5b      	lsrs	r3, r3, #13
 8001236:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001238:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <RCC_GetClocksFreq+0x150>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	4413      	add	r3, r2
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	40da      	lsrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	60da      	str	r2, [r3, #12]
}
 8001250:	bf00      	nop
 8001252:	3724      	adds	r7, #36	; 0x24
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	40023800 	.word	0x40023800
 8001260:	00f42400 	.word	0x00f42400
 8001264:	007a1200 	.word	0x007a1200
 8001268:	20000000 	.word	0x20000000

0800126c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d006      	beq.n	800128c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800127e:	490a      	ldr	r1, [pc, #40]	; (80012a8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4313      	orrs	r3, r2
 8001288:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800128a:	e006      	b.n	800129a <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800128c:	4906      	ldr	r1, [pc, #24]	; (80012a8 <RCC_AHB1PeriphClockCmd+0x3c>)
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	43db      	mvns	r3, r3
 8001296:	4013      	ands	r3, r2
 8001298:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800

080012ac <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80012be:	490a      	ldr	r1, [pc, #40]	; (80012e8 <RCC_AHB2PeriphClockCmd+0x3c>)
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <RCC_AHB2PeriphClockCmd+0x3c>)
 80012c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	634b      	str	r3, [r1, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
 80012ca:	e006      	b.n	80012da <RCC_AHB2PeriphClockCmd+0x2e>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 80012cc:	4906      	ldr	r1, [pc, #24]	; (80012e8 <RCC_AHB2PeriphClockCmd+0x3c>)
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <RCC_AHB2PeriphClockCmd+0x3c>)
 80012d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	4013      	ands	r3, r2
 80012d8:	634b      	str	r3, [r1, #52]	; 0x34
  }
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800

080012ec <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80012fe:	490a      	ldr	r1, [pc, #40]	; (8001328 <RCC_APB2PeriphClockCmd+0x3c>)
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <RCC_APB2PeriphClockCmd+0x3c>)
 8001302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4313      	orrs	r3, r2
 8001308:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800130a:	e006      	b.n	800131a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800130c:	4906      	ldr	r1, [pc, #24]	; (8001328 <RCC_APB2PeriphClockCmd+0x3c>)
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <RCC_APB2PeriphClockCmd+0x3c>)
 8001310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	43db      	mvns	r3, r3
 8001316:	4013      	ands	r3, r2
 8001318:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800

0800132c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800133e:	490a      	ldr	r1, [pc, #40]	; (8001368 <RCC_APB1PeriphResetCmd+0x3c>)
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <RCC_APB1PeriphResetCmd+0x3c>)
 8001342:	6a1a      	ldr	r2, [r3, #32]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4313      	orrs	r3, r2
 8001348:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800134a:	e006      	b.n	800135a <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800134c:	4906      	ldr	r1, [pc, #24]	; (8001368 <RCC_APB1PeriphResetCmd+0x3c>)
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <RCC_APB1PeriphResetCmd+0x3c>)
 8001350:	6a1a      	ldr	r2, [r3, #32]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	43db      	mvns	r3, r3
 8001356:	4013      	ands	r3, r2
 8001358:	620b      	str	r3, [r1, #32]
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800

0800136c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a29      	ldr	r2, [pc, #164]	; (8001428 <TIM_TimeBaseInit+0xbc>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d013      	beq.n	80013b0 <TIM_TimeBaseInit+0x44>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a28      	ldr	r2, [pc, #160]	; (800142c <TIM_TimeBaseInit+0xc0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d00f      	beq.n	80013b0 <TIM_TimeBaseInit+0x44>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001396:	d00b      	beq.n	80013b0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a25      	ldr	r2, [pc, #148]	; (8001430 <TIM_TimeBaseInit+0xc4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d007      	beq.n	80013b0 <TIM_TimeBaseInit+0x44>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a24      	ldr	r2, [pc, #144]	; (8001434 <TIM_TimeBaseInit+0xc8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d003      	beq.n	80013b0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a23      	ldr	r2, [pc, #140]	; (8001438 <TIM_TimeBaseInit+0xcc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d108      	bne.n	80013c2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80013b0:	89fb      	ldrh	r3, [r7, #14]
 80013b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013b6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	885a      	ldrh	r2, [r3, #2]
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	4313      	orrs	r3, r2
 80013c0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a1d      	ldr	r2, [pc, #116]	; (800143c <TIM_TimeBaseInit+0xd0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00c      	beq.n	80013e4 <TIM_TimeBaseInit+0x78>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <TIM_TimeBaseInit+0xd4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d008      	beq.n	80013e4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013d8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	891a      	ldrh	r2, [r3, #8]
 80013de:	89fb      	ldrh	r3, [r7, #14]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	89fa      	ldrh	r2, [r7, #14]
 80013e8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	881a      	ldrh	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <TIM_TimeBaseInit+0xbc>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d003      	beq.n	800140a <TIM_TimeBaseInit+0x9e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a09      	ldr	r2, [pc, #36]	; (800142c <TIM_TimeBaseInit+0xc0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d104      	bne.n	8001414 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	7a9b      	ldrb	r3, [r3, #10]
 800140e:	b29a      	uxth	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	829a      	strh	r2, [r3, #20]
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40010000 	.word	0x40010000
 800142c:	40010400 	.word	0x40010400
 8001430:	40000400 	.word	0x40000400
 8001434:	40000800 	.word	0x40000800
 8001438:	40000c00 	.word	0x40000c00
 800143c:	40001000 	.word	0x40001000
 8001440:	40001400 	.word	0x40001400

08001444 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f04f 32ff 	mov.w	r2, #4294967295
 8001452:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	729a      	strb	r2, [r3, #10]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	889b      	ldrh	r3, [r3, #4]
 8001488:	b29b      	uxth	r3, r3
 800148a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800148e:	b29a      	uxth	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	889b      	ldrh	r3, [r3, #4]
 8001498:	b29a      	uxth	r2, r3
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	4313      	orrs	r3, r2
 800149e:	b29a      	uxth	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	809a      	strh	r2, [r3, #4]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <TM_DAC_SIGNAL_Init>:
};

TIM_TypeDef *DAC_TIM[2];
uint8_t dac_timer_set[2] = {0, 0};

TM_DAC_SIGNAL_Result_t TM_DAC_SIGNAL_Init(TM_DAC_SIGNAL_Channel_t DACx, TIM_TypeDef* TIMx) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
	uint16_t GPIO_Pin;
	
	/* Check used timer */
	/* Set proper trigger */
	if (
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c2:	d013      	beq.n	80014ec <TM_DAC_SIGNAL_Init+0x3c>
		TIMx == TIM2 || 
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <TM_DAC_SIGNAL_Init+0x84>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d00f      	beq.n	80014ec <TM_DAC_SIGNAL_Init+0x3c>
		TIMx == TIM4 ||
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	4a1a      	ldr	r2, [pc, #104]	; (8001538 <TM_DAC_SIGNAL_Init+0x88>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d00b      	beq.n	80014ec <TM_DAC_SIGNAL_Init+0x3c>
		TIMx == TIM5 ||
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	4a19      	ldr	r2, [pc, #100]	; (800153c <TM_DAC_SIGNAL_Init+0x8c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d007      	beq.n	80014ec <TM_DAC_SIGNAL_Init+0x3c>
		TIMx == TIM6 ||
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	4a18      	ldr	r2, [pc, #96]	; (8001540 <TM_DAC_SIGNAL_Init+0x90>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d003      	beq.n	80014ec <TM_DAC_SIGNAL_Init+0x3c>
		TIMx == TIM7 ||
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	4a17      	ldr	r2, [pc, #92]	; (8001544 <TM_DAC_SIGNAL_Init+0x94>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d10c      	bne.n	8001506 <TM_DAC_SIGNAL_Init+0x56>
		TIMx == TIM8
	) {
		/* Set timer */
		DAC_TIM[DACx] = TIMx;
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	4916      	ldr	r1, [pc, #88]	; (8001548 <TM_DAC_SIGNAL_Init+0x98>)
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		/* Set flag */
		dac_timer_set[DACx] = 1;
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <TM_DAC_SIGNAL_Init+0x9c>)
 80014fa:	2101      	movs	r1, #1
 80014fc:	54d1      	strb	r1, [r2, r3]
		return TM_DAC_SIGNAL_Result_TimerNotValid;
	}

	
	/* Select proper GPIO pin */
	if (DACx == TM_DAC1) {
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <TM_DAC_SIGNAL_Init+0x5a>
 8001504:	e004      	b.n	8001510 <TM_DAC_SIGNAL_Init+0x60>
		DAC_TIM[DACx] = TIMx;
		/* Set flag */
		dac_timer_set[DACx] = 1;
	} else {
		/* Timer is not valid */
		return TM_DAC_SIGNAL_Result_TimerNotValid;
 8001506:	2302      	movs	r3, #2
 8001508:	e00f      	b.n	800152a <TM_DAC_SIGNAL_Init+0x7a>
	}

	
	/* Select proper GPIO pin */
	if (DACx == TM_DAC1) {
		GPIO_Pin = GPIO_PIN_4;
 800150a:	2310      	movs	r3, #16
 800150c:	81fb      	strh	r3, [r7, #14]
 800150e:	e001      	b.n	8001514 <TM_DAC_SIGNAL_Init+0x64>
	} else {
		GPIO_Pin = GPIO_PIN_5;
 8001510:	2320      	movs	r3, #32
 8001512:	81fb      	strh	r3, [r7, #14]
	}
	
	/* Initialize proper GPIO pin */
	TM_GPIO_Init(GPIOA, GPIO_Pin, TM_GPIO_Mode_AN, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast);
 8001514:	89f9      	ldrh	r1, [r7, #14]
 8001516:	2302      	movs	r3, #2
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	2300      	movs	r3, #0
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2300      	movs	r3, #0
 8001520:	2203      	movs	r2, #3
 8001522:	480b      	ldr	r0, [pc, #44]	; (8001550 <TM_DAC_SIGNAL_Init+0xa0>)
 8001524:	f000 fbb2 	bl	8001c8c <TM_GPIO_Init>
	
	/* Return OK */
	return TM_DAC_SIGNAL_Result_Ok;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40000800 	.word	0x40000800
 8001538:	40000c00 	.word	0x40000c00
 800153c:	40001000 	.word	0x40001000
 8001540:	40001400 	.word	0x40001400
 8001544:	40010400 	.word	0x40010400
 8001548:	2000020c 	.word	0x2000020c
 800154c:	200001c4 	.word	0x200001c4
 8001550:	40020000 	.word	0x40020000

08001554 <TM_DAC_SIGNAL_SetSignal>:

TM_DAC_SIGNAL_Result_t TM_DAC_SIGNAL_SetSignal(TM_DAC_SIGNAL_Channel_t DACx, TM_DAC_SIGNAL_Signal_t signal_type, double frequency) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	460a      	mov	r2, r1
 800155e:	ed87 0b00 	vstr	d0, [r7]
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	4613      	mov	r3, r2
 8001566:	73bb      	strb	r3, [r7, #14]
	TM_DAC_SIGNAL_Result_t result;
	switch (signal_type) {
 8001568:	7bbb      	ldrb	r3, [r7, #14]
 800156a:	2b03      	cmp	r3, #3
 800156c:	d837      	bhi.n	80015de <TM_DAC_SIGNAL_SetSignal+0x8a>
 800156e:	a201      	add	r2, pc, #4	; (adr r2, 8001574 <TM_DAC_SIGNAL_SetSignal+0x20>)
 8001570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001574:	08001585 	.word	0x08001585
 8001578:	080015b3 	.word	0x080015b3
 800157c:	0800159d 	.word	0x0800159d
 8001580:	080015c9 	.word	0x080015c9
		case TM_DAC_SIGNAL_Signal_Sinus:
			result = TM_DAC_SIGNAL_SetCustomSignal(DACx, DAC_SIGNAL_Sinus, DAC_SIGNAL_SINUS_LENGTH, frequency);
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	ed97 0b00 	vldr	d0, [r7]
 800158a:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800158e:	4917      	ldr	r1, [pc, #92]	; (80015ec <TM_DAC_SIGNAL_SetSignal+0x98>)
 8001590:	4618      	mov	r0, r3
 8001592:	f000 f833 	bl	80015fc <TM_DAC_SIGNAL_SetCustomSignal>
 8001596:	4603      	mov	r3, r0
 8001598:	75fb      	strb	r3, [r7, #23]
			break;
 800159a:	e022      	b.n	80015e2 <TM_DAC_SIGNAL_SetSignal+0x8e>
		case TM_DAC_SIGNAL_Signal_Sawtooth:
			result = TM_DAC_SIGNAL_SetCustomSignal(DACx, DAC_SIGNAL_Sawtooth, DAC_SIGNAL_SAWTOOTH_LENGTH, frequency);
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	ed97 0b00 	vldr	d0, [r7]
 80015a2:	2220      	movs	r2, #32
 80015a4:	4912      	ldr	r1, [pc, #72]	; (80015f0 <TM_DAC_SIGNAL_SetSignal+0x9c>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f828 	bl	80015fc <TM_DAC_SIGNAL_SetCustomSignal>
 80015ac:	4603      	mov	r3, r0
 80015ae:	75fb      	strb	r3, [r7, #23]
			break;
 80015b0:	e017      	b.n	80015e2 <TM_DAC_SIGNAL_SetSignal+0x8e>
		case TM_DAC_SIGNAL_Signal_Triangle:
			result = TM_DAC_SIGNAL_SetCustomSignal(DACx, DAC_SIGNAL_Triangle, DAC_SIGNAL_TRIANGLE_LENGTH, frequency);
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	ed97 0b00 	vldr	d0, [r7]
 80015b8:	2220      	movs	r2, #32
 80015ba:	490e      	ldr	r1, [pc, #56]	; (80015f4 <TM_DAC_SIGNAL_SetSignal+0xa0>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 f81d 	bl	80015fc <TM_DAC_SIGNAL_SetCustomSignal>
 80015c2:	4603      	mov	r3, r0
 80015c4:	75fb      	strb	r3, [r7, #23]
			break;
 80015c6:	e00c      	b.n	80015e2 <TM_DAC_SIGNAL_SetSignal+0x8e>
		case TM_DAC_SIGNAL_Signal_Square:
			result = TM_DAC_SIGNAL_SetCustomSignal(DACx, DAC_SIGNAL_Square, DAC_SIGNAL_SQUARE_LENGTH, frequency);
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	ed97 0b00 	vldr	d0, [r7]
 80015ce:	2202      	movs	r2, #2
 80015d0:	4909      	ldr	r1, [pc, #36]	; (80015f8 <TM_DAC_SIGNAL_SetSignal+0xa4>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f812 	bl	80015fc <TM_DAC_SIGNAL_SetCustomSignal>
 80015d8:	4603      	mov	r3, r0
 80015da:	75fb      	strb	r3, [r7, #23]
			break;
 80015dc:	e001      	b.n	80015e2 <TM_DAC_SIGNAL_SetSignal+0x8e>
		default:
			result = TM_DAC_SIGNAL_Result_Error;
 80015de:	2301      	movs	r3, #1
 80015e0:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Return result */
	return result;
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	08005ea8 	.word	0x08005ea8
 80015f0:	20000050 	.word	0x20000050
 80015f4:	20000010 	.word	0x20000010
 80015f8:	20000090 	.word	0x20000090

080015fc <TM_DAC_SIGNAL_SetCustomSignal>:

TM_DAC_SIGNAL_Result_t TM_DAC_SIGNAL_SetCustomSignal(TM_DAC_SIGNAL_Channel_t DACx, uint16_t* Signal_Data, uint16_t Signal_Length, double frequency) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b0a0      	sub	sp, #128	; 0x80
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	ed87 0b00 	vstr	d0, [r7]
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	4613      	mov	r3, r2
 800160e:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStruct;
	DMA_InitTypeDef DMA_InitStruct;
	TM_TIMER_PROPERTIES_t Timer_Data;

	/* Check if timer is set */
	if (!dac_timer_set[DACx]) {
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	4a8c      	ldr	r2, [pc, #560]	; (8001844 <TM_DAC_SIGNAL_SetCustomSignal+0x248>)
 8001614:	5cd3      	ldrb	r3, [r2, r3]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <TM_DAC_SIGNAL_SetCustomSignal+0x22>
		return TM_DAC_SIGNAL_Result_Error;
 800161a:	2301      	movs	r3, #1
 800161c:	e10d      	b.n	800183a <TM_DAC_SIGNAL_SetCustomSignal+0x23e>
	}
	
	/* Check used timer */
	/* Set proper trigger */
	if (DAC_TIM[DACx] == TIM2) {
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	4a89      	ldr	r2, [pc, #548]	; (8001848 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 8001622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800162a:	d102      	bne.n	8001632 <TM_DAC_SIGNAL_SetCustomSignal+0x36>
		DAC_InitStruct.DAC_Trigger = DAC_Trigger_T2_TRGO;
 800162c:	2324      	movs	r3, #36	; 0x24
 800162e:	673b      	str	r3, [r7, #112]	; 0x70
 8001630:	e033      	b.n	800169a <TM_DAC_SIGNAL_SetCustomSignal+0x9e>
	} else if (DAC_TIM[DACx] == TIM4) {
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	4a84      	ldr	r2, [pc, #528]	; (8001848 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 8001636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163a:	4a84      	ldr	r2, [pc, #528]	; (800184c <TM_DAC_SIGNAL_SetCustomSignal+0x250>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d102      	bne.n	8001646 <TM_DAC_SIGNAL_SetCustomSignal+0x4a>
		DAC_InitStruct.DAC_Trigger = DAC_Trigger_T4_TRGO;
 8001640:	232c      	movs	r3, #44	; 0x2c
 8001642:	673b      	str	r3, [r7, #112]	; 0x70
 8001644:	e029      	b.n	800169a <TM_DAC_SIGNAL_SetCustomSignal+0x9e>
	} else if (DAC_TIM[DACx] == TIM5) {
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	4a7f      	ldr	r2, [pc, #508]	; (8001848 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 800164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164e:	4a80      	ldr	r2, [pc, #512]	; (8001850 <TM_DAC_SIGNAL_SetCustomSignal+0x254>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d102      	bne.n	800165a <TM_DAC_SIGNAL_SetCustomSignal+0x5e>
		DAC_InitStruct.DAC_Trigger = DAC_Trigger_T5_TRGO;
 8001654:	231c      	movs	r3, #28
 8001656:	673b      	str	r3, [r7, #112]	; 0x70
 8001658:	e01f      	b.n	800169a <TM_DAC_SIGNAL_SetCustomSignal+0x9e>
	} else if (DAC_TIM[DACx] == TIM6) {
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	4a7a      	ldr	r2, [pc, #488]	; (8001848 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 800165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001662:	4a7c      	ldr	r2, [pc, #496]	; (8001854 <TM_DAC_SIGNAL_SetCustomSignal+0x258>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d102      	bne.n	800166e <TM_DAC_SIGNAL_SetCustomSignal+0x72>
		DAC_InitStruct.DAC_Trigger = DAC_Trigger_T6_TRGO;
 8001668:	2304      	movs	r3, #4
 800166a:	673b      	str	r3, [r7, #112]	; 0x70
 800166c:	e015      	b.n	800169a <TM_DAC_SIGNAL_SetCustomSignal+0x9e>
	} else if (DAC_TIM[DACx] == TIM7) {
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	4a75      	ldr	r2, [pc, #468]	; (8001848 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	4a78      	ldr	r2, [pc, #480]	; (8001858 <TM_DAC_SIGNAL_SetCustomSignal+0x25c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d102      	bne.n	8001682 <TM_DAC_SIGNAL_SetCustomSignal+0x86>
		DAC_InitStruct.DAC_Trigger = DAC_Trigger_T7_TRGO;
 800167c:	2314      	movs	r3, #20
 800167e:	673b      	str	r3, [r7, #112]	; 0x70
 8001680:	e00b      	b.n	800169a <TM_DAC_SIGNAL_SetCustomSignal+0x9e>
	} else if (DAC_TIM[DACx] == TIM8) {
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	4a70      	ldr	r2, [pc, #448]	; (8001848 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 8001686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168a:	4a74      	ldr	r2, [pc, #464]	; (800185c <TM_DAC_SIGNAL_SetCustomSignal+0x260>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d102      	bne.n	8001696 <TM_DAC_SIGNAL_SetCustomSignal+0x9a>
		DAC_InitStruct.DAC_Trigger = DAC_Trigger_T8_TRGO;
 8001690:	230c      	movs	r3, #12
 8001692:	673b      	str	r3, [r7, #112]	; 0x70
 8001694:	e001      	b.n	800169a <TM_DAC_SIGNAL_SetCustomSignal+0x9e>
	} else {
		/* Timer is not valid */
		return TM_DAC_SIGNAL_Result_TimerNotValid;
 8001696:	2302      	movs	r3, #2
 8001698:	e0cf      	b.n	800183a <TM_DAC_SIGNAL_SetCustomSignal+0x23e>
	}
	
	/* Get timer data */
	TM_TIMER_PROPERTIES_GetTimerProperties(DAC_TIM[DACx], &Timer_Data);
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	4a6a      	ldr	r2, [pc, #424]	; (8001848 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 800169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a2:	f107 0210 	add.w	r2, r7, #16
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 fbc3 	bl	8001e34 <TM_TIMER_PROPERTIES_GetTimerProperties>
	
	/* Get period and prescaler values */
	TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency(&Timer_Data, frequency);
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	ed97 0b00 	vldr	d0, [r7]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fc3c 	bl	8001f34 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency>
	
	/* Check valid frequency */
	if (Timer_Data.Frequency == 0) {
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <TM_DAC_SIGNAL_SetCustomSignal+0xca>
		return TM_DAC_SIGNAL_Result_Error;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0b9      	b.n	800183a <TM_DAC_SIGNAL_SetCustomSignal+0x23e>
	}
	
	/* Enable DAC clock */
	RCC->APB1ENR |= RCC_APB1ENR_DACEN;
 80016c6:	4a66      	ldr	r2, [pc, #408]	; (8001860 <TM_DAC_SIGNAL_SetCustomSignal+0x264>)
 80016c8:	4b65      	ldr	r3, [pc, #404]	; (8001860 <TM_DAC_SIGNAL_SetCustomSignal+0x264>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
	/* Enable DMA1 clock */
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 80016d2:	4a63      	ldr	r2, [pc, #396]	; (8001860 <TM_DAC_SIGNAL_SetCustomSignal+0x264>)
 80016d4:	4b62      	ldr	r3, [pc, #392]	; (8001860 <TM_DAC_SIGNAL_SetCustomSignal+0x264>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
	
	/* Initialize DAC */
	DAC_InitStruct.DAC_WaveGeneration = DAC_WaveGeneration_None;
 80016de:	2300      	movs	r3, #0
 80016e0:	677b      	str	r3, [r7, #116]	; 0x74
	DAC_InitStruct.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 80016e2:	2300      	movs	r3, #0
 80016e4:	67fb      	str	r3, [r7, #124]	; 0x7c
	
	/* Disable DMA */
	if (DACx == TM_DAC1) {
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d106      	bne.n	80016fa <TM_DAC_SIGNAL_SetCustomSignal+0xfe>
		/* Init DAC channel 1 */
		DAC_Init(DAC_Channel_1, &DAC_InitStruct);
 80016ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016f0:	4619      	mov	r1, r3
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff fa5e 	bl	8000bb4 <DAC_Init>
 80016f8:	e008      	b.n	800170c <TM_DAC_SIGNAL_SetCustomSignal+0x110>
	} else if (DACx == TM_DAC2) {
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d105      	bne.n	800170c <TM_DAC_SIGNAL_SetCustomSignal+0x110>
		/* Init DAC channel 2 */
		DAC_Init(DAC_Channel_2, &DAC_InitStruct);
 8001700:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001704:	4619      	mov	r1, r3
 8001706:	2010      	movs	r0, #16
 8001708:	f7ff fa54 	bl	8000bb4 <DAC_Init>
	}
	
	/* Enable timer clock */
	TM_TIMER_PROPERTIES_EnableClock(DAC_TIM[DACx]);
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	4a4e      	ldr	r2, [pc, #312]	; (8001848 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 8001710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001714:	4618      	mov	r0, r3
 8001716:	f000 fc99 	bl	800204c <TM_TIMER_PROPERTIES_EnableClock>
	
	/* Time base configuration */
	TIM_TimeBaseStructInit(&TIM_TimeBaseStruct); 
 800171a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fe90 	bl	8001444 <TIM_TimeBaseStructInit>
	TIM_TimeBaseStruct.TIM_Period = Timer_Data.Period - 1;          
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	3b01      	subs	r3, #1
 8001728:	66bb      	str	r3, [r7, #104]	; 0x68
	TIM_TimeBaseStruct.TIM_Prescaler = Timer_Data.Prescaler - 1;       
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	b29b      	uxth	r3, r3
 800172e:	3b01      	subs	r3, #1
 8001730:	b29b      	uxth	r3, r3
 8001732:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	TIM_TimeBaseStruct.TIM_ClockDivision = 0;    
 8001736:	2300      	movs	r3, #0
 8001738:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	TIM_TimeBaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 800173c:	2300      	movs	r3, #0
 800173e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	
	/* Initialize timer */
	TIM_TimeBaseInit(DAC_TIM[DACx], &TIM_TimeBaseStruct);
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	4a40      	ldr	r2, [pc, #256]	; (8001848 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 8001746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fe0b 	bl	800136c <TIM_TimeBaseInit>

	/* Enable TIM selection */
	TIM_SelectOutputTrigger(DAC_TIM[DACx], TIM_TRGOSource_Update);
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	4a3b      	ldr	r2, [pc, #236]	; (8001848 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 800175a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175e:	2120      	movs	r1, #32
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fe89 	bl	8001478 <TIM_SelectOutputTrigger>
	
	/* Set DMA options */
	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)Signal_Data;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 800176a:	2340      	movs	r3, #64	; 0x40
 800176c:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStruct.DMA_BufferSize = Signal_Length;
 800176e:	89bb      	ldrh	r3, [r7, #12]
 8001770:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001772:	2300      	movs	r3, #0
 8001774:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800177a:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800177c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001780:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8001782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001786:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_InitStruct.DMA_Mode = DMA_Mode_Circular;
 8001788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178c:	64fb      	str	r3, [r7, #76]	; 0x4c
	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 800178e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001792:	653b      	str	r3, [r7, #80]	; 0x50
	DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;         
 8001794:	2300      	movs	r3, #0
 8001796:	657b      	str	r3, [r7, #84]	; 0x54
	DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8001798:	2301      	movs	r3, #1
 800179a:	65bb      	str	r3, [r7, #88]	; 0x58
	DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800179c:	2300      	movs	r3, #0
 800179e:	65fb      	str	r3, [r7, #92]	; 0x5c
	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80017a0:	2300      	movs	r3, #0
 80017a2:	663b      	str	r3, [r7, #96]	; 0x60
	
	switch (DACx) {
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <TM_DAC_SIGNAL_SetCustomSignal+0x1b4>
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d01b      	beq.n	80017e6 <TM_DAC_SIGNAL_SetCustomSignal+0x1ea>

			/* Enable DMA for DAC Channel 2 */
			DAC_DMACmd(DAC_Channel_2, ENABLE);
			break;
		default:
			break;
 80017ae:	e035      	b.n	800181c <TM_DAC_SIGNAL_SetCustomSignal+0x220>
	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
	
	switch (DACx) {
		case TM_DAC1:
			/* Set peripheral location = 12bit right aligned for channel 1 */
			DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&DAC->DHR12R1;
 80017b0:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <TM_DAC_SIGNAL_SetCustomSignal+0x268>)
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		
			/* Disable DMA */
			DMA_DeInit(DAC_SIGNAL_DMA_DAC1_STREAM);
 80017b4:	482c      	ldr	r0, [pc, #176]	; (8001868 <TM_DAC_SIGNAL_SetCustomSignal+0x26c>)
 80017b6:	f7ff fa7f 	bl	8000cb8 <DMA_DeInit>
			
			/* Set channel used */
			DMA_InitStruct.DMA_Channel = DAC_SIGNAL_DMA_DAC1_CHANNEL;
 80017ba:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
		
			/* Initialize DMA */
			DMA_Init(DAC_SIGNAL_DMA_DAC1_STREAM, &DMA_InitStruct);
 80017c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c4:	4619      	mov	r1, r3
 80017c6:	4828      	ldr	r0, [pc, #160]	; (8001868 <TM_DAC_SIGNAL_SetCustomSignal+0x26c>)
 80017c8:	f7ff fb4a 	bl	8000e60 <DMA_Init>
			
			/* Enable DMA Stream for DAC Channel 1 */
			DMA_Cmd(DAC_SIGNAL_DMA_DAC1_STREAM, ENABLE);
 80017cc:	2101      	movs	r1, #1
 80017ce:	4826      	ldr	r0, [pc, #152]	; (8001868 <TM_DAC_SIGNAL_SetCustomSignal+0x26c>)
 80017d0:	f7ff fb9e 	bl	8000f10 <DMA_Cmd>

			/* Enable DAC Channel 1 */
			DAC_Cmd(DAC_Channel_1, ENABLE);
 80017d4:	2101      	movs	r1, #1
 80017d6:	2000      	movs	r0, #0
 80017d8:	f7ff fa20 	bl	8000c1c <DAC_Cmd>

			/* Enable DMA for DAC Channel 1 */
			DAC_DMACmd(DAC_Channel_1, ENABLE);
 80017dc:	2101      	movs	r1, #1
 80017de:	2000      	movs	r0, #0
 80017e0:	f7ff fa42 	bl	8000c68 <DAC_DMACmd>
			break;
 80017e4:	e01a      	b.n	800181c <TM_DAC_SIGNAL_SetCustomSignal+0x220>
		case TM_DAC2:
			/* Disable DMA */
			DMA_DeInit(DAC_SIGNAL_DMA_DAC2_STREAM);
 80017e6:	4821      	ldr	r0, [pc, #132]	; (800186c <TM_DAC_SIGNAL_SetCustomSignal+0x270>)
 80017e8:	f7ff fa66 	bl	8000cb8 <DMA_DeInit>
			
			/* Set channel used */
			DMA_InitStruct.DMA_Channel = DAC_SIGNAL_DMA_DAC2_CHANNEL;
 80017ec:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
				
			/* Set peripheral location = 12bit right aligned for channel 2 */
			DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&DAC->DHR12R2;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <TM_DAC_SIGNAL_SetCustomSignal+0x274>)
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
		
			/* Initialize DMA */
			DMA_Init(DAC_SIGNAL_DMA_DAC2_STREAM, &DMA_InitStruct);
 80017f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017fa:	4619      	mov	r1, r3
 80017fc:	481b      	ldr	r0, [pc, #108]	; (800186c <TM_DAC_SIGNAL_SetCustomSignal+0x270>)
 80017fe:	f7ff fb2f 	bl	8000e60 <DMA_Init>
			
			/* Enable DMA Stream for DAC Channel 2 */
			DMA_Cmd(DAC_SIGNAL_DMA_DAC2_STREAM, ENABLE);
 8001802:	2101      	movs	r1, #1
 8001804:	4819      	ldr	r0, [pc, #100]	; (800186c <TM_DAC_SIGNAL_SetCustomSignal+0x270>)
 8001806:	f7ff fb83 	bl	8000f10 <DMA_Cmd>

			/* Enable DAC Channel 2 */
			DAC_Cmd(DAC_Channel_2, ENABLE);
 800180a:	2101      	movs	r1, #1
 800180c:	2010      	movs	r0, #16
 800180e:	f7ff fa05 	bl	8000c1c <DAC_Cmd>

			/* Enable DMA for DAC Channel 2 */
			DAC_DMACmd(DAC_Channel_2, ENABLE);
 8001812:	2101      	movs	r1, #1
 8001814:	2010      	movs	r0, #16
 8001816:	f7ff fa27 	bl	8000c68 <DAC_DMACmd>
			break;
 800181a:	bf00      	nop
		default:
			break;
	}
	
	/* Enable timer */
	DAC_TIM[DACx]->CR1 |= TIM_CR1_CEN;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 8001820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 8001828:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800182c:	8812      	ldrh	r2, [r2, #0]
 800182e:	b292      	uxth	r2, r2
 8001830:	f042 0201 	orr.w	r2, r2, #1
 8001834:	b292      	uxth	r2, r2
 8001836:	801a      	strh	r2, [r3, #0]
	
	/* Return OK */
	return TM_DAC_SIGNAL_Result_Ok;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3780      	adds	r7, #128	; 0x80
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200001c4 	.word	0x200001c4
 8001848:	2000020c 	.word	0x2000020c
 800184c:	40000800 	.word	0x40000800
 8001850:	40000c00 	.word	0x40000c00
 8001854:	40001000 	.word	0x40001000
 8001858:	40001400 	.word	0x40001400
 800185c:	40010400 	.word	0x40010400
 8001860:	40023800 	.word	0x40023800
 8001864:	40007408 	.word	0x40007408
 8001868:	40026088 	.word	0x40026088
 800186c:	400260a0 	.word	0x400260a0
 8001870:	40007414 	.word	0x40007414

08001874 <TM_DMA_ClearFlag>:
void TM_DMA_ClearFlags(DMA_Stream_TypeDef* DMA_Stream) {
	/* Clear all flags */
	TM_DMA_ClearFlag(DMA_Stream, DMA_FLAG_ALL);
}

void TM_DMA_ClearFlag(DMA_Stream_TypeDef* DMA_Stream, uint32_t flag) {
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
	uint32_t location;
	uint32_t stream_number;

	/* Check stream value */
	if (DMA_Stream < DMA2_Stream0) {
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a18      	ldr	r2, [pc, #96]	; (80018e4 <TM_DMA_ClearFlag+0x70>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d80a      	bhi.n	800189c <TM_DMA_ClearFlag+0x28>
		location = (uint32_t)&DMA1->LIFCR;
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <TM_DMA_ClearFlag+0x74>)
 8001888:	60fb      	str	r3, [r7, #12]
		stream_number = GET_STREAM_NUMBER_DMA1(DMA_Stream);
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	4b17      	ldr	r3, [pc, #92]	; (80018ec <TM_DMA_ClearFlag+0x78>)
 800188e:	4413      	add	r3, r2
 8001890:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <TM_DMA_ClearFlag+0x7c>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	e009      	b.n	80018b0 <TM_DMA_ClearFlag+0x3c>
	} else {
		location = (uint32_t)&DMA2->LIFCR;
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <TM_DMA_ClearFlag+0x80>)
 800189e:	60fb      	str	r3, [r7, #12]
		stream_number = GET_STREAM_NUMBER_DMA2(DMA_Stream);
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <TM_DMA_ClearFlag+0x84>)
 80018a4:	4413      	add	r3, r2
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <TM_DMA_ClearFlag+0x7c>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	60bb      	str	r3, [r7, #8]
	}
	
	/* Get register offset */
	if (stream_number >= 4) {
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d905      	bls.n	80018c2 <TM_DMA_ClearFlag+0x4e>
		/* High registers for DMA clear */
		location += 4;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3304      	adds	r3, #4
 80018ba:	60fb      	str	r3, [r7, #12]
		
		/* Do offset for high DMA registers */
		stream_number -= 4;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	3b04      	subs	r3, #4
 80018c0:	60bb      	str	r3, [r7, #8]
	}
	
	/* Clear flags */
	*(__IO uint32_t *)location = (flag & DMA_FLAG_ALL) << DMA_Flags_Bit_Pos[stream_number];
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	f002 023d 	and.w	r2, r2, #61	; 0x3d
 80018ca:	480c      	ldr	r0, [pc, #48]	; (80018fc <TM_DMA_ClearFlag+0x88>)
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	4401      	add	r1, r0
 80018d0:	7809      	ldrb	r1, [r1, #0]
 80018d2:	408a      	lsls	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	4002640f 	.word	0x4002640f
 80018e8:	40026008 	.word	0x40026008
 80018ec:	bffd9ff0 	.word	0xbffd9ff0
 80018f0:	aaaaaaab 	.word	0xaaaaaaab
 80018f4:	40026408 	.word	0x40026408
 80018f8:	bffd9bf0 	.word	0xbffd9bf0
 80018fc:	08018aa8 	.word	0x08018aa8

08001900 <TM_DMA_GetFlags>:

uint32_t TM_DMA_GetFlags(DMA_Stream_TypeDef* DMA_Stream, uint32_t flag) {
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
	uint32_t stream_number = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
	uint32_t location = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
	uint32_t flags = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
	
	/* Check stream value */
	if (DMA_Stream < DMA2_Stream0) {
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a1b      	ldr	r2, [pc, #108]	; (8001988 <TM_DMA_GetFlags+0x88>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d80a      	bhi.n	8001934 <TM_DMA_GetFlags+0x34>
		location = (uint32_t)&DMA1->LISR;
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <TM_DMA_GetFlags+0x8c>)
 8001920:	613b      	str	r3, [r7, #16]
		stream_number = GET_STREAM_NUMBER_DMA1(DMA_Stream);
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <TM_DMA_GetFlags+0x90>)
 8001926:	4413      	add	r3, r2
 8001928:	4a1a      	ldr	r2, [pc, #104]	; (8001994 <TM_DMA_GetFlags+0x94>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	e009      	b.n	8001948 <TM_DMA_GetFlags+0x48>
	} else {
		location = (uint32_t)&DMA2->LISR;
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <TM_DMA_GetFlags+0x98>)
 8001936:	613b      	str	r3, [r7, #16]
		stream_number = GET_STREAM_NUMBER_DMA2(DMA_Stream);
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <TM_DMA_GetFlags+0x9c>)
 800193c:	4413      	add	r3, r2
 800193e:	4a15      	ldr	r2, [pc, #84]	; (8001994 <TM_DMA_GetFlags+0x94>)
 8001940:	fba2 2303 	umull	r2, r3, r2, r3
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	617b      	str	r3, [r7, #20]
	}
	
	/* Get register offset */
	if (stream_number >= 4) {
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2b03      	cmp	r3, #3
 800194c:	d905      	bls.n	800195a <TM_DMA_GetFlags+0x5a>
		/* High registers for DMA clear */
		location += 4;
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	3304      	adds	r3, #4
 8001952:	613b      	str	r3, [r7, #16]
		
		/* Do offset for high DMA registers */
		stream_number -= 4;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3b04      	subs	r3, #4
 8001958:	617b      	str	r3, [r7, #20]
	}
	
	/* Get register value */
	flags =   *(__IO uint32_t *)location;
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	60fb      	str	r3, [r7, #12]
	flags >>= DMA_Flags_Bit_Pos[stream_number];
 8001960:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <TM_DMA_GetFlags+0xa0>)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	4413      	add	r3, r2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	40d3      	lsrs	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
	flags &=  DMA_FLAG_ALL;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8001976:	60fb      	str	r3, [r7, #12]
	
	/* Return value */
	return flags;
 8001978:	68fb      	ldr	r3, [r7, #12]
}
 800197a:	4618      	mov	r0, r3
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	4002640f 	.word	0x4002640f
 800198c:	40026000 	.word	0x40026000
 8001990:	bffd9ff0 	.word	0xbffd9ff0
 8001994:	aaaaaaab 	.word	0xaaaaaaab
 8001998:	40026400 	.word	0x40026400
 800199c:	bffd9bf0 	.word	0xbffd9bf0
 80019a0:	08018aa8 	.word	0x08018aa8

080019a4 <TM_DMA_EnableInterrupts>:

void TM_DMA_EnableInterrupts(DMA_Stream_TypeDef* DMA_Stream) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	NVIC_InitTypeDef NVIC_InitStruct;
	uint32_t stream_number;
	
	/* Clear flags first */
	TM_DMA_ClearFlag(DMA_Stream, DMA_FLAG_ALL);
 80019ac:	213d      	movs	r1, #61	; 0x3d
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ff60 	bl	8001874 <TM_DMA_ClearFlag>

	/* Check stream value */
	if (DMA_Stream < DMA2_Stream0) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a20      	ldr	r2, [pc, #128]	; (8001a38 <TM_DMA_EnableInterrupts+0x94>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d811      	bhi.n	80019e0 <TM_DMA_EnableInterrupts+0x3c>
		stream_number = GET_STREAM_NUMBER_DMA1(DMA_Stream);
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <TM_DMA_EnableInterrupts+0x98>)
 80019c0:	4413      	add	r3, r2
 80019c2:	4a1f      	ldr	r2, [pc, #124]	; (8001a40 <TM_DMA_EnableInterrupts+0x9c>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	60fb      	str	r3, [r7, #12]
		NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = DMA1_NVIC_PREEMPTION_PRIORITY;
 80019cc:	2301      	movs	r3, #1
 80019ce:	727b      	strb	r3, [r7, #9]
		NVIC_InitStruct.NVIC_IRQChannel = DMA_IRQs[0][stream_number];
 80019d0:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <TM_DMA_EnableInterrupts+0xa0>)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4413      	add	r3, r2
 80019d6:	f993 3000 	ldrsb.w	r3, [r3]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	723b      	strb	r3, [r7, #8]
 80019de:	e011      	b.n	8001a04 <TM_DMA_EnableInterrupts+0x60>
	} else {
		stream_number = GET_STREAM_NUMBER_DMA2(DMA_Stream);
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <TM_DMA_EnableInterrupts+0xa4>)
 80019e4:	4413      	add	r3, r2
 80019e6:	4a16      	ldr	r2, [pc, #88]	; (8001a40 <TM_DMA_EnableInterrupts+0x9c>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	60fb      	str	r3, [r7, #12]
		NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = DMA2_NVIC_PREEMPTION_PRIORITY;
 80019f0:	2301      	movs	r3, #1
 80019f2:	727b      	strb	r3, [r7, #9]
		NVIC_InitStruct.NVIC_IRQChannel = DMA_IRQs[1][stream_number];
 80019f4:	4a13      	ldr	r2, [pc, #76]	; (8001a44 <TM_DMA_EnableInterrupts+0xa0>)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4413      	add	r3, r2
 80019fa:	3308      	adds	r3, #8
 80019fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	723b      	strb	r3, [r7, #8]
	}
	
	/* Fill NVIC */
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001a04:	2301      	movs	r3, #1
 8001a06:	72fb      	strb	r3, [r7, #11]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = stream_number;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	72bb      	strb	r3, [r7, #10]
	
	/* Init NVIC */
	NVIC_Init(&NVIC_InitStruct);
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f85e 	bl	8000ad4 <NVIC_Init>
	
	/* Enable DMA stream interrupts */
	DMA_Stream->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f043 021e 	orr.w	r2, r3, #30
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	601a      	str	r2, [r3, #0]
	DMA_Stream->FCR |= DMA_SxFCR_FEIE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	615a      	str	r2, [r3, #20]
}
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	4002640f 	.word	0x4002640f
 8001a3c:	bffd9ff0 	.word	0xbffd9ff0
 8001a40:	aaaaaaab 	.word	0xaaaaaaab
 8001a44:	08018aac 	.word	0x08018aac
 8001a48:	bffd9bf0 	.word	0xbffd9bf0

08001a4c <TM_DMA_HalfTransferCompleteHandler>:
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_TransferCompleteHandler could be implemented in the user file
	*/
}

__weak void TM_DMA_HalfTransferCompleteHandler(DMA_Stream_TypeDef* DMA_Stream) {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_HalfTransferCompleteHandler could be implemented in the user file
	*/
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <TM_DMA_TransferErrorHandler>:

__weak void TM_DMA_TransferErrorHandler(DMA_Stream_TypeDef* DMA_Stream) {
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_TransferErrorHandler could be implemented in the user file
	*/
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <TM_DMA_DirectModeErrorHandler>:

__weak void TM_DMA_DirectModeErrorHandler(DMA_Stream_TypeDef* DMA_Stream) {
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_DirectModeErrorHandler could be implemented in the user file
	*/
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <TM_DMA_FIFOErrorHandler>:

__weak void TM_DMA_FIFOErrorHandler(DMA_Stream_TypeDef* DMA_Stream) {
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_FIFOErrorHandler could be implemented in the user file
	*/
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <TM_DMA_INT_ProcessInterrupt>:

/*****************************************************************/
/*                    DMA INTERNAL FUNCTIONS                     */
/*****************************************************************/
static void TM_DMA_INT_ProcessInterrupt(DMA_Stream_TypeDef* DMA_Stream) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	/* Get DMA interrupt status flags */
	uint16_t flags = TM_DMA_GetFlags(DMA_Stream, DMA_FLAG_ALL);
 8001aa4:	213d      	movs	r1, #61	; 0x3d
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ff2a 	bl	8001900 <TM_DMA_GetFlags>
 8001aac:	4603      	mov	r3, r0
 8001aae:	81fb      	strh	r3, [r7, #14]
	
	/* Clear flags */
	TM_DMA_ClearFlag(DMA_Stream, DMA_FLAG_ALL);
 8001ab0:	213d      	movs	r1, #61	; 0x3d
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fede 	bl	8001874 <TM_DMA_ClearFlag>
	
	/* Call user callback function */
	
	/* Check transfer complete flag */
	if ((flags & DMA_FLAG_TCIF) && (DMA_Stream->CR & DMA_SxCR_TCIE)) {
 8001ab8:	89fb      	ldrh	r3, [r7, #14]
 8001aba:	f003 0320 	and.w	r3, r3, #32
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d008      	beq.n	8001ad4 <TM_DMA_INT_ProcessInterrupt+0x38>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <TM_DMA_INT_ProcessInterrupt+0x38>
		TM_DMA_TransferCompleteHandler(DMA_Stream);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f004 f864 	bl	8005b9c <TM_DMA_TransferCompleteHandler>
	}
	/* Check half-transfer complete flag */
	if ((flags & DMA_FLAG_HTIF) && (DMA_Stream->CR & DMA_SxCR_HTIE)) {
 8001ad4:	89fb      	ldrh	r3, [r7, #14]
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d008      	beq.n	8001af0 <TM_DMA_INT_ProcessInterrupt+0x54>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <TM_DMA_INT_ProcessInterrupt+0x54>
		TM_DMA_HalfTransferCompleteHandler(DMA_Stream);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffae 	bl	8001a4c <TM_DMA_HalfTransferCompleteHandler>
	}
	/* Check transfer error flag */
	if ((flags & DMA_FLAG_TEIF) && (DMA_Stream->CR & DMA_SxCR_TEIE)) {
 8001af0:	89fb      	ldrh	r3, [r7, #14]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d008      	beq.n	8001b0c <TM_DMA_INT_ProcessInterrupt+0x70>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <TM_DMA_INT_ProcessInterrupt+0x70>
		TM_DMA_TransferErrorHandler(DMA_Stream);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffaa 	bl	8001a60 <TM_DMA_TransferErrorHandler>
	}
	/* Check direct error flag */
	if ((flags & DMA_FLAG_DMEIF) && (DMA_Stream->CR & DMA_SxCR_DMEIE)) {
 8001b0c:	89fb      	ldrh	r3, [r7, #14]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d008      	beq.n	8001b28 <TM_DMA_INT_ProcessInterrupt+0x8c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <TM_DMA_INT_ProcessInterrupt+0x8c>
		TM_DMA_DirectModeErrorHandler(DMA_Stream);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffa6 	bl	8001a74 <TM_DMA_DirectModeErrorHandler>
	}
	/* Check FIFO error flag */
	if ((flags & DMA_FLAG_FEIF) && (DMA_Stream->FCR & DMA_SxFCR_FEIE)) {
 8001b28:	89fb      	ldrh	r3, [r7, #14]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d008      	beq.n	8001b44 <TM_DMA_INT_ProcessInterrupt+0xa8>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <TM_DMA_INT_ProcessInterrupt+0xa8>
		TM_DMA_FIFOErrorHandler(DMA_Stream);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffa2 	bl	8001a88 <TM_DMA_FIFOErrorHandler>
	}
}
 8001b44:	bf00      	nop
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <DMA1_Stream0_IRQHandler>:

/* Handle all DMA interrupt handlers possible */
#ifndef DMA1_STREAM0_DISABLE_IRQHANDLER
void DMA1_Stream0_IRQHandler(void) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream0);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <DMA1_Stream0_IRQHandler+0x10>)
 8001b52:	f7ff ffa3 	bl	8001a9c <TM_DMA_INT_ProcessInterrupt>
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40026010 	.word	0x40026010

08001b60 <DMA1_Stream1_IRQHandler>:
#endif
#ifndef DMA1_STREAM1_DISABLE_IRQHANDLER
void DMA1_Stream1_IRQHandler(void) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream1);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <DMA1_Stream1_IRQHandler+0x10>)
 8001b66:	f7ff ff99 	bl	8001a9c <TM_DMA_INT_ProcessInterrupt>
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40026028 	.word	0x40026028

08001b74 <DMA1_Stream2_IRQHandler>:
#endif
#ifndef DMA1_STREAM2_DISABLE_IRQHANDLER
void DMA1_Stream2_IRQHandler(void) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream2);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <DMA1_Stream2_IRQHandler+0x10>)
 8001b7a:	f7ff ff8f 	bl	8001a9c <TM_DMA_INT_ProcessInterrupt>
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40026040 	.word	0x40026040

08001b88 <DMA1_Stream3_IRQHandler>:
#endif
#ifndef DMA1_STREAM3_DISABLE_IRQHANDLER
void DMA1_Stream3_IRQHandler(void) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream3);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <DMA1_Stream3_IRQHandler+0x10>)
 8001b8e:	f7ff ff85 	bl	8001a9c <TM_DMA_INT_ProcessInterrupt>
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40026058 	.word	0x40026058

08001b9c <DMA1_Stream4_IRQHandler>:
#endif
#ifndef DMA1_STREAM4_DISABLE_IRQHANDLER
void DMA1_Stream4_IRQHandler(void) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream4);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <DMA1_Stream4_IRQHandler+0x10>)
 8001ba2:	f7ff ff7b 	bl	8001a9c <TM_DMA_INT_ProcessInterrupt>
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40026070 	.word	0x40026070

08001bb0 <DMA1_Stream5_IRQHandler>:
#endif
#ifndef DMA1_STREAM5_DISABLE_IRQHANDLER
void DMA1_Stream5_IRQHandler(void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream5);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <DMA1_Stream5_IRQHandler+0x10>)
 8001bb6:	f7ff ff71 	bl	8001a9c <TM_DMA_INT_ProcessInterrupt>
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40026088 	.word	0x40026088

08001bc4 <DMA1_Stream6_IRQHandler>:
#endif
#ifndef DMA1_STREAM6_DISABLE_IRQHANDLER
void DMA1_Stream6_IRQHandler(void) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream6);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <DMA1_Stream6_IRQHandler+0x10>)
 8001bca:	f7ff ff67 	bl	8001a9c <TM_DMA_INT_ProcessInterrupt>
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	400260a0 	.word	0x400260a0

08001bd8 <DMA1_Stream7_IRQHandler>:
#endif
#ifndef DMA1_STREAM7_DISABLE_IRQHANDLER
void DMA1_Stream7_IRQHandler(void) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream7);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <DMA1_Stream7_IRQHandler+0x10>)
 8001bde:	f7ff ff5d 	bl	8001a9c <TM_DMA_INT_ProcessInterrupt>
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	400260b8 	.word	0x400260b8

08001bec <DMA2_Stream0_IRQHandler>:
#endif
#ifndef DMA2_STREAM0_DISABLE_IRQHANDLER
void DMA2_Stream0_IRQHandler(void) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream0);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <DMA2_Stream0_IRQHandler+0x10>)
 8001bf2:	f7ff ff53 	bl	8001a9c <TM_DMA_INT_ProcessInterrupt>
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40026410 	.word	0x40026410

08001c00 <DMA2_Stream1_IRQHandler>:
#endif
#ifndef DMA2_STREAM1_DISABLE_IRQHANDLER
void DMA2_Stream1_IRQHandler(void) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream1);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <DMA2_Stream1_IRQHandler+0x10>)
 8001c06:	f7ff ff49 	bl	8001a9c <TM_DMA_INT_ProcessInterrupt>
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40026428 	.word	0x40026428

08001c14 <DMA2_Stream2_IRQHandler>:
#endif
#ifndef DMA2_STREAM2_DISABLE_IRQHANDLER
void DMA2_Stream2_IRQHandler(void) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream2);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <DMA2_Stream2_IRQHandler+0x10>)
 8001c1a:	f7ff ff3f 	bl	8001a9c <TM_DMA_INT_ProcessInterrupt>
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40026440 	.word	0x40026440

08001c28 <DMA2_Stream3_IRQHandler>:
#endif
#ifndef DMA2_STREAM3_DISABLE_IRQHANDLER
void DMA2_Stream3_IRQHandler(void) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream3);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <DMA2_Stream3_IRQHandler+0x10>)
 8001c2e:	f7ff ff35 	bl	8001a9c <TM_DMA_INT_ProcessInterrupt>
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40026458 	.word	0x40026458

08001c3c <DMA2_Stream4_IRQHandler>:
#endif
#ifndef DMA2_STREAM4_DISABLE_IRQHANDLER
void DMA2_Stream4_IRQHandler(void) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream4);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <DMA2_Stream4_IRQHandler+0x10>)
 8001c42:	f7ff ff2b 	bl	8001a9c <TM_DMA_INT_ProcessInterrupt>
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40026470 	.word	0x40026470

08001c50 <DMA2_Stream5_IRQHandler>:
#endif
#ifndef DMA2_STREAM5_DISABLE_IRQHANDLER
void DMA2_Stream5_IRQHandler(void) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream5);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <DMA2_Stream5_IRQHandler+0x10>)
 8001c56:	f7ff ff21 	bl	8001a9c <TM_DMA_INT_ProcessInterrupt>
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40026488 	.word	0x40026488

08001c64 <DMA2_Stream6_IRQHandler>:
#endif
#ifndef DMA2_STREAM6_DISABLE_IRQHANDLER
void DMA2_Stream6_IRQHandler(void) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream6);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <DMA2_Stream6_IRQHandler+0x10>)
 8001c6a:	f7ff ff17 	bl	8001a9c <TM_DMA_INT_ProcessInterrupt>
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	400264a0 	.word	0x400264a0

08001c78 <DMA2_Stream7_IRQHandler>:
#endif
#ifndef DMA2_STREAM7_DISABLE_IRQHANDLER
void DMA2_Stream7_IRQHandler(void) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream7);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <DMA2_Stream7_IRQHandler+0x10>)
 8001c7e:	f7ff ff0d 	bl	8001a9c <TM_DMA_INT_ProcessInterrupt>
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	400264b8 	.word	0x400264b8

08001c8c <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	4608      	mov	r0, r1
 8001c96:	4611      	mov	r1, r2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	807b      	strh	r3, [r7, #2]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	707b      	strb	r3, [r7, #1]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8001ca6:	887b      	ldrh	r3, [r7, #2]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00e      	beq.n	8001cca <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f823 	bl	8001cf8 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8001cb2:	7838      	ldrb	r0, [r7, #0]
 8001cb4:	787a      	ldrb	r2, [r7, #1]
 8001cb6:	8879      	ldrh	r1, [r7, #2]
 8001cb8:	7d3b      	ldrb	r3, [r7, #20]
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	7c3b      	ldrb	r3, [r7, #16]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f830 	bl	8001d28 <TM_GPIO_INT_Init>
 8001cc8:	e000      	b.n	8001ccc <TM_GPIO_Init+0x40>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 8001cca:	bf00      	nop
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop

08001cd4 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8001ce2:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8001ce6:	0a9b      	lsrs	r3, r3, #10
 8001ce8:	b29b      	uxth	r3, r3
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop

08001cf8 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ffe7 	bl	8001cd4 <TM_GPIO_GetPortSource>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	fa03 f102 	lsl.w	r1, r3, r2
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <TM_GPIO_INT_EnableClock+0x2c>)
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <TM_GPIO_INT_EnableClock+0x2c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	430b      	orrs	r3, r1
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800

08001d28 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	4608      	mov	r0, r1
 8001d32:	4611      	mov	r1, r2
 8001d34:	461a      	mov	r2, r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	807b      	strh	r3, [r7, #2]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	707b      	strb	r3, [r7, #1]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffc6 	bl	8001cd4 <TM_GPIO_GetPortSource>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	e067      	b.n	8001e22 <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	fa42 f303 	asr.w	r3, r2, r3
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d05b      	beq.n	8001e1a <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8001d62:	7bbb      	ldrb	r3, [r7, #14]
 8001d64:	7bba      	ldrb	r2, [r7, #14]
 8001d66:	4932      	ldr	r1, [pc, #200]	; (8001e30 <TM_GPIO_INT_Init+0x108>)
 8001d68:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001d6c:	b211      	sxth	r1, r2
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	b212      	sxth	r2, r2
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	b212      	sxth	r2, r2
 8001d7c:	b291      	uxth	r1, r2
 8001d7e:	4a2c      	ldr	r2, [pc, #176]	; (8001e30 <TM_GPIO_INT_Init+0x108>)
 8001d80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	0052      	lsls	r2, r2, #1
 8001d8c:	2103      	movs	r1, #3
 8001d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d92:	43d2      	mvns	r2, r2
 8001d94:	4013      	ands	r3, r2
 8001d96:	7e39      	ldrb	r1, [r7, #24]
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	0052      	lsls	r2, r2, #1
 8001d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2103      	movs	r1, #3
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	4013      	ands	r3, r2
 8001db8:	7879      	ldrb	r1, [r7, #1]
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	0052      	lsls	r2, r2, #1
 8001dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8001dc8:	787b      	ldrb	r3, [r7, #1]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d002      	beq.n	8001dd4 <TM_GPIO_INT_Init+0xac>
 8001dce:	787b      	ldrb	r3, [r7, #1]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d123      	bne.n	8001e1c <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	2101      	movs	r1, #1
 8001ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8001de0:	b292      	uxth	r2, r2
 8001de2:	43d2      	mvns	r2, r2
 8001de4:	401a      	ands	r2, r3
 8001de6:	7839      	ldrb	r1, [r7, #0]
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2103      	movs	r1, #3
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	4013      	ands	r3, r2
 8001e08:	7f39      	ldrb	r1, [r7, #28]
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	0052      	lsls	r2, r2, #1
 8001e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	e000      	b.n	8001e1c <TM_GPIO_INT_Init+0xf4>
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 8001e1a:	bf00      	nop
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	2b0f      	cmp	r3, #15
 8001e26:	d994      	bls.n	8001d52 <TM_GPIO_INT_Init+0x2a>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200001c8 	.word	0x200001c8

08001e34 <TM_TIMER_PROPERTIES_GetTimerProperties>:
 * | along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32f4_timer_properties.h"

TM_TIMER_PROPERTIES_Result_t TM_TIMER_PROPERTIES_GetTimerProperties(TIM_TypeDef* TIMx, TM_TIMER_PROPERTIES_t* Timer_Data) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
	RCC_ClocksTypeDef RCC_ClocksStruct;

	/* Get clocks */
	RCC_GetClocksFreq(&RCC_ClocksStruct);
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff f968 	bl	8001118 <RCC_GetClocksFreq>
	
	/* All timers have 16-bit prescaler */
	Timer_Data->MaxPrescaler = 0xFFFF;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e4e:	609a      	str	r2, [r3, #8]
	
	if (0 /* 32bit timers with PCLK2 max frequency */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e56:	d003      	beq.n	8001e60 <TM_TIMER_PROPERTIES_GetTimerProperties+0x2c>
#ifdef TIM2
		|| TIMx == TIM2
#endif
#ifdef TIM5
		|| TIMx == TIM5
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a29      	ldr	r2, [pc, #164]	; (8001f00 <TM_TIMER_PROPERTIES_GetTimerProperties+0xcc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <TM_TIMER_PROPERTIES_GetTimerProperties+0x3e>
#endif
	) {
		Timer_Data->TimerFrequency = RCC_ClocksStruct.PCLK2_Frequency;	/* Clock */
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	601a      	str	r2, [r3, #0]
		Timer_Data->MaxPeriod = 0xFFFFFFFF;								/* Max period */
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	605a      	str	r2, [r3, #4]
		
		/* Timer valid */
		return TM_TIMER_PROPERTIES_Result_Ok;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e042      	b.n	8001ef8 <TM_TIMER_PROPERTIES_GetTimerProperties+0xc4>
	} else if (0	/* 16bit timers with HCLK clock frequency */
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a23      	ldr	r2, [pc, #140]	; (8001f04 <TM_TIMER_PROPERTIES_GetTimerProperties+0xd0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00f      	beq.n	8001e9a <TM_TIMER_PROPERTIES_GetTimerProperties+0x66>
#ifdef TIM1
		|| TIMx == TIM1
#endif
#ifdef TIM8
		|| TIMx == TIM8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <TM_TIMER_PROPERTIES_GetTimerProperties+0xd4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00b      	beq.n	8001e9a <TM_TIMER_PROPERTIES_GetTimerProperties+0x66>
#endif
#ifdef TIM9
		|| TIMx == TIM9
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a21      	ldr	r2, [pc, #132]	; (8001f0c <TM_TIMER_PROPERTIES_GetTimerProperties+0xd8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d007      	beq.n	8001e9a <TM_TIMER_PROPERTIES_GetTimerProperties+0x66>
#endif
#ifdef TIM10
		|| TIMx == TIM10
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a20      	ldr	r2, [pc, #128]	; (8001f10 <TM_TIMER_PROPERTIES_GetTimerProperties+0xdc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d003      	beq.n	8001e9a <TM_TIMER_PROPERTIES_GetTimerProperties+0x66>
#endif
#ifdef TIM11
		|| TIMx == TIM11
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <TM_TIMER_PROPERTIES_GetTimerProperties+0xe0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d108      	bne.n	8001eac <TM_TIMER_PROPERTIES_GetTimerProperties+0x78>
#endif
	) {
		Timer_Data->TimerFrequency = RCC_ClocksStruct.HCLK_Frequency;	/* Clock */
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	601a      	str	r2, [r3, #0]
		Timer_Data->MaxPeriod = 0xFFFF;									/* Max period */
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea6:	605a      	str	r2, [r3, #4]
		
		/* Timer valid */
		return TM_TIMER_PROPERTIES_Result_Ok;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e025      	b.n	8001ef8 <TM_TIMER_PROPERTIES_GetTimerProperties+0xc4>
	} else if (0	/* 16bit timers with PCLK2 clock frequency */
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a1a      	ldr	r2, [pc, #104]	; (8001f18 <TM_TIMER_PROPERTIES_GetTimerProperties+0xe4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d017      	beq.n	8001ee4 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
#ifdef TIM3
		|| TIMx == TIM3
#endif
#ifdef TIM4
		|| TIMx == TIM4
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a19      	ldr	r2, [pc, #100]	; (8001f1c <TM_TIMER_PROPERTIES_GetTimerProperties+0xe8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d013      	beq.n	8001ee4 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
#endif
#ifdef TIM6
		|| TIMx == TIM6
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a18      	ldr	r2, [pc, #96]	; (8001f20 <TM_TIMER_PROPERTIES_GetTimerProperties+0xec>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00f      	beq.n	8001ee4 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
#endif
#ifdef TIM7
		|| TIMx == TIM7
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a17      	ldr	r2, [pc, #92]	; (8001f24 <TM_TIMER_PROPERTIES_GetTimerProperties+0xf0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00b      	beq.n	8001ee4 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
#endif
#ifdef TIM12
		|| TIMx == TIM12
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a16      	ldr	r2, [pc, #88]	; (8001f28 <TM_TIMER_PROPERTIES_GetTimerProperties+0xf4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
#endif
#ifdef TIM13
		|| TIMx == TIM13
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a15      	ldr	r2, [pc, #84]	; (8001f2c <TM_TIMER_PROPERTIES_GetTimerProperties+0xf8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d003      	beq.n	8001ee4 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
#endif
#ifdef TIM14
		|| TIMx == TIM14
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <TM_TIMER_PROPERTIES_GetTimerProperties+0xfc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d108      	bne.n	8001ef6 <TM_TIMER_PROPERTIES_GetTimerProperties+0xc2>
#endif
	) {
		Timer_Data->TimerFrequency = RCC_ClocksStruct.PCLK2_Frequency;	/* Clock */
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	601a      	str	r2, [r3, #0]
		Timer_Data->MaxPeriod = 0xFFFF;									/* Max period */
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ef0:	605a      	str	r2, [r3, #4]
		
		/* Timer valid */
		return TM_TIMER_PROPERTIES_Result_Ok;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e000      	b.n	8001ef8 <TM_TIMER_PROPERTIES_GetTimerProperties+0xc4>
	}
	
	/* Timer is not valid */
	return TM_TIMER_PROPERTIES_Result_TimerNotValid;
 8001ef6:	2302      	movs	r3, #2
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40000c00 	.word	0x40000c00
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40010400 	.word	0x40010400
 8001f0c:	40014000 	.word	0x40014000
 8001f10:	40014400 	.word	0x40014400
 8001f14:	40014800 	.word	0x40014800
 8001f18:	40000400 	.word	0x40000400
 8001f1c:	40000800 	.word	0x40000800
 8001f20:	40001000 	.word	0x40001000
 8001f24:	40001400 	.word	0x40001400
 8001f28:	40001800 	.word	0x40001800
 8001f2c:	40001c00 	.word	0x40001c00
 8001f30:	40002000 	.word	0x40002000

08001f34 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency>:

TM_TIMER_PROPERTIES_Result_t TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency(TM_TIMER_PROPERTIES_t* Timer_Data, double frequency) {
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	ed87 0b00 	vstr	d0, [r7]
	if (frequency > Timer_Data->TimerFrequency) {
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fa81 	bl	800044c <__aeabi_ui2d>
 8001f4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f4e:	f7fe fd65 	bl	8000a1c <__aeabi_dcmplt>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x3a>
		/* Reset values */
		Timer_Data->Prescaler = 0;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
		Timer_Data->Period = 0;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]
		Timer_Data->Frequency = 0;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	615a      	str	r2, [r3, #20]
		
		/* Frequency too high */
		return TM_TIMER_PROPERTIES_Result_FrequencyTooHigh;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e069      	b.n	8002042 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x10e>
	} else if (frequency == 0) {
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f7a:	f7fe fd45 	bl	8000a08 <__aeabi_dcmpeq>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x66>
		/* Reset values */
		Timer_Data->Prescaler = 0;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
		Timer_Data->Period = 0;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	60da      	str	r2, [r3, #12]
		Timer_Data->Frequency = 0;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]
		
		/* Not valid frequency */
		return TM_TIMER_PROPERTIES_Result_FrequencyTooLow;
 8001f96:	2304      	movs	r3, #4
 8001f98:	e053      	b.n	8002042 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x10e>
	}
	
	/* Fix for 16/32bit timers */
	if (Timer_Data->MaxPeriod <= 0xFFFF) {
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa2:	d204      	bcs.n	8001fae <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x7a>
		Timer_Data->MaxPeriod++;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	605a      	str	r2, [r3, #4]
	}
	
	/* Get minimum prescaler and maximum resolution for timer */
	Timer_Data->Prescaler = 0;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
	do {
		/* Get clock */
		Timer_Data->Period = (Timer_Data->TimerFrequency / (Timer_Data->Prescaler + 1));
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	60da      	str	r2, [r3, #12]
		/* Get period */
		Timer_Data->Period = (Timer_Data->Period / frequency);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fa3e 	bl	800044c <__aeabi_ui2d>
 8001fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fd4:	f7fe fbda 	bl	800078c <__aeabi_ddiv>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	460c      	mov	r4, r1
 8001fdc:	4618      	mov	r0, r3
 8001fde:	4621      	mov	r1, r4
 8001fe0:	f7fe fd44 	bl	8000a6c <__aeabi_d2uiz>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	60da      	str	r2, [r3, #12]
		/* Increase prescaler value */
		Timer_Data->Prescaler++;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
	} while (Timer_Data->Period > (Timer_Data->MaxPeriod) && Timer_Data->Prescaler <= (Timer_Data->MaxPrescaler + 1));
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d906      	bls.n	800200e <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0xda>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	3301      	adds	r3, #1
 800200a:	429a      	cmp	r2, r3
 800200c:	d9d2      	bls.n	8001fb4 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x80>
	/* Check for too low frequency */ 
	if (Timer_Data->Prescaler > (Timer_Data->MaxPrescaler + 1)) {
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	3301      	adds	r3, #1
 8002018:	429a      	cmp	r2, r3
 800201a:	d90a      	bls.n	8002032 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0xfe>
		/* Reset values */
		Timer_Data->Prescaler = 0;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
		Timer_Data->Period = 0;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	60da      	str	r2, [r3, #12]
		Timer_Data->Frequency = 0;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	615a      	str	r2, [r3, #20]
		
		/* Prescaler too high, frequency is too low for use */
		return TM_TIMER_PROPERTIES_Result_FrequencyTooLow;
 800202e:	2304      	movs	r3, #4
 8002030:	e007      	b.n	8002042 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x10e>
	}
	
	/* Set frequency */
	Timer_Data->Frequency = frequency;
 8002032:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002036:	f7fe fd19 	bl	8000a6c <__aeabi_d2uiz>
 800203a:	4602      	mov	r2, r0
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	615a      	str	r2, [r3, #20]
	
	/* Return OK */
	return TM_TIMER_PROPERTIES_Result_Ok;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	bd90      	pop	{r4, r7, pc}
 800204a:	bf00      	nop

0800204c <TM_TIMER_PROPERTIES_EnableClock>:

TM_TIMER_PROPERTIES_Result_t TM_TIMER_PROPERTIES_EnableClock(TIM_TypeDef* TIMx) {
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
#ifdef TIM1
	if (TIMx == TIM1) {
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a49      	ldr	r2, [pc, #292]	; (800217c <TM_TIMER_PROPERTIES_EnableClock+0x130>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d105      	bne.n	8002068 <TM_TIMER_PROPERTIES_EnableClock+0x1c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800205c:	4a48      	ldr	r2, [pc, #288]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 800205e:	4b48      	ldr	r3, [pc, #288]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6453      	str	r3, [r2, #68]	; 0x44
	}
#endif
#ifdef TIM2
	if (TIMx == TIM2) {
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206e:	d105      	bne.n	800207c <TM_TIMER_PROPERTIES_EnableClock+0x30>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002070:	4a43      	ldr	r2, [pc, #268]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8002072:	4b43      	ldr	r3, [pc, #268]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
#ifdef TIM3
	if (TIMx == TIM3) {
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a41      	ldr	r2, [pc, #260]	; (8002184 <TM_TIMER_PROPERTIES_EnableClock+0x138>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d105      	bne.n	8002090 <TM_TIMER_PROPERTIES_EnableClock+0x44>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002084:	4a3e      	ldr	r2, [pc, #248]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8002086:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f043 0302 	orr.w	r3, r3, #2
 800208e:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
#ifdef TIM4
	if (TIMx == TIM4) {
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a3d      	ldr	r2, [pc, #244]	; (8002188 <TM_TIMER_PROPERTIES_EnableClock+0x13c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d105      	bne.n	80020a4 <TM_TIMER_PROPERTIES_EnableClock+0x58>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002098:	4a39      	ldr	r2, [pc, #228]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 800209a:	4b39      	ldr	r3, [pc, #228]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
#ifdef TIM5
	if (TIMx == TIM5) {
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a39      	ldr	r2, [pc, #228]	; (800218c <TM_TIMER_PROPERTIES_EnableClock+0x140>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d105      	bne.n	80020b8 <TM_TIMER_PROPERTIES_EnableClock+0x6c>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80020ac:	4a34      	ldr	r2, [pc, #208]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 80020ae:	4b34      	ldr	r3, [pc, #208]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f043 0308 	orr.w	r3, r3, #8
 80020b6:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
#ifdef TIM6
	if (TIMx == TIM6) {
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a35      	ldr	r2, [pc, #212]	; (8002190 <TM_TIMER_PROPERTIES_EnableClock+0x144>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d105      	bne.n	80020cc <TM_TIMER_PROPERTIES_EnableClock+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 80020c0:	4a2f      	ldr	r2, [pc, #188]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 80020c2:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f043 0310 	orr.w	r3, r3, #16
 80020ca:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
#ifdef TIM7
	if (TIMx == TIM7) {
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a31      	ldr	r2, [pc, #196]	; (8002194 <TM_TIMER_PROPERTIES_EnableClock+0x148>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d105      	bne.n	80020e0 <TM_TIMER_PROPERTIES_EnableClock+0x94>
		RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 80020d4:	4a2a      	ldr	r2, [pc, #168]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 80020d6:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f043 0320 	orr.w	r3, r3, #32
 80020de:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
#ifdef TIM8
	if (TIMx == TIM8) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a2d      	ldr	r2, [pc, #180]	; (8002198 <TM_TIMER_PROPERTIES_EnableClock+0x14c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d105      	bne.n	80020f4 <TM_TIMER_PROPERTIES_EnableClock+0xa8>
		RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 80020e8:	4a25      	ldr	r2, [pc, #148]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f043 0302 	orr.w	r3, r3, #2
 80020f2:	6453      	str	r3, [r2, #68]	; 0x44
	}
#endif
#ifdef TIM9
	if (TIMx == TIM9) {
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a29      	ldr	r2, [pc, #164]	; (800219c <TM_TIMER_PROPERTIES_EnableClock+0x150>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d105      	bne.n	8002108 <TM_TIMER_PROPERTIES_EnableClock+0xbc>
		RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 80020fc:	4a20      	ldr	r2, [pc, #128]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002106:	6453      	str	r3, [r2, #68]	; 0x44
	}
#endif
#ifdef TIM10
	if (TIMx == TIM10) {
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a25      	ldr	r2, [pc, #148]	; (80021a0 <TM_TIMER_PROPERTIES_EnableClock+0x154>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d105      	bne.n	800211c <TM_TIMER_PROPERTIES_EnableClock+0xd0>
		RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 8002110:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8002112:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800211a:	6453      	str	r3, [r2, #68]	; 0x44
	}
#endif
#ifdef TIM11
	if (TIMx == TIM11) {
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <TM_TIMER_PROPERTIES_EnableClock+0x158>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d105      	bne.n	8002130 <TM_TIMER_PROPERTIES_EnableClock+0xe4>
		RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 8002124:	4a16      	ldr	r2, [pc, #88]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800212e:	6453      	str	r3, [r2, #68]	; 0x44
	}
#endif
#ifdef TIM12
	if (TIMx == TIM12) {
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <TM_TIMER_PROPERTIES_EnableClock+0x15c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d105      	bne.n	8002144 <TM_TIMER_PROPERTIES_EnableClock+0xf8>
		RCC->APB1ENR |= RCC_APB1ENR_TIM12EN;
 8002138:	4a11      	ldr	r2, [pc, #68]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002142:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
#ifdef TIM13
	if (TIMx == TIM13) {
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a19      	ldr	r2, [pc, #100]	; (80021ac <TM_TIMER_PROPERTIES_EnableClock+0x160>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d105      	bne.n	8002158 <TM_TIMER_PROPERTIES_EnableClock+0x10c>
		RCC->APB1ENR |= RCC_APB1ENR_TIM13EN;
 800214c:	4a0c      	ldr	r2, [pc, #48]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002156:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
#ifdef TIM14
	if (TIMx == TIM14) {
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a15      	ldr	r2, [pc, #84]	; (80021b0 <TM_TIMER_PROPERTIES_EnableClock+0x164>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d105      	bne.n	800216c <TM_TIMER_PROPERTIES_EnableClock+0x120>
		RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 8002160:	4a07      	ldr	r2, [pc, #28]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216a:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
	
	/* Return OK */
	return TM_TIMER_PROPERTIES_Result_Ok;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40010000 	.word	0x40010000
 8002180:	40023800 	.word	0x40023800
 8002184:	40000400 	.word	0x40000400
 8002188:	40000800 	.word	0x40000800
 800218c:	40000c00 	.word	0x40000c00
 8002190:	40001000 	.word	0x40001000
 8002194:	40001400 	.word	0x40001400
 8002198:	40010400 	.word	0x40010400
 800219c:	40014000 	.word	0x40014000
 80021a0:	40014400 	.word	0x40014400
 80021a4:	40014800 	.word	0x40014800
 80021a8:	40001800 	.word	0x40001800
 80021ac:	40001c00 	.word	0x40001c00
 80021b0:	40002000 	.word	0x40002000

080021b4 <TM_USB_VCP_Init>:
USB_OTG_CORE_HANDLE	USB_OTG_dev;

/* USB VCP Internal receive buffer */
extern uint8_t TM_INT_USB_VCP_ReceiveBuffer[USB_VCP_RECEIVE_BUFFER_LENGTH];

TM_USB_VCP_Result TM_USB_VCP_Init(void) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af02      	add	r7, sp, #8
	/* Initialize USB */
	USBD_Init(	&USB_OTG_dev,
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <TM_USB_VCP_Init+0x38>)
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <TM_USB_VCP_Init+0x3c>)
 80021c0:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <TM_USB_VCP_Init+0x40>)
 80021c2:	2101      	movs	r1, #1
 80021c4:	480c      	ldr	r0, [pc, #48]	; (80021f8 <TM_USB_VCP_Init+0x44>)
 80021c6:	f002 fc8d 	bl	8004ae4 <USBD_Init>
				&USR_desc, 
				&USBD_CDC_cb, 
				&USR_cb);
	
	/* Reset buffer counters */
	tm_int_usb_vcp_buf_in = 0;
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <TM_USB_VCP_Init+0x48>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
	tm_int_usb_vcp_buf_out = 0;
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <TM_USB_VCP_Init+0x4c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
	tm_int_usb_vcp_buf_num = 0;
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <TM_USB_VCP_Init+0x50>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
	
	/* Initialized */
	TM_USB_VCP_INT_Init = 1;
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <TM_USB_VCP_Init+0x54>)
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
	
	/* Return OK */
	return TM_USB_VCP_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000018c 	.word	0x2000018c
 80021f0:	200000dc 	.word	0x200000dc
 80021f4:	20000154 	.word	0x20000154
 80021f8:	200002a0 	.word	0x200002a0
 80021fc:	20000214 	.word	0x20000214
 8002200:	2000021c 	.word	0x2000021c
 8002204:	20000218 	.word	0x20000218
 8002208:	200001de 	.word	0x200001de

0800220c <TM_USB_VCP_Getc>:
	
	/* Character is not in buffer */
	return 0;
}

TM_USB_VCP_Result TM_USB_VCP_Getc(uint8_t* c) {
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	/* Any data in buffer */
	if (tm_int_usb_vcp_buf_num > 0) {
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <TM_USB_VCP_Getc+0x60>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d01d      	beq.n	8002258 <TM_USB_VCP_Getc+0x4c>
		/* Check overflow */
		if (tm_int_usb_vcp_buf_out >= USB_VCP_RECEIVE_BUFFER_LENGTH) {
 800221c:	4b14      	ldr	r3, [pc, #80]	; (8002270 <TM_USB_VCP_Getc+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b7f      	cmp	r3, #127	; 0x7f
 8002222:	d902      	bls.n	800222a <TM_USB_VCP_Getc+0x1e>
			tm_int_usb_vcp_buf_out = 0;
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <TM_USB_VCP_Getc+0x64>)
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
		}
		*c = TM_INT_USB_VCP_ReceiveBuffer[tm_int_usb_vcp_buf_out];
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <TM_USB_VCP_Getc+0x64>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a11      	ldr	r2, [pc, #68]	; (8002274 <TM_USB_VCP_Getc+0x68>)
 8002230:	5cd2      	ldrb	r2, [r2, r3]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	701a      	strb	r2, [r3, #0]
		TM_INT_USB_VCP_ReceiveBuffer[tm_int_usb_vcp_buf_out] = 0;
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <TM_USB_VCP_Getc+0x64>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <TM_USB_VCP_Getc+0x68>)
 800223c:	2100      	movs	r1, #0
 800223e:	54d1      	strb	r1, [r2, r3]
		
		/* Set counters */
		tm_int_usb_vcp_buf_out++;
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <TM_USB_VCP_Getc+0x64>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <TM_USB_VCP_Getc+0x64>)
 8002248:	6013      	str	r3, [r2, #0]
		tm_int_usb_vcp_buf_num--;
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <TM_USB_VCP_Getc+0x60>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	3b01      	subs	r3, #1
 8002250:	4a06      	ldr	r2, [pc, #24]	; (800226c <TM_USB_VCP_Getc+0x60>)
 8002252:	6013      	str	r3, [r2, #0]
		
		/* Data OK */
		return TM_USB_VCP_DATA_OK;
 8002254:	2303      	movs	r3, #3
 8002256:	e003      	b.n	8002260 <TM_USB_VCP_Getc+0x54>
	}
	*c = 0;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
	/* Data not ready */
	return TM_USB_VCP_DATA_EMPTY;
 800225e:	2304      	movs	r3, #4
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	20000218 	.word	0x20000218
 8002270:	2000021c 	.word	0x2000021c
 8002274:	20000220 	.word	0x20000220

08002278 <TM_INT_USB_VCP_AddReceived>:

	/* Return number of characters in string */
	return i;
}

TM_USB_VCP_Result TM_INT_USB_VCP_AddReceived(uint8_t c) {
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
	/* Still available data in buffer */
	if (tm_int_usb_vcp_buf_num < USB_VCP_RECEIVE_BUFFER_LENGTH) {
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <TM_INT_USB_VCP_AddReceived+0x50>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b7f      	cmp	r3, #127	; 0x7f
 8002288:	d817      	bhi.n	80022ba <TM_INT_USB_VCP_AddReceived+0x42>
		/* Check for overflow */
		if (tm_int_usb_vcp_buf_in >= USB_VCP_RECEIVE_BUFFER_LENGTH) {
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <TM_INT_USB_VCP_AddReceived+0x54>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b7f      	cmp	r3, #127	; 0x7f
 8002290:	d902      	bls.n	8002298 <TM_INT_USB_VCP_AddReceived+0x20>
			tm_int_usb_vcp_buf_in = 0;
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <TM_INT_USB_VCP_AddReceived+0x54>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
		}
		/* Add character to buffer */
		TM_INT_USB_VCP_ReceiveBuffer[tm_int_usb_vcp_buf_in] = c;
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <TM_INT_USB_VCP_AddReceived+0x54>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	490c      	ldr	r1, [pc, #48]	; (80022d0 <TM_INT_USB_VCP_AddReceived+0x58>)
 800229e:	79fa      	ldrb	r2, [r7, #7]
 80022a0:	54ca      	strb	r2, [r1, r3]
		/* Increase counters */
		tm_int_usb_vcp_buf_in++;
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <TM_INT_USB_VCP_AddReceived+0x54>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a08      	ldr	r2, [pc, #32]	; (80022cc <TM_INT_USB_VCP_AddReceived+0x54>)
 80022aa:	6013      	str	r3, [r2, #0]
		tm_int_usb_vcp_buf_num++;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <TM_INT_USB_VCP_AddReceived+0x50>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	4a05      	ldr	r2, [pc, #20]	; (80022c8 <TM_INT_USB_VCP_AddReceived+0x50>)
 80022b4:	6013      	str	r3, [r2, #0]
		
		/* Return OK */
		return TM_USB_VCP_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <TM_INT_USB_VCP_AddReceived+0x44>
	}
	
	/* Return Buffer full */
	return TM_USB_VCP_RECEIVE_BUFFER_FULL;
 80022ba:	2302      	movs	r3, #2
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	20000218 	.word	0x20000218
 80022cc:	20000214 	.word	0x20000214
 80022d0:	20000220 	.word	0x20000220

080022d4 <USB_OTG_BSP_Init>:
*         Initilizes BSP configurations
* @param  None
* @retval None
*/

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;   
#ifdef USE_USB_OTG_FS
	RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);  
 80022dc:	2101      	movs	r1, #1
 80022de:	2001      	movs	r0, #1
 80022e0:	f7fe ffc4 	bl	800126c <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 	GPIO_Pin_11 | 	// OTG FS Data -
 80022e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022e8:	60bb      	str	r3, [r7, #8]
									GPIO_Pin_12;	// OTG FS Data +

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80022ea:	2303      	movs	r3, #3
 80022ec:	737b      	strb	r3, [r7, #13]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80022ee:	2302      	movs	r3, #2
 80022f0:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOA, &GPIO_InitStructure);  
 80022fa:	f107 0308 	add.w	r3, r7, #8
 80022fe:	4619      	mov	r1, r3
 8002300:	481f      	ldr	r0, [pc, #124]	; (8002380 <USB_OTG_BSP_Init+0xac>)
 8002302:	f7fe fe31 	bl	8000f68 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_OTG1_FS); 
 8002306:	220a      	movs	r2, #10
 8002308:	210b      	movs	r1, #11
 800230a:	481d      	ldr	r0, [pc, #116]	; (8002380 <USB_OTG_BSP_Init+0xac>)
 800230c:	f7fe feba 	bl	8001084 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_OTG1_FS);
 8002310:	220a      	movs	r2, #10
 8002312:	210c      	movs	r1, #12
 8002314:	481a      	ldr	r0, [pc, #104]	; (8002380 <USB_OTG_BSP_Init+0xac>)
 8002316:	f7fe feb5 	bl	8001084 <GPIO_PinAFConfig>
#ifndef USB_VCP_DISABLE_VBUS
	// Configure  VBUS Pin
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 800231a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800231e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002320:	2303      	movs	r3, #3
 8002322:	737b      	strb	r3, [r7, #13]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8002324:	2300      	movs	r3, #0
 8002326:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002328:	2301      	movs	r3, #1
 800232a:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOA, &GPIO_InitStructure);    
 8002330:	f107 0308 	add.w	r3, r7, #8
 8002334:	4619      	mov	r1, r3
 8002336:	4812      	ldr	r0, [pc, #72]	; (8002380 <USB_OTG_BSP_Init+0xac>)
 8002338:	f7fe fe16 	bl	8000f68 <GPIO_Init>
#endif

#ifndef USB_VCP_DISABLE_ID
	// Configure ID pin
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 800233c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002340:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002342:	2301      	movs	r3, #1
 8002344:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;  
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800234a:	2303      	movs	r3, #3
 800234c:	737b      	strb	r3, [r7, #13]
	GPIO_Init(GPIOA, &GPIO_InitStructure);  
 800234e:	f107 0308 	add.w	r3, r7, #8
 8002352:	4619      	mov	r1, r3
 8002354:	480a      	ldr	r0, [pc, #40]	; (8002380 <USB_OTG_BSP_Init+0xac>)
 8002356:	f7fe fe07 	bl	8000f68 <GPIO_Init>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_OTG1_FS); 
 800235a:	220a      	movs	r2, #10
 800235c:	210a      	movs	r1, #10
 800235e:	4808      	ldr	r0, [pc, #32]	; (8002380 <USB_OTG_BSP_Init+0xac>)
 8002360:	f7fe fe90 	bl	8001084 <GPIO_PinAFConfig>
#endif

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8002364:	2101      	movs	r1, #1
 8002366:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800236a:	f7fe ffbf 	bl	80012ec <RCC_APB2PeriphClockCmd>
	RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE); 
 800236e:	2101      	movs	r1, #1
 8002370:	2080      	movs	r0, #128	; 0x80
 8002372:	f7fe ff9b 	bl	80012ac <RCC_AHB2PeriphClockCmd>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_OTG_HS, ENABLE);

#endif
}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40020000 	.word	0x40020000

08002384 <USB_OTG_BSP_EnableInterrupt>:
* @brief  USB_OTG_BSP_EnableInterrupt
*         Enabele USB Global interrupt
* @param  None
* @retval None
*/
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	NVIC_InitTypeDef NVIC_InitStructure;
#ifdef USE_USB_OTG_FS
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800238c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002390:	f7fe fb8c 	bl	8000aac <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = OTG_FS_IRQn;  
 8002394:	2343      	movs	r3, #67	; 0x43
 8002396:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = USB_VCP_NVIC_PRIORITY;
 8002398:	2301      	movs	r3, #1
 800239a:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = USB_VCP_NVIC_SUBPRIORITY + 2;
 800239c:	2303      	movs	r3, #3
 800239e:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fb93 	bl	8000ad4 <NVIC_Init>
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = USB_VCP_NVIC_SUBPRIORITY;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure); 

#endif
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop

080023b8 <USB_OTG_BSP_uDelay>:
* @brief  USB_OTG_BSP_uDelay
*         This function provides delay time in micro sec
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec) {
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	uint32_t count = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
	const uint32_t utime = (120 * usec / 7);
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <USB_OTG_BSP_uDelay+0x44>)
 80023d2:	fba3 1302 	umull	r1, r3, r3, r2
 80023d6:	1ad2      	subs	r2, r2, r3
 80023d8:	0852      	lsrs	r2, r2, #1
 80023da:	4413      	add	r3, r2
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	60bb      	str	r3, [r7, #8]
	
	do
	{
		if ( ++count > utime ) {
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3301      	adds	r3, #1
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d800      	bhi.n	80023f0 <USB_OTG_BSP_uDelay+0x38>
			return ;
		}
	} while (1);
 80023ee:	e7f7      	b.n	80023e0 <USB_OTG_BSP_uDelay+0x28>
	const uint32_t utime = (120 * usec / 7);
	
	do
	{
		if ( ++count > utime ) {
			return ;
 80023f0:	bf00      	nop
		}
	} while (1);
}
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	24924925 	.word	0x24924925

08002400 <USB_OTG_BSP_mDelay>:
* @brief  USB_OTG_BSP_mDelay
*          This function provides delay time in milli sec
* @param  msec : Value of delay required in milli sec
* @retval None
*/
void USB_OTG_BSP_mDelay (const uint32_t msec) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	USB_OTG_BSP_uDelay(msec * 1000);   
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ffd0 	bl	80023b8 <USB_OTG_BSP_uDelay>
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <OTG_FS_WKUP_IRQHandler>:


#ifdef USE_USB_OTG_FS

void OTG_FS_WKUP_IRQHandler(void) {
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line18);
 8002424:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002428:	f7fe fd8e 	bl	8000f48 <EXTI_ClearITPendingBit>
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}

08002430 <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler(void) {
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
	USBD_OTG_ISR_Handler (&USB_OTG_dev);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <OTG_FS_IRQHandler+0x10>)
 8002436:	f001 fb45 	bl	8003ac4 <USBD_OTG_ISR_Handler>
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200002a0 	.word	0x200002a0

08002444 <USB_OTG_EnableCommonInt>:
*         Initializes the commmon interrupts, used in both device and modes
* @param  pdev : Selected device
* @retval None
*/
static void USB_OTG_EnableCommonInt(USB_OTG_CORE_HANDLE *pdev)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  
  int_mask.d32 = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	605a      	str	r2, [r3, #4]
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002462:	615a      	str	r2, [r3, #20]
  /* Enable the interrupts in the INTMSK */
  int_mask.b.wkupintr = 1;
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800246a:	73fb      	strb	r3, [r7, #15]
  int_mask.b.usbsuspend = 1; 
 800246c:	7b7b      	ldrb	r3, [r7, #13]
 800246e:	f043 0308 	orr.w	r3, r3, #8
 8002472:	737b      	strb	r3, [r7, #13]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	619a      	str	r2, [r3, #24]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 800249c:	2003      	movs	r0, #3
 800249e:	f7ff ff8b 	bl	80023b8 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3301      	adds	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	4a18      	ldr	r2, [pc, #96]	; (8002514 <USB_OTG_CoreReset+0x8c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <USB_OTG_CoreReset+0x34>
    {
      return USB_OTG_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	e026      	b.n	800250a <USB_OTG_CoreReset+0x82>
    }
  }
  while (greset.b.ahbidle == 0);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0e9      	beq.n	800249c <USB_OTG_CoreReset+0x14>
  /* Core Soft Reset */
  count = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  greset.b.csftrst = 1;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3301      	adds	r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	4a09      	ldr	r2, [pc, #36]	; (8002514 <USB_OTG_CoreReset+0x8c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d806      	bhi.n	8002500 <USB_OTG_CoreReset+0x78>
    {
      break;
    }
  }
  while (greset.b.csftrst == 1);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d0ee      	beq.n	80024dc <USB_OTG_CoreReset+0x54>
 80024fe:	e000      	b.n	8002502 <USB_OTG_CoreReset+0x7a>
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
    if (++count > 200000)
    {
      break;
 8002500:	bf00      	nop
    }
  }
  while (greset.b.csftrst == 1);
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8002502:	2003      	movs	r0, #3
 8002504:	f7ff ff58 	bl	80023b8 <USB_OTG_BSP_uDelay>
  return status;
 8002508:	7cfb      	ldrb	r3, [r7, #19]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	00030d40 	.word	0x00030d40

08002518 <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	4611      	mov	r1, r2
 8002524:	461a      	mov	r2, r3
 8002526:	460b      	mov	r3, r1
 8002528:	71fb      	strb	r3, [r7, #7]
 800252a:	4613      	mov	r3, r2
 800252c:	80bb      	strh	r3, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	76fb      	strb	r3, [r7, #27]
  if (pdev->cfg.dma_enable == 0)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	78db      	ldrb	r3, [r3, #3]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d122      	bne.n	8002580 <USB_OTG_WritePacket+0x68>
  {
    uint32_t count32b= 0 , i= 0;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 8002542:	88bb      	ldrh	r3, [r7, #4]
 8002544:	3303      	adds	r3, #3
 8002546:	2b00      	cmp	r3, #0
 8002548:	da00      	bge.n	800254c <USB_OTG_WritePacket+0x34>
 800254a:	3303      	adds	r3, #3
 800254c:	109b      	asrs	r3, r3, #2
 800254e:	617b      	str	r3, [r7, #20]
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	3332      	adds	r3, #50	; 0x32
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src+=4)
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	e009      	b.n	8002578 <USB_OTG_WritePacket+0x60>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	601a      	str	r2, [r3, #0]
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	3301      	adds	r3, #1
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	3304      	adds	r3, #4
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	429a      	cmp	r2, r3
 800257e:	d3f1      	bcc.n	8002564 <USB_OTG_WritePacket+0x4c>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
    }
  }
  return status;
 8002580:	7efb      	ldrb	r3, [r7, #27]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3724      	adds	r7, #36	; 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop

08002590 <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	; 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	4613      	mov	r3, r2
 800259c:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b = (len + 3) / 4;
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	3303      	adds	r3, #3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	da00      	bge.n	80025ac <USB_OTG_ReadPacket+0x1c>
 80025aa:	3303      	adds	r3, #3
 80025ac:	109b      	asrs	r3, r3, #2
 80025ae:	61bb      	str	r3, [r7, #24]
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80025b6:	617b      	str	r3, [r7, #20]
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	e009      	b.n	80025d2 <USB_OTG_ReadPacket+0x42>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	601a      	str	r2, [r3, #0]
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3301      	adds	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	3304      	adds	r3, #4
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d3f1      	bcc.n	80025be <USB_OTG_ReadPacket+0x2e>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
    
  }
  return ((void *)dest);
 80025da:	68bb      	ldr	r3, [r7, #8]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3724      	adds	r7, #36	; 0x24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
  uint32_t i , baseAddress = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]
  USB_OTG_STS status = USB_OTG_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73fb      	strb	r3, [r7, #15]
  
  pdev->cfg.dma_enable       = 0;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	70da      	strb	r2, [r3, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	709a      	strb	r2, [r3, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2240      	movs	r2, #64	; 0x40
 800260c:	809a      	strh	r2, [r3, #4]
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d113      	bne.n	800263c <USB_OTG_SelectCore+0x54>
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 8002614:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002618:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 8 ;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2208      	movs	r2, #8
 8002624:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2204      	movs	r2, #4
 800262a:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002632:	80da      	strh	r2, [r3, #6]
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	721a      	strb	r2, [r3, #8]
 800263a:	e011      	b.n	8002660 <USB_OTG_SelectCore+0x78>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10e      	bne.n	8002660 <USB_OTG_SelectCore+0x78>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 8002642:	4b45      	ldr	r3, [pc, #276]	; (8002758 <USB_OTG_SelectCore+0x170>)
 8002644:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 12 ;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	220c      	movs	r2, #12
 8002650:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2206      	movs	r2, #6
 8002656:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800265e:	80da      	strh	r2, [r3, #6]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	60da      	str	r2, [r3, #12]
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800266c:	461a      	mov	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	611a      	str	r2, [r3, #16]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	e01c      	b.n	80026b2 <USB_OTG_SelectCore+0xca>
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	015a      	lsls	r2, r3, #5
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4413      	add	r3, r2
 8002680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8002684:	4619      	mov	r1, r3
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	3304      	adds	r3, #4
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	6099      	str	r1, [r3, #8]
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	015a      	lsls	r2, r3, #5
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4413      	add	r3, r2
 800269a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 800269e:	4619      	mov	r1, r3
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3314      	adds	r3, #20
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	6059      	str	r1, [r3, #4]
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	3301      	adds	r3, #1
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	785b      	ldrb	r3, [r3, #1]
 80026b6:	461a      	mov	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d8dc      	bhi.n	8002678 <USB_OTG_SelectCore+0x90>
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026c4:	461a      	mov	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	615a      	str	r2, [r3, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026d0:	461a      	mov	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	e00f      	b.n	80026fe <USB_OTG_SelectCore+0x116>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	015a      	lsls	r2, r3, #5
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80026ea:	4619      	mov	r1, r3
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3322      	adds	r3, #34	; 0x22
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	6099      	str	r1, [r3, #8]
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3301      	adds	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	429a      	cmp	r2, r3
 8002708:	d8e9      	bhi.n	80026de <USB_OTG_SelectCore+0xf6>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	e00f      	b.n	8002730 <USB_OTG_SelectCore+0x148>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	031a      	lsls	r2, r3, #12
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4413      	add	r3, r2
 8002718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271c:	4619      	mov	r1, r3
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3332      	adds	r3, #50	; 0x32
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	6099      	str	r1, [r3, #8]
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	3301      	adds	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	429a      	cmp	r2, r3
 800273a:	d8e9      	bhi.n	8002710 <USB_OTG_SelectCore+0x128>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002742:	461a      	mov	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  
  return status;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	371c      	adds	r7, #28
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40040000 	.word	0x40040000

0800275c <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	75fb      	strb	r3, [r7, #23]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]
  gccfg.d32 = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
  ahbcfg.d32 = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7a1b      	ldrb	r3, [r3, #8]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d142      	bne.n	8002802 <USB_OTG_CoreInit+0xa6>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002782:	60fb      	str	r3, [r7, #12]
    gccfg.b.pwdn = 0;
 8002784:	7bbb      	ldrb	r3, [r7, #14]
 8002786:	f36f 0300 	bfc	r3, #0, #1
 800278a:	73bb      	strb	r3, [r7, #14]
    
    if (pdev->cfg.Sof_output)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7a5b      	ldrb	r3, [r3, #9]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <USB_OTG_CoreInit+0x40>
    {
      gccfg.b.sofouten = 1;   
 8002794:	7bbb      	ldrb	r3, [r7, #14]
 8002796:	f043 0310 	orr.w	r3, r3, #16
 800279a:	73bb      	strb	r3, [r7, #14]
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	613b      	str	r3, [r7, #16]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 80027b0:	7c3b      	ldrb	r3, [r7, #16]
 80027b2:	f36f 1386 	bfc	r3, #6, #1
 80027b6:	743b      	strb	r3, [r7, #16]
#else
#ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
#endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 80027b8:	7cbb      	ldrb	r3, [r7, #18]
 80027ba:	f36f 1386 	bfc	r3, #6, #1
 80027be:	74bb      	strb	r3, [r7, #18]
    
    usbcfg.b.ulpi_fsls = 0;
 80027c0:	7cbb      	ldrb	r3, [r7, #18]
 80027c2:	f36f 0341 	bfc	r3, #1, #1
 80027c6:	74bb      	strb	r3, [r7, #18]
    usbcfg.b.ulpi_clk_sus_m = 0;
 80027c8:	7cbb      	ldrb	r3, [r7, #18]
 80027ca:	f36f 03c3 	bfc	r3, #3, #1
 80027ce:	74bb      	strb	r3, [r7, #18]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff fe55 	bl	8002488 <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	78db      	ldrb	r3, [r3, #3]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d13d      	bne.n	8002862 <USB_OTG_CoreInit+0x106>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 80027e6:	7a3b      	ldrb	r3, [r7, #8]
 80027e8:	2205      	movs	r2, #5
 80027ea:	f362 0344 	bfi	r3, r2, #1, #4
 80027ee:	723b      	strb	r3, [r7, #8]
      ahbcfg.b.dmaenable = 1;
 80027f0:	7a3b      	ldrb	r3, [r7, #8]
 80027f2:	f043 0320 	orr.w	r3, r3, #32
 80027f6:	723b      	strb	r3, [r7, #8]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	e02f      	b.n	8002862 <USB_OTG_CoreInit+0x106>
    }    
  }
  else /* FS interface (embedded Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	613b      	str	r3, [r7, #16]
    usbcfg.b.physel  = 1; /* FS Interface */
 800280a:	7c3b      	ldrb	r3, [r7, #16]
 800280c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002810:	743b      	strb	r3, [r7, #16]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	60da      	str	r2, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff fe34 	bl	8002488 <USB_OTG_CoreReset>
    /* Deactivate the power down*/
    gccfg.d32 = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
    gccfg.b.pwdn = 1;
 8002824:	7bbb      	ldrb	r3, [r7, #14]
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	73bb      	strb	r3, [r7, #14]
    
    gccfg.b.vbussensingA = 1 ;
 800282c:	7bbb      	ldrb	r3, [r7, #14]
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	73bb      	strb	r3, [r7, #14]
    gccfg.b.vbussensingB = 1 ;     
 8002834:	7bbb      	ldrb	r3, [r7, #14]
 8002836:	f043 0308 	orr.w	r3, r3, #8
 800283a:	73bb      	strb	r3, [r7, #14]
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
 800283c:	7bbb      	ldrb	r3, [r7, #14]
 800283e:	f043 0320 	orr.w	r3, r3, #32
 8002842:	73bb      	strb	r3, [r7, #14]
#endif    
    
    if(pdev->cfg.Sof_output)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7a5b      	ldrb	r3, [r3, #9]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <USB_OTG_CoreInit+0xf8>
    {
      gccfg.b.sofouten = 1;  
 800284c:	7bbb      	ldrb	r3, [r7, #14]
 800284e:	f043 0310 	orr.w	r3, r3, #16
 8002852:	73bb      	strb	r3, [r7, #14]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 800285c:	2014      	movs	r0, #20
 800285e:	f7ff fdcf 	bl	8002400 <USB_OTG_BSP_mDelay>
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	78db      	ldrb	r3, [r3, #3]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d110      	bne.n	800288c <USB_OTG_CoreInit+0x130>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	60bb      	str	r3, [r7, #8]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8002872:	7a3b      	ldrb	r3, [r7, #8]
 8002874:	2205      	movs	r2, #5
 8002876:	f362 0344 	bfi	r3, r2, #1, #4
 800287a:	723b      	strb	r3, [r7, #8]
    ahbcfg.b.dmaenable = 1;
 800287c:	7a3b      	ldrb	r3, [r7, #8]
 800287e:	f043 0320 	orr.w	r3, r3, #32
 8002882:	723b      	strb	r3, [r7, #8]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	609a      	str	r2, [r3, #8]
  usbcfg.b.hnpcap = 1;
  usbcfg.b.srpcap = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_EnableCommonInt(pdev);
#endif
  return status;
 800288c:	7dfb      	ldrb	r3, [r7, #23]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop

08002898 <USB_OTG_EnableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 80028a8:	7a3b      	ldrb	r3, [r7, #8]
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68d2      	ldr	r2, [r2, #12]
 80028b8:	6891      	ldr	r1, [r2, #8]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	430a      	orrs	r2, r1
 80028be:	609a      	str	r2, [r3, #8]
  return status;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop

080028d0 <USB_OTG_DisableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_DisableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 80028e0:	7a3b      	ldrb	r3, [r7, #8]
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68d2      	ldr	r2, [r2, #12]
 80028f0:	6891      	ldr	r1, [r2, #8]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	43d2      	mvns	r2, r2
 80028f6:	400a      	ands	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]
  return status;
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  greset.d32 = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
  greset.b.txfflsh = 1;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f043 0320 	orr.w	r3, r3, #32
 8002924:	60fb      	str	r3, [r7, #12]
  greset.b.txfnum  = num;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	b2da      	uxtb	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f362 138a 	bfi	r3, r2, #6, #5
 8002936:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	3301      	adds	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	4a09      	ldr	r2, [pc, #36]	; (8002978 <USB_OTG_FlushTxFifo+0x70>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d806      	bhi.n	8002964 <USB_OTG_FlushTxFifo+0x5c>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d0ee      	beq.n	8002940 <USB_OTG_FlushTxFifo+0x38>
 8002962:	e000      	b.n	8002966 <USB_OTG_FlushTxFifo+0x5e>
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
    if (++count > 200000)
    {
      break;
 8002964:	bf00      	nop
    }
  }
  while (greset.b.txfflsh == 1);
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8002966:	2003      	movs	r0, #3
 8002968:	f7ff fd26 	bl	80023b8 <USB_OTG_BSP_uDelay>
  return status;
 800296c:	7cfb      	ldrb	r3, [r7, #19]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	00030d40 	.word	0x00030d40

0800297c <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
  greset.b.rxfflsh = 1;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f043 0310 	orr.w	r3, r3, #16
 8002996:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3301      	adds	r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	4a09      	ldr	r2, [pc, #36]	; (80029d8 <USB_OTG_FlushRxFifo+0x5c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d806      	bhi.n	80029c4 <USB_OTG_FlushRxFifo+0x48>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d0ee      	beq.n	80029a0 <USB_OTG_FlushRxFifo+0x24>
 80029c2:	e000      	b.n	80029c6 <USB_OTG_FlushRxFifo+0x4a>
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
    if (++count > 200000)
    {
      break;
 80029c4:	bf00      	nop
    }
  }
  while (greset.b.rxfflsh == 1);
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80029c6:	2003      	movs	r0, #3
 80029c8:	f7ff fcf6 	bl	80023b8 <USB_OTG_BSP_uDelay>
  return status;
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	00030d40 	.word	0x00030d40

080029dc <USB_OTG_SetCurrentMode>:
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	60bb      	str	r3, [r7, #8]
  
  usbcfg.b.force_host = 0;
 80029f4:	7afb      	ldrb	r3, [r7, #11]
 80029f6:	f36f 1345 	bfc	r3, #5, #1
 80029fa:	72fb      	strb	r3, [r7, #11]
  usbcfg.b.force_dev = 0;
 80029fc:	7afb      	ldrb	r3, [r7, #11]
 80029fe:	f36f 1386 	bfc	r3, #6, #1
 8002a02:	72fb      	strb	r3, [r7, #11]
  
  if ( mode == HOST_MODE)
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d104      	bne.n	8002a14 <USB_OTG_SetCurrentMode+0x38>
  {
    usbcfg.b.force_host = 1;
 8002a0a:	7afb      	ldrb	r3, [r7, #11]
 8002a0c:	f043 0320 	orr.w	r3, r3, #32
 8002a10:	72fb      	strb	r3, [r7, #11]
 8002a12:	e006      	b.n	8002a22 <USB_OTG_SetCurrentMode+0x46>
  }
  else if ( mode == DEVICE_MODE)
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d103      	bne.n	8002a22 <USB_OTG_SetCurrentMode+0x46>
  {
    usbcfg.b.force_dev = 1;
 8002a1a:	7afb      	ldrb	r3, [r7, #11]
 8002a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a20:	72fb      	strb	r3, [r7, #11]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	60da      	str	r2, [r3, #12]
  USB_OTG_BSP_mDelay(50);
 8002a2a:	2032      	movs	r0, #50	; 0x32
 8002a2c:	f7ff fce8 	bl	8002400 <USB_OTG_BSP_mDelay>
  return status;
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop

08002a3c <USB_OTG_GetMode>:
* @brief  USB_OTG_GetMode : Get current mode
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop

08002a5c <USB_OTG_IsDeviceMode>:
* @brief  USB_OTG_IsDeviceMode : Check if it is device mode
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff ffe9 	bl	8002a3c <USB_OTG_GetMode>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop

08002a80 <USB_OTG_ReadCoreItr>:
* @brief  USB_OTG_ReadCoreItr : returns the Core Interrupt register
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
  return v;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop

08002ab0 <USB_OTG_InitDevSpeed>:
*         depending the PHY type and the enumeration speed of the device.
* @param  pdev : Selected device
* @retval : None
*/
void USB_OTG_InitDevSpeed(USB_OTG_CORE_HANDLE *pdev , uint8_t speed)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60fb      	str	r3, [r7, #12]
  dcfg.b.devspd = speed;
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	7b3b      	ldrb	r3, [r7, #12]
 8002ace:	f362 0301 	bfi	r3, r2, #0, #2
 8002ad2:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	601a      	str	r2, [r3, #0]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <USB_OTG_CoreInitDev>:
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08c      	sub	sp, #48	; 0x30
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status       = USB_OTG_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  USB_OTG_FSIZ_TypeDef    nptxfifosize;
  USB_OTG_FSIZ_TypeDef    txfifosize;
  USB_OTG_DIEPMSK_TypeDef msk;
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
  dcfg.d32 = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	623b      	str	r3, [r7, #32]
  nptxfifosize.d32 = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
  txfifosize.d32 = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
  msk.d32 = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	623b      	str	r3, [r7, #32]
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
 8002b1c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002b20:	f36f 03c4 	bfc	r3, #3, #2
 8002b24:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	6a3a      	ldr	r2, [r7, #32]
 8002b2e:	601a      	str	r2, [r3, #0]
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	7adb      	ldrb	r3, [r3, #11]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d133      	bne.n	8002ba0 <USB_OTG_CoreInitDev+0xb8>
  {  
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
 8002b38:	2103      	movs	r1, #3
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff ffb8 	bl	8002ab0 <USB_OTG_InitDevSpeed>
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2280      	movs	r2, #128	; 0x80
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
 8002b48:	2320      	movs	r3, #32
 8002b4a:	83fb      	strh	r3, [r7, #30]
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	83bb      	strh	r3, [r7, #28]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 8002b58:	8bba      	ldrh	r2, [r7, #28]
 8002b5a:	8bfb      	ldrh	r3, [r7, #30]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 8002b70:	8b3a      	ldrh	r2, [r7, #24]
 8002b72:	8b7b      	ldrh	r3, [r7, #26]
 8002b74:	4413      	add	r3, r2
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX2_FIFO_FS_SIZE;
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    
    /* EP3 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
 8002b88:	8b3a      	ldrh	r2, [r7, #24]
 8002b8a:	8b7b      	ldrh	r3, [r7, #26]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX3_FIFO_FS_SIZE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    txfifosize.b.depth = TX5_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[4], txfifosize.d32 );
  }
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
 8002ba0:	2110      	movs	r1, #16
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff feb0 	bl	8002908 <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff fee7 	bl	800297c <USB_OTG_FlushRxFifo>
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	615a      	str	r2, [r3, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc6:	619a      	str	r2, [r3, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	61da      	str	r2, [r3, #28]
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd4:	e03a      	b.n	8002c4c <USB_OTG_CoreInitDev+0x164>
  {
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bda:	3304      	adds	r3, #4
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
    if (depctl.b.epena)
 8002be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00e      	beq.n	8002c12 <USB_OTG_CoreInitDev+0x12a>
    {
      depctl.d32 = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
      depctl.b.epdis = 1;
 8002bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      depctl.b.snak = 1;
 8002c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c08:	f043 0308 	orr.w	r3, r3, #8
 8002c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c10:	e001      	b.n	8002c16 <USB_OTG_CoreInitDev+0x12e>
    }
    else
    {
      depctl.d32 = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c24:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2200      	movs	r2, #0
 8002c34:	611a      	str	r2, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	22ff      	movs	r2, #255	; 0xff
 8002c44:	609a      	str	r2, [r3, #8]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8002c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c48:	3301      	adds	r3, #1
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	785b      	ldrb	r3, [r3, #1]
 8002c50:	461a      	mov	r2, r3
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d8be      	bhi.n	8002bd6 <USB_OTG_CoreInitDev+0xee>
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c5c:	e035      	b.n	8002cca <USB_OTG_CoreInitDev+0x1e2>
  {
    USB_OTG_DEPCTL_TypeDef  depctl;
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c62:	3314      	adds	r3, #20
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60fb      	str	r3, [r7, #12]
    if (depctl.b.epena)
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <USB_OTG_CoreInitDev+0x1a8>
    {
      depctl.d32 = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
      depctl.b.epdis = 1;
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c84:	73fb      	strb	r3, [r7, #15]
      depctl.b.snak = 1;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	f043 0308 	orr.w	r3, r3, #8
 8002c8c:	73fb      	strb	r3, [r7, #15]
 8002c8e:	e001      	b.n	8002c94 <USB_OTG_CoreInitDev+0x1ac>
    }
    else
    {
      depctl.d32 = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c98:	3314      	adds	r3, #20
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca8:	3314      	adds	r3, #20
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	611a      	str	r2, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb8:	3314      	adds	r3, #20
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	22ff      	movs	r2, #255	; 0xff
 8002cc2:	609a      	str	r2, [r3, #8]
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	785b      	ldrb	r3, [r3, #1]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d8c3      	bhi.n	8002c5e <USB_OTG_CoreInitDev+0x176>
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  msk.d32 = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  msk.b.txfifoundrn = 1;
 8002cda:	7d7b      	ldrb	r3, [r7, #21]
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	757b      	strb	r3, [r7, #21]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPMSK, msk.d32, msk.d32);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6912      	ldr	r2, [r2, #16]
 8002cea:	6911      	ldr	r1, [r2, #16]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	43d2      	mvns	r2, r2
 8002cf0:	4011      	ands	r1, r2
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	78db      	ldrb	r3, [r3, #3]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d11b      	bne.n	8002d38 <USB_OTG_CoreInitDev+0x250>
  {
    dthrctl.d32 = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	613b      	str	r3, [r7, #16]
    dthrctl.b.non_iso_thr_en = 1;
 8002d04:	7c3b      	ldrb	r3, [r7, #16]
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	743b      	strb	r3, [r7, #16]
    dthrctl.b.iso_thr_en = 1;
 8002d0c:	7c3b      	ldrb	r3, [r7, #16]
 8002d0e:	f043 0302 	orr.w	r3, r3, #2
 8002d12:	743b      	strb	r3, [r7, #16]
    dthrctl.b.tx_thr_len = 64;
 8002d14:	8a3b      	ldrh	r3, [r7, #16]
 8002d16:	2240      	movs	r2, #64	; 0x40
 8002d18:	f362 038a 	bfi	r3, r2, #2, #9
 8002d1c:	823b      	strh	r3, [r7, #16]
    dthrctl.b.rx_thr_en = 1;
 8002d1e:	7cbb      	ldrb	r3, [r7, #18]
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	74bb      	strb	r3, [r7, #18]
    dthrctl.b.rx_thr_len = 64;
 8002d26:	8a7b      	ldrh	r3, [r7, #18]
 8002d28:	2240      	movs	r2, #64	; 0x40
 8002d2a:	f362 0349 	bfi	r3, r2, #1, #9
 8002d2e:	827b      	strh	r3, [r7, #18]
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DTHRCTL, dthrctl.d32);  
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
  }
  USB_OTG_EnableDevInt(pdev);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f807 	bl	8002d4c <USB_OTG_EnableDevInt>
  return status;
 8002d3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3730      	adds	r7, #48	; 0x30
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop

08002d4c <USB_OTG_EnableDevInt>:
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	619a      	str	r2, [r3, #24]
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002d6c:	615a      	str	r2, [r3, #20]
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff fb68 	bl	8002444 <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	78db      	ldrb	r3, [r3, #3]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d103      	bne.n	8002d84 <USB_OTG_EnableDevInt+0x38>
  {
    intmsk.b.rxstsqlvl = 1;
 8002d7c:	7a3b      	ldrb	r3, [r7, #8]
 8002d7e:	f043 0310 	orr.w	r3, r3, #16
 8002d82:	723b      	strb	r3, [r7, #8]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  intmsk.b.usbsuspend = 1;
 8002d84:	7a7b      	ldrb	r3, [r7, #9]
 8002d86:	f043 0308 	orr.w	r3, r3, #8
 8002d8a:	727b      	strb	r3, [r7, #9]
  intmsk.b.usbreset   = 1;
 8002d8c:	7a7b      	ldrb	r3, [r7, #9]
 8002d8e:	f043 0310 	orr.w	r3, r3, #16
 8002d92:	727b      	strb	r3, [r7, #9]
  intmsk.b.enumdone   = 1;
 8002d94:	7a7b      	ldrb	r3, [r7, #9]
 8002d96:	f043 0320 	orr.w	r3, r3, #32
 8002d9a:	727b      	strb	r3, [r7, #9]
  intmsk.b.inepintr   = 1;
 8002d9c:	7abb      	ldrb	r3, [r7, #10]
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	72bb      	strb	r3, [r7, #10]
  intmsk.b.outepintr  = 1;
 8002da4:	7abb      	ldrb	r3, [r7, #10]
 8002da6:	f043 0308 	orr.w	r3, r3, #8
 8002daa:	72bb      	strb	r3, [r7, #10]
  intmsk.b.sofintr    = 1; 
 8002dac:	7a3b      	ldrb	r3, [r7, #8]
 8002dae:	f043 0308 	orr.w	r3, r3, #8
 8002db2:	723b      	strb	r3, [r7, #8]
  
  intmsk.b.incomplisoin    = 1; 
 8002db4:	7abb      	ldrb	r3, [r7, #10]
 8002db6:	f043 0310 	orr.w	r3, r3, #16
 8002dba:	72bb      	strb	r3, [r7, #10]
  intmsk.b.incomplisoout    = 1;   
 8002dbc:	7abb      	ldrb	r3, [r7, #10]
 8002dbe:	f043 0320 	orr.w	r3, r3, #32
 8002dc2:	72bb      	strb	r3, [r7, #10]
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	68d2      	ldr	r2, [r2, #12]
 8002dcc:	6991      	ldr	r1, [r2, #24]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	43d2      	mvns	r2, r2
 8002dd2:	4011      	ands	r1, r2
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	619a      	str	r2, [r3, #24]
  return status;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <USB_OTG_GetDeviceSpeed>:
*         Get the device speed from the device status register
* @param  None
* @retval status
*/
enum USB_OTG_SPEED USB_OTG_GetDeviceSpeed (USB_OTG_CORE_HANDLE *pdev)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	60bb      	str	r3, [r7, #8]
  
  switch (dsts.b.enumspd)
 8002df8:	7a3b      	ldrb	r3, [r7, #8]
 8002dfa:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d009      	beq.n	8002e18 <USB_OTG_GetDeviceSpeed+0x34>
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d004      	beq.n	8002e12 <USB_OTG_GetDeviceSpeed+0x2e>
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d002      	beq.n	8002e12 <USB_OTG_GetDeviceSpeed+0x2e>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
    speed = USB_SPEED_HIGH;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8002e10:	e005      	b.n	8002e1e <USB_OTG_GetDeviceSpeed+0x3a>
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    speed = USB_SPEED_FULL;
 8002e12:	2302      	movs	r3, #2
 8002e14:	73fb      	strb	r3, [r7, #15]
    break;
 8002e16:	e002      	b.n	8002e1e <USB_OTG_GetDeviceSpeed+0x3a>
    
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    speed = USB_SPEED_LOW;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8002e1c:	bf00      	nop
  }
  
  return speed;
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <USB_OTG_EP0Activate>:
*   for transmitting packets
* @param  None
* @retval USB_OTG_STS : status
*/
USB_OTG_STS  USB_OTG_EP0Activate(USB_OTG_CORE_HANDLE *pdev)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status = USB_OTG_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DSTS_TypeDef    dsts;
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60bb      	str	r3, [r7, #8]
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	613b      	str	r3, [r7, #16]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 8002e4c:	7c3b      	ldrb	r3, [r7, #16]
 8002e4e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d004      	beq.n	8002e62 <USB_OTG_EP0Activate+0x36>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
 8002e58:	89bb      	ldrh	r3, [r7, #12]
 8002e5a:	f36f 030a 	bfc	r3, #0, #11
 8002e5e:	81bb      	strh	r3, [r7, #12]
    break;
 8002e60:	e005      	b.n	8002e6e <USB_OTG_EP0Activate+0x42>
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
 8002e62:	89bb      	ldrh	r3, [r7, #12]
 8002e64:	2203      	movs	r2, #3
 8002e66:	f362 030a 	bfi	r3, r2, #0, #11
 8002e6a:	81bb      	strh	r3, [r7, #12]
    break;
 8002e6c:	bf00      	nop
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	601a      	str	r2, [r3, #0]
  dctl.b.cgnpinnak = 1;
 8002e76:	7a7b      	ldrb	r3, [r7, #9]
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	727b      	strb	r3, [r7, #9]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6912      	ldr	r2, [r2, #16]
 8002e86:	6851      	ldr	r1, [r2, #4]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	43d2      	mvns	r2, r2
 8002e8c:	4011      	ands	r1, r2
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	605a      	str	r2, [r3, #4]
  return status;
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	371c      	adds	r7, #28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop

08002ea4 <USB_OTG_EPActivate>:
* @brief  USB_OTG_EPActivate : Activates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  
  depctl.d32 = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	785b      	ldrb	r3, [r3, #1]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d10f      	bne.n	8002ee2 <USB_OTG_EPActivate+0x3e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2301      	movs	r3, #1
 8002eda:	4093      	lsls	r3, r2
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	813b      	strh	r3, [r7, #8]
 8002ee0:	e00e      	b.n	8002f00 <USB_OTG_EPActivate+0x5c>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	3314      	adds	r3, #20
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2301      	movs	r3, #1
 8002efa:	4093      	lsls	r3, r2
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	817b      	strh	r3, [r7, #10]
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  if (!depctl.b.usbactep)
 8002f06:	7b7b      	ldrb	r3, [r7, #13]
 8002f08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d127      	bne.n	8002f62 <USB_OTG_EPActivate+0xbe>
  {
    depctl.b.mps    = ep->maxpacket;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	89bb      	ldrh	r3, [r7, #12]
 8002f20:	f362 030a 	bfi	r3, r2, #0, #11
 8002f24:	81bb      	strh	r3, [r7, #12]
    depctl.b.eptype = ep->type;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	78db      	ldrb	r3, [r3, #3]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	7bbb      	ldrb	r3, [r7, #14]
 8002f32:	f362 0383 	bfi	r3, r2, #2, #2
 8002f36:	73bb      	strb	r3, [r7, #14]
    depctl.b.txfnum = ep->tx_fifo_num;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	88db      	ldrh	r3, [r3, #6]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	89fb      	ldrh	r3, [r7, #14]
 8002f46:	f362 1389 	bfi	r3, r2, #6, #4
 8002f4a:	81fb      	strh	r3, [r7, #14]
    depctl.b.setd0pid = 1;
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	f043 0310 	orr.w	r3, r3, #16
 8002f52:	73fb      	strb	r3, [r7, #15]
    depctl.b.usbactep = 1;
 8002f54:	7b7b      	ldrb	r3, [r7, #13]
 8002f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5a:	737b      	strb	r3, [r7, #13]
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	601a      	str	r2, [r3, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6912      	ldr	r2, [r2, #16]
 8002f6a:	69d1      	ldr	r1, [r2, #28]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	61da      	str	r2, [r3, #28]
  return status;
 8002f72:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	371c      	adds	r7, #28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <USB_OTG_EPDeactivate>:
* @brief  USB_OTG_EPDeactivate : Deactivates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPDeactivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;  
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	785b      	ldrb	r3, [r3, #1]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d10f      	bne.n	8002fbe <USB_OTG_EPDeactivate+0x3e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	4093      	lsls	r3, r2
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	813b      	strh	r3, [r7, #8]
 8002fbc:	e00e      	b.n	8002fdc <USB_OTG_EPDeactivate+0x5c>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	3314      	adds	r3, #20
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	4093      	lsls	r3, r2
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	817b      	strh	r3, [r7, #10]
  }
  depctl.b.usbactep = 0;
 8002fdc:	7b7b      	ldrb	r3, [r7, #13]
 8002fde:	f36f 13c7 	bfc	r3, #7, #1
 8002fe2:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32(addr, depctl.d32);
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	601a      	str	r2, [r3, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6912      	ldr	r2, [r2, #16]
 8002ff2:	69d1      	ldr	r1, [r2, #28]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	43d2      	mvns	r2, r2
 8002ff8:	400a      	ands	r2, r1
 8002ffa:	61da      	str	r2, [r3, #28]
  return status;
 8002ffc:	7cfb      	ldrb	r3, [r7, #19]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	371c      	adds	r7, #28
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop

0800300c <USB_OTG_EPStartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef     depctl;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  USB_OTG_DSTS_TypeDef       dsts;    
  uint32_t fifoemptymsk = 0;  
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
  
  depctl.d32 = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  deptsiz.d32 = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
  /* IN endpoint */
  if (ep->is_in == 1)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	785b      	ldrb	r3, [r3, #1]
 800302a:	2b01      	cmp	r3, #1
 800302c:	f040 80ab 	bne.w	8003186 <USB_OTG_EPStartXfer+0x17a>
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	3304      	adds	r3, #4
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	3304      	adds	r3, #4
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	613b      	str	r3, [r7, #16]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d109      	bne.n	8003070 <USB_OTG_EPStartXfer+0x64>
    {
      deptsiz.b.xfersize = 0;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f36f 0312 	bfc	r3, #0, #19
 8003062:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 8003064:	8a7b      	ldrh	r3, [r7, #18]
 8003066:	2201      	movs	r2, #1
 8003068:	f362 03cc 	bfi	r3, r2, #3, #10
 800306c:	827b      	strh	r3, [r7, #18]
 800306e:	e022      	b.n	80030b6 <USB_OTG_EPStartXfer+0xaa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f362 0312 	bfi	r3, r2, #0, #19
 800307e:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4413      	add	r3, r2
 800308a:	1e5a      	subs	r2, r3, #1
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	fbb2 f3f3 	udiv	r3, r2, r3
 8003094:	b29b      	uxth	r3, r3
 8003096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800309a:	b29a      	uxth	r2, r3
 800309c:	8a7b      	ldrh	r3, [r7, #18]
 800309e:	f362 03cc 	bfi	r3, r2, #3, #10
 80030a2:	827b      	strh	r3, [r7, #18]
      
      if (ep->type == EP_TYPE_ISOC)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	78db      	ldrb	r3, [r3, #3]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d104      	bne.n	80030b6 <USB_OTG_EPStartXfer+0xaa>
      {
        deptsiz.b.mc = 1;
 80030ac:	7cfb      	ldrb	r3, [r7, #19]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f362 1346 	bfi	r3, r2, #5, #2
 80030b4:	74fb      	strb	r3, [r7, #19]
      }       
    }
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	3304      	adds	r3, #4
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	78db      	ldrb	r3, [r3, #3]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d10a      	bne.n	80030e6 <USB_OTG_EPStartXfer+0xda>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	3304      	adds	r3, #4
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	6912      	ldr	r2, [r2, #16]
 80030e2:	615a      	str	r2, [r3, #20]
 80030e4:	e015      	b.n	8003112 <USB_OTG_EPStartXfer+0x106>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	78db      	ldrb	r3, [r3, #3]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d011      	beq.n	8003112 <USB_OTG_EPStartXfer+0x106>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <USB_OTG_EPStartXfer+0x106>
        {
          fifoemptymsk = 1 << ep->num;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	2301      	movs	r3, #1
 80030fe:	4093      	lsls	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6912      	ldr	r2, [r2, #16]
 800310a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	430a      	orrs	r2, r1
 8003110:	635a      	str	r2, [r3, #52]	; 0x34
        }
      }
    }
    
    
    if (ep->type == EP_TYPE_ISOC)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	78db      	ldrb	r3, [r3, #3]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d114      	bne.n	8003144 <USB_OTG_EPStartXfer+0x138>
    {
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	60fb      	str	r3, [r7, #12]
      
      if (((dsts.b.soffn)&0x1) == 0)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8003128:	b29b      	uxth	r3, r3
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d104      	bne.n	800313c <USB_OTG_EPStartXfer+0x130>
      {
        depctl.b.setd1pid = 1;
 8003132:	7dfb      	ldrb	r3, [r7, #23]
 8003134:	f043 0320 	orr.w	r3, r3, #32
 8003138:	75fb      	strb	r3, [r7, #23]
 800313a:	e003      	b.n	8003144 <USB_OTG_EPStartXfer+0x138>
      }
      else
      {
        depctl.b.setd0pid = 1;
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	f043 0310 	orr.w	r3, r3, #16
 8003142:	75fb      	strb	r3, [r7, #23]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	f043 0304 	orr.w	r3, r3, #4
 800314a:	75fb      	strb	r3, [r7, #23]
    depctl.b.epena = 1;
 800314c:	7dfb      	ldrb	r3, [r7, #23]
 800314e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003152:	75fb      	strb	r3, [r7, #23]
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	3304      	adds	r3, #4
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	601a      	str	r2, [r3, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	78db      	ldrb	r3, [r3, #3]
 800316a:	2b01      	cmp	r3, #1
 800316c:	f040 8089 	bne.w	8003282 <USB_OTG_EPStartXfer+0x276>
    {
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68d9      	ldr	r1, [r3, #12]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	781a      	ldrb	r2, [r3, #0]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	b29b      	uxth	r3, r3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff f9ca 	bl	8002518 <USB_OTG_WritePacket>
 8003184:	e07d      	b.n	8003282 <USB_OTG_EPStartXfer+0x276>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	3314      	adds	r3, #20
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	3314      	adds	r3, #20
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	613b      	str	r3, [r7, #16]
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10d      	bne.n	80031ce <USB_OTG_EPStartXfer+0x1c2>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f362 0312 	bfi	r3, r2, #0, #19
 80031c0:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 80031c2:	8a7b      	ldrh	r3, [r7, #18]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f362 03cc 	bfi	r3, r2, #3, #10
 80031ca:	827b      	strh	r3, [r7, #18]
 80031cc:	e020      	b.n	8003210 <USB_OTG_EPStartXfer+0x204>
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	4413      	add	r3, r2
 80031d8:	1e5a      	subs	r2, r3, #1
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	8a7b      	ldrh	r3, [r7, #18]
 80031ec:	f362 03cc 	bfi	r3, r2, #3, #10
 80031f0:	827b      	strh	r3, [r7, #18]
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 80031f2:	8a7b      	ldrh	r3, [r7, #18]
 80031f4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	fb03 f302 	mul.w	r3, r3, r2
 8003204:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f362 0312 	bfi	r3, r2, #0, #19
 800320e:	613b      	str	r3, [r7, #16]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	3314      	adds	r3, #20
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	78db      	ldrb	r3, [r3, #3]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d109      	bne.n	800323e <USB_OTG_EPStartXfer+0x232>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	3314      	adds	r3, #20
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	6912      	ldr	r2, [r2, #16]
 800323c:	615a      	str	r2, [r3, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	78db      	ldrb	r3, [r3, #3]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d10c      	bne.n	8003260 <USB_OTG_EPStartXfer+0x254>
    {
      if (ep->even_odd_frame)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	795b      	ldrb	r3, [r3, #5]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d004      	beq.n	8003258 <USB_OTG_EPStartXfer+0x24c>
      {
        depctl.b.setd1pid = 1;
 800324e:	7dfb      	ldrb	r3, [r7, #23]
 8003250:	f043 0320 	orr.w	r3, r3, #32
 8003254:	75fb      	strb	r3, [r7, #23]
 8003256:	e003      	b.n	8003260 <USB_OTG_EPStartXfer+0x254>
      }
      else
      {
        depctl.b.setd0pid = 1;
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	f043 0310 	orr.w	r3, r3, #16
 800325e:	75fb      	strb	r3, [r7, #23]
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	f043 0304 	orr.w	r3, r3, #4
 8003266:	75fb      	strb	r3, [r7, #23]
    depctl.b.epena = 1;
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326e:	75fb      	strb	r3, [r7, #23]
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	3314      	adds	r3, #20
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003282:	7ffb      	ldrb	r3, [r7, #31]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3720      	adds	r7, #32
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <USB_OTG_EP0StartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	; 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  USB_OTG_STS                 status = USB_OTG_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef      depctl;
  USB_OTG_DEP0XFRSIZ_TypeDef  deptsiz;
  USB_OTG_INEPREGS          *in_regs;
  uint32_t fifoemptymsk = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
  
  depctl.d32   = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
  deptsiz.d32  = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
  /* IN endpoint */
  if (ep->is_in == 1)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	785b      	ldrb	r3, [r3, #1]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d170      	bne.n	8003390 <USB_OTG_EP0StartXfer+0x104>
  {
    in_regs = pdev->regs.INEP_REGS[0];
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	617b      	str	r3, [r7, #20]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	60bb      	str	r3, [r7, #8]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d109      	bne.n	80032dc <USB_OTG_EP0StartXfer+0x50>
    {
      deptsiz.b.xfersize = 0;
 80032c8:	7a3b      	ldrb	r3, [r7, #8]
 80032ca:	f36f 0306 	bfc	r3, #0, #7
 80032ce:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80032d0:	7abb      	ldrb	r3, [r7, #10]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f362 03c4 	bfi	r3, r2, #3, #2
 80032d8:	72bb      	strb	r3, [r7, #10]
 80032da:	e023      	b.n	8003324 <USB_OTG_EP0StartXfer+0x98>
      
    }
    else
    {
      if (ep->xfer_len > ep->maxpacket)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d90e      	bls.n	8003306 <USB_OTG_EP0StartXfer+0x7a>
      {
        ep->xfer_len = ep->maxpacket;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	615a      	str	r2, [r3, #20]
        deptsiz.b.xfersize = ep->maxpacket;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	7a3b      	ldrb	r3, [r7, #8]
 80032fe:	f362 0306 	bfi	r3, r2, #0, #7
 8003302:	723b      	strb	r3, [r7, #8]
 8003304:	e009      	b.n	800331a <USB_OTG_EP0StartXfer+0x8e>
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003310:	b2da      	uxtb	r2, r3
 8003312:	7a3b      	ldrb	r3, [r7, #8]
 8003314:	f362 0306 	bfi	r3, r2, #0, #7
 8003318:	723b      	strb	r3, [r7, #8]
      }
      deptsiz.b.pktcnt = 1;
 800331a:	7abb      	ldrb	r3, [r7, #10]
 800331c:	2201      	movs	r2, #1
 800331e:	f362 03c4 	bfi	r3, r2, #3, #2
 8003322:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	78db      	ldrb	r3, [r3, #3]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d109      	bne.n	8003346 <USB_OTG_EP0StartXfer+0xba>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	3304      	adds	r3, #4
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	6912      	ldr	r2, [r2, #16]
 8003344:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 8003346:	7cfb      	ldrb	r3, [r7, #19]
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	74fb      	strb	r3, [r7, #19]
    depctl.b.epena = 1;
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003354:	74fb      	strb	r3, [r7, #19]
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	601a      	str	r2, [r3, #0]
    
    
    
    if (pdev->cfg.dma_enable == 0)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	78db      	ldrb	r3, [r3, #3]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d176      	bne.n	8003452 <USB_OTG_EP0StartXfer+0x1c6>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d072      	beq.n	8003452 <USB_OTG_EP0StartXfer+0x1c6>
      {
        {
          fifoemptymsk |= 1 << ep->num;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	2301      	movs	r3, #1
 8003374:	4093      	lsls	r3, r2
 8003376:	461a      	mov	r2, r3
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6912      	ldr	r2, [r2, #16]
 8003386:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	430a      	orrs	r2, r1
 800338c:	635a      	str	r2, [r3, #52]	; 0x34
 800338e:	e060      	b.n	8003452 <USB_OTG_EP0StartXfer+0x1c6>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	3314      	adds	r3, #20
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	3314      	adds	r3, #20
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	60bb      	str	r3, [r7, #8]
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10f      	bne.n	80033dc <USB_OTG_EP0StartXfer+0x150>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	7a3b      	ldrb	r3, [r7, #8]
 80033ca:	f362 0306 	bfi	r3, r2, #0, #7
 80033ce:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80033d0:	7abb      	ldrb	r3, [r7, #10]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f362 03c4 	bfi	r3, r2, #3, #2
 80033d8:	72bb      	strb	r3, [r7, #10]
 80033da:	e012      	b.n	8003402 <USB_OTG_EP0StartXfer+0x176>
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	615a      	str	r2, [r3, #20]
      deptsiz.b.xfersize = ep->maxpacket;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	7a3b      	ldrb	r3, [r7, #8]
 80033f2:	f362 0306 	bfi	r3, r2, #0, #7
 80033f6:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80033f8:	7abb      	ldrb	r3, [r7, #10]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f362 03c4 	bfi	r3, r2, #3, #2
 8003400:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	3314      	adds	r3, #20
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	611a      	str	r2, [r3, #16]
    if (pdev->cfg.dma_enable == 1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	78db      	ldrb	r3, [r3, #3]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d109      	bne.n	8003430 <USB_OTG_EP0StartXfer+0x1a4>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	3314      	adds	r3, #20
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	6912      	ldr	r2, [r2, #16]
 800342e:	615a      	str	r2, [r3, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	74fb      	strb	r3, [r7, #19]
    depctl.b.epena = 1;
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343e:	74fb      	strb	r3, [r7, #19]
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	3314      	adds	r3, #20
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	601a      	str	r2, [r3, #0]
    
  }
  return status;
 8003452:	7ffb      	ldrb	r3, [r7, #31]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3724      	adds	r7, #36	; 0x24
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <USB_OTG_EPSetStall>:
* @brief  USB_OTG_EPSetStall : Set the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPSetStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
  if (ep->is_in == 1)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	785b      	ldrb	r3, [r3, #1]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d11c      	bne.n	80034b4 <USB_OTG_EPSetStall+0x54>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	3304      	adds	r3, #4
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60fb      	str	r3, [r7, #12]
    /* set the disable and stall bits */
    if (depctl.b.epena)
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <USB_OTG_EPSetStall+0x44>
    {
      depctl.b.epdis = 1;
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034a2:	73fb      	strb	r3, [r7, #15]
    }
    depctl.b.stall = 1;
 80034a4:	7bbb      	ldrb	r3, [r7, #14]
 80034a6:	f043 0320 	orr.w	r3, r3, #32
 80034aa:	73bb      	strb	r3, [r7, #14]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e011      	b.n	80034d8 <USB_OTG_EPSetStall+0x78>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	3314      	adds	r3, #20
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60fb      	str	r3, [r7, #12]
    /* set the stall bit */
    depctl.b.stall = 1;
 80034ca:	7bbb      	ldrb	r3, [r7, #14]
 80034cc:	f043 0320 	orr.w	r3, r3, #32
 80034d0:	73bb      	strb	r3, [r7, #14]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	601a      	str	r2, [r3, #0]
  }
  return status;
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop

080034e8 <USB_OTG_EPClearStall>:
* @brief  Clear the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPClearStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
  
  if (ep->is_in == 1)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	785b      	ldrb	r3, [r3, #1]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d108      	bne.n	8003514 <USB_OTG_EPClearStall+0x2c>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	3304      	adds	r3, #4
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	e007      	b.n	8003524 <USB_OTG_EPClearStall+0x3c>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	3314      	adds	r3, #20
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	617b      	str	r3, [r7, #20]
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60fb      	str	r3, [r7, #12]
  /* clear the stall bits */
  depctl.b.stall = 0;
 800352a:	7bbb      	ldrb	r3, [r7, #14]
 800352c:	f36f 1345 	bfc	r3, #5, #1
 8003530:	73bb      	strb	r3, [r7, #14]
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	78db      	ldrb	r3, [r3, #3]
 8003536:	2b03      	cmp	r3, #3
 8003538:	d003      	beq.n	8003542 <USB_OTG_EPClearStall+0x5a>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	78db      	ldrb	r3, [r3, #3]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d103      	bne.n	800354a <USB_OTG_EPClearStall+0x62>
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	f043 0310 	orr.w	r3, r3, #16
 8003548:	73fb      	strb	r3, [r7, #15]
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	601a      	str	r2, [r3, #0]
  return status;
 8003550:	7cfb      	ldrb	r3, [r7, #19]
}
 8003552:	4618      	mov	r0, r3
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop

08003560 <USB_OTG_ReadDevAllOutEp_itr>:
* @brief  USB_OTG_ReadDevAllOutEp_itr : returns OUT endpoint interrupt bits
* @param  pdev : Selected device
* @retval OUT endpoint interrupt bits
*/
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4013      	ands	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	0c1b      	lsrs	r3, r3, #16
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <USB_OTG_ReadDevOutEP_itr>:
* @param  pdev : Selected device
* @param  ep : end point number
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	3314      	adds	r3, #20
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4013      	ands	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  return v;
 80035b4:	68fb      	ldr	r3, [r7, #12]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop

080035c4 <USB_OTG_ReadDevAllInEPItr>:
* @brief  USB_OTG_ReadDevAllInEPItr : Get int status register
* @param  pdev : Selected device
* @retval int status register
*/
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4013      	ands	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
  return (v & 0xffff);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	b29b      	uxth	r3, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <USB_OTG_EP0_OutStart>:
* @brief  configures EPO to receive SETUP packets
* @param  None
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
  doeptsize0.b.supcnt = 3;
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003602:	74fb      	strb	r3, [r7, #19]
  doeptsize0.b.pktcnt = 1;
 8003604:	7cbb      	ldrb	r3, [r7, #18]
 8003606:	2201      	movs	r2, #1
 8003608:	f362 03c4 	bfi	r3, r2, #3, #2
 800360c:	74bb      	strb	r3, [r7, #18]
  doeptsize0.b.xfersize = 8 * 3;
 800360e:	7c3b      	ldrb	r3, [r7, #16]
 8003610:	2218      	movs	r2, #24
 8003612:	f362 0306 	bfi	r3, r2, #0, #7
 8003616:	743b      	strb	r3, [r7, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	78db      	ldrb	r3, [r3, #3]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d116      	bne.n	8003656 <USB_OTG_EP0_OutStart+0x66>
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	f202 52cc 	addw	r2, r2, #1484	; 0x5cc
 8003636:	615a      	str	r2, [r3, #20]
                        (uint32_t)&pdev->dev.setup_packet);
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]
    doepctl.b.epena = 1;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003646:	73fb      	strb	r3, [r7, #15]
    doepctl.d32 = 0x80008000;
 8003648:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 800364c:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	601a      	str	r2, [r3, #0]
  }
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop

08003664 <DCD_Init>:



void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
              USB_OTG_CORE_ID_TypeDef coreID)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7fe ffb7 	bl	80025e8 <USB_OTG_SelectCore>
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.device_address = 0;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	e024      	b.n	80036da <DCD_Init+0x76>
  {
    ep = &pdev->dev.in_ep[i];
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	4413      	add	r3, r2
 80036a2:	3304      	adds	r3, #4
 80036a4:	60bb      	str	r3, [r7, #8]
    /* Init ep structure */
    ep->is_in = 1;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2201      	movs	r2, #1
 80036aa:	705a      	strb	r2, [r3, #1]
    ep->num = i;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	701a      	strb	r2, [r3, #0]
    ep->tx_fifo_num = i;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	80da      	strh	r2, [r3, #6]
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2200      	movs	r2, #0
 80036c0:	70da      	strb	r2, [r3, #3]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2240      	movs	r2, #64	; 0x40
 80036c6:	609a      	str	r2, [r3, #8]
    ep->xfer_buff = 0;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2200      	movs	r2, #0
 80036cc:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2200      	movs	r2, #0
 80036d2:	615a      	str	r2, [r3, #20]
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.device_address = 0;
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3301      	adds	r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	785b      	ldrb	r3, [r3, #1]
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d8d4      	bhi.n	8003690 <DCD_Init+0x2c>
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e024      	b.n	8003736 <DCD_Init+0xd2>
  {
    ep = &pdev->dev.out_ep[i];
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	3304      	adds	r3, #4
 8003700:	60bb      	str	r3, [r7, #8]
    /* Init ep structure */
    ep->is_in = 0;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2200      	movs	r2, #0
 8003706:	705a      	strb	r2, [r3, #1]
    ep->num = i;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	b2da      	uxtb	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	701a      	strb	r2, [r3, #0]
    ep->tx_fifo_num = i;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	b29a      	uxth	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	80da      	strh	r2, [r3, #6]
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2200      	movs	r2, #0
 800371c:	70da      	strb	r2, [r3, #3]
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2240      	movs	r2, #64	; 0x40
 8003722:	609a      	str	r2, [r3, #8]
    ep->xfer_buff = 0;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2200      	movs	r2, #0
 8003728:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2200      	movs	r2, #0
 800372e:	615a      	str	r2, [r3, #20]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3301      	adds	r3, #1
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	785b      	ldrb	r3, [r3, #1]
 800373a:	461a      	mov	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	429a      	cmp	r2, r3
 8003740:	d8d4      	bhi.n	80036ec <DCD_Init+0x88>
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  USB_OTG_DisableGlobalInt(pdev);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff f8c4 	bl	80028d0 <USB_OTG_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_OTG_CoreInit(pdev);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff f807 	bl	800275c <USB_OTG_CoreInit>


  /* Force Device Mode*/
  USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
 800374e:	2100      	movs	r1, #0
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff f943 	bl	80029dc <USB_OTG_SetCurrentMode>
  
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff f9c6 	bl	8002ae8 <USB_OTG_CoreInitDev>
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff f89b 	bl	8002898 <USB_OTG_EnableGlobalInt>
}
 8003762:	bf00      	nop
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop

0800376c <DCD_EP_Open>:
*/
uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
                     uint8_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	4608      	mov	r0, r1
 8003776:	4611      	mov	r1, r2
 8003778:	461a      	mov	r2, r3
 800377a:	4603      	mov	r3, r0
 800377c:	70fb      	strb	r3, [r7, #3]
 800377e:	460b      	mov	r3, r1
 8003780:	803b      	strh	r3, [r7, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	70bb      	strb	r3, [r7, #2]
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8003786:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800378a:	2b00      	cmp	r3, #0
 800378c:	da0d      	bge.n	80037aa <DCD_EP_Open+0x3e>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	4413      	add	r3, r2
 80037a4:	3304      	adds	r3, #4
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e00c      	b.n	80037c4 <DCD_EP_Open+0x58>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4413      	add	r3, r2
 80037c0:	3304      	adds	r3, #4
 80037c2:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80037d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	09db      	lsrs	r3, r3, #7
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 80037e0:	883a      	ldrh	r2, [r7, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	78ba      	ldrb	r2, [r7, #2]
 80037ea:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <DCD_EP_Open+0x92>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 80037fe:	78bb      	ldrb	r3, [r7, #2]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d102      	bne.n	800380a <DCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	711a      	strb	r2, [r3, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 800380a:	68f9      	ldr	r1, [r7, #12]
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff fb49 	bl	8002ea4 <USB_OTG_EPActivate>
  return 0;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <DCD_EP_Close>:
* @param pdev: device instance
* @param ep_addr: endpoint address
* @retval : status
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8003828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800382c:	2b00      	cmp	r3, #0
 800382e:	da0d      	bge.n	800384c <DCD_EP_Close+0x30>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	3304      	adds	r3, #4
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	e00c      	b.n	8003866 <DCD_EP_Close+0x4a>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	3304      	adds	r3, #4
 8003864:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800386c:	b2da      	uxtb	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	701a      	strb	r2, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8003872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	09db      	lsrs	r3, r3, #7
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	705a      	strb	r2, [r3, #1]
  USB_OTG_EPDeactivate(pdev , ep );
 8003882:	68f9      	ldr	r1, [r7, #12]
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff fb7b 	bl	8002f80 <USB_OTG_EPDeactivate>
  return 0;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <DCD_EP_PrepareRx>:
*/
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	607a      	str	r2, [r7, #4]
 800389e:	461a      	mov	r2, r3
 80038a0:	460b      	mov	r3, r1
 80038a2:	72fb      	strb	r3, [r7, #11]
 80038a4:	4613      	mov	r3, r2
 80038a6:	813b      	strh	r3, [r7, #8]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80038a8:	7afb      	ldrb	r3, [r7, #11]
 80038aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4413      	add	r3, r2
 80038be:	3304      	adds	r3, #4
 80038c0:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = buf_len;
 80038c8:	893a      	ldrh	r2, [r7, #8]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2200      	movs	r2, #0
 80038d2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2200      	movs	r2, #0
 80038d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 80038da:	7afb      	ldrb	r3, [r7, #11]
 80038dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	701a      	strb	r2, [r3, #0]
  
  if (pdev->cfg.dma_enable == 1)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	78db      	ldrb	r3, [r3, #3]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d102      	bne.n	80038f4 <DCD_EP_PrepareRx+0x60>
  {
    ep->dma_addr = (uint32_t)pbuf;  
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	611a      	str	r2, [r3, #16]
  }
  
  if ( ep->num == 0 )
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d104      	bne.n	8003906 <DCD_EP_PrepareRx+0x72>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 80038fc:	6979      	ldr	r1, [r7, #20]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff fcc4 	bl	800328c <USB_OTG_EP0StartXfer>
 8003904:	e003      	b.n	800390e <DCD_EP_PrepareRx+0x7a>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8003906:	6979      	ldr	r1, [r7, #20]
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7ff fb7f 	bl	800300c <USB_OTG_EPStartXfer>
  }
  return 0;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <DCD_EP_Tx>:
*/
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	460b      	mov	r3, r1
 8003926:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8003928:	7afb      	ldrb	r3, [r7, #11]
 800392a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	3304      	adds	r3, #4
 8003940:	617b      	str	r3, [r7, #20]
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2201      	movs	r2, #1
 8003946:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;  
 8003948:	7afb      	ldrb	r3, [r7, #11]
 800394a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800394e:	b2da      	uxtb	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	701a      	strb	r2, [r3, #0]
  ep->xfer_buff = pbuf;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	60da      	str	r2, [r3, #12]
  ep->dma_addr = (uint32_t)pbuf;  
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2200      	movs	r2, #0
 8003964:	619a      	str	r2, [r3, #24]
  ep->xfer_len  = buf_len;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	615a      	str	r2, [r3, #20]
  
  if ( ep->num == 0 )
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d104      	bne.n	800397e <DCD_EP_Tx+0x66>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8003974:	6979      	ldr	r1, [r7, #20]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f7ff fc88 	bl	800328c <USB_OTG_EP0StartXfer>
 800397c:	e003      	b.n	8003986 <DCD_EP_Tx+0x6e>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 800397e:	6979      	ldr	r1, [r7, #20]
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f7ff fb43 	bl	800300c <USB_OTG_EPStartXfer>
  }
  return 0;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <DCD_EP_Stall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 800399c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	da0d      	bge.n	80039c0 <DCD_EP_Stall+0x30>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	4413      	add	r3, r2
 80039ba:	3304      	adds	r3, #4
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	e00a      	b.n	80039d6 <DCD_EP_Stall+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 80039c0:	78fa      	ldrb	r2, [r7, #3]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	3304      	adds	r3, #4
 80039d4:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 80039e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	09db      	lsrs	r3, r3, #7
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPSetStall(pdev , ep);
 80039f8:	68f9      	ldr	r1, [r7, #12]
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff fd30 	bl	8003460 <USB_OTG_EPSetStall>
  return (0);
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop

08003a0c <DCD_EP_ClrStall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8003a18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	da0d      	bge.n	8003a3c <DCD_EP_ClrStall+0x30>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	3304      	adds	r3, #4
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e00a      	b.n	8003a52 <DCD_EP_ClrStall+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3304      	adds	r3, #4
 8003a50:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0;  
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 8003a64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	09db      	lsrs	r3, r3, #7
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPClearStall(pdev , ep);
 8003a74:	68f9      	ldr	r1, [r7, #12]
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff fd36 	bl	80034e8 <USB_OTG_EPClearStall>
  return (0);
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop

08003a88 <DCD_EP_SetAddress>:
* @param pdev: device instance
* @param address: new device address
* @retval : status
*/
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
  dcfg.b.devaddr = address;
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	89bb      	ldrh	r3, [r7, #12]
 8003aa2:	f362 130a 	bfi	r3, r2, #4, #7
 8003aa6:	81bb      	strh	r3, [r7, #12]
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6912      	ldr	r2, [r2, #16]
 8003ab0:	6811      	ldr	r1, [r2, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <USBD_OTG_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7fe ffc3 	bl	8002a5c <USB_OTG_IsDeviceMode>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 809c 	beq.w	8003c16 <USBD_OTG_ISR_Handler+0x152>
  {
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fe ffce 	bl	8002a80 <USB_OTG_ReadCoreItr>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	613b      	str	r3, [r7, #16]
    if (!gintr_status.d32) /* avoid spurious interrupt */
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <USBD_OTG_ISR_Handler+0x2e>
    {
      return 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e092      	b.n	8003c18 <USBD_OTG_ISR_Handler+0x154>
    }
    
    if (gintr_status.b.outepintr)
 8003af2:	7cbb      	ldrb	r3, [r7, #18]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d006      	beq.n	8003b0c <USBD_OTG_ISR_Handler+0x48>
    {
      retval |= DCD_HandleOutEP_ISR(pdev);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f9fa 	bl	8003ef8 <DCD_HandleOutEP_ISR>
 8003b04:	4602      	mov	r2, r0
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]
    }    
    
    if (gintr_status.b.inepint)
 8003b0c:	7cbb      	ldrb	r3, [r7, #18]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d006      	beq.n	8003b26 <USBD_OTG_ISR_Handler+0x62>
    {
      retval |= DCD_HandleInEP_ISR(pdev);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f91f 	bl	8003d5c <DCD_HandleInEP_ISR>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.modemismatch)
 8003b26:	7c3b      	ldrb	r3, [r7, #16]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <USBD_OTG_ISR_Handler+0x82>
    {
      USB_OTG_GINTSTS_TypeDef  gintsts;
      
      /* Clear interrupt */
      gintsts.d32 = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
      gintsts.b.modemismatch = 1;
 8003b36:	7b3b      	ldrb	r3, [r7, #12]
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	733b      	strb	r3, [r7, #12]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	615a      	str	r2, [r3, #20]
    }
    
    if (gintr_status.b.wkupintr)
 8003b46:	7cfb      	ldrb	r3, [r7, #19]
 8003b48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <USBD_OTG_ISR_Handler+0x9c>
    {
      retval |= DCD_HandleResume_ISR(pdev);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f864 	bl	8003c20 <DCD_HandleResume_ISR>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.usbsuspend)
 8003b60:	7c7b      	ldrb	r3, [r7, #17]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d006      	beq.n	8003b7a <USBD_OTG_ISR_Handler+0xb6>
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f897 	bl	8003ca0 <DCD_HandleUSBSuspend_ISR>
 8003b72:	4602      	mov	r2, r0
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
    }
    if (gintr_status.b.sofintr)
 8003b7a:	7c3b      	ldrb	r3, [r7, #16]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d006      	beq.n	8003b94 <USBD_OTG_ISR_Handler+0xd0>
    {
      retval |= DCD_HandleSof_ISR(pdev);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fa5e 	bl	8004048 <DCD_HandleSof_ISR>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.rxstsqlvl)
 8003b94:	7c3b      	ldrb	r3, [r7, #16]
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d006      	beq.n	8003bae <USBD_OTG_ISR_Handler+0xea>
    {
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fa6b 	bl	800407c <DCD_HandleRxStatusQueueLevel_ISR>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.usbreset)
 8003bae:	7c7b      	ldrb	r3, [r7, #17]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d006      	beq.n	8003bc8 <USBD_OTG_ISR_Handler+0x104>
    {
      retval |= DCD_HandleUsbReset_ISR(pdev);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fb52 	bl	8004264 <DCD_HandleUsbReset_ISR>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
      
    }
    if (gintr_status.b.enumdone)
 8003bc8:	7c7b      	ldrb	r3, [r7, #17]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d006      	beq.n	8003be2 <USBD_OTG_ISR_Handler+0x11e>
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fbd5 	bl	8004384 <DCD_HandleEnumDone_ISR>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.incomplisoin)
 8003be2:	7cbb      	ldrb	r3, [r7, #18]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d006      	beq.n	8003bfc <USBD_OTG_ISR_Handler+0x138>
    {
      retval |= DCD_IsoINIncomplete_ISR(pdev);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fc04 	bl	80043fc <DCD_IsoINIncomplete_ISR>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
    }

    if (gintr_status.b.incomplisoout)
 8003bfc:	7cbb      	ldrb	r3, [r7, #18]
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d006      	beq.n	8003c16 <USBD_OTG_ISR_Handler+0x152>
    {
      retval |= DCD_IsoOUTIncomplete_ISR(pdev);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fc11 	bl	8004430 <DCD_IsoOUTIncomplete_ISR>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
    {
      retval |= DCD_OTG_ISR(pdev);
    }   
#endif    
  }
  return retval;
 8003c16:	697b      	ldr	r3, [r7, #20]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <DCD_HandleResume_ISR>:
*                 remote Wake-up sequence
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleResume_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_DCTL_TypeDef     devctl;
  USB_OTG_PCGCCTL_TypeDef  power;
  
  if(pdev->cfg.low_power)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7a9b      	ldrb	r3, [r3, #10]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d011      	beq.n	8003c54 <DCD_HandleResume_ISR+0x34>
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]
    power.b.gatehclk = 0;
 8003c3a:	7b3b      	ldrb	r3, [r7, #12]
 8003c3c:	f36f 0341 	bfc	r3, #1, #1
 8003c40:	733b      	strb	r3, [r7, #12]
    power.b.stoppclk = 0;
 8003c42:	7b3b      	ldrb	r3, [r7, #12]
 8003c44:	f36f 0300 	bfc	r3, #0, #1
 8003c48:	733b      	strb	r3, [r7, #12]
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	601a      	str	r2, [r3, #0]
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]
  devctl.b.rmtwkupsig = 1;
 8003c58:	7c3b      	ldrb	r3, [r7, #16]
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6912      	ldr	r2, [r2, #16]
 8003c68:	6851      	ldr	r1, [r2, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	43d2      	mvns	r2, r2
 8003c6e:	400a      	ands	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 8003c72:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <DCD_HandleResume_ISR+0x7c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
  gintsts.b.wkupintr = 1;
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
 8003c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c86:	75fb      	strb	r3, [r7, #23]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	615a      	str	r2, [r3, #20]
  return 1;
 8003c90:	2301      	movs	r3, #1
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000150 	.word	0x20000150

08003ca0 <DCD_HandleUSBSuspend_ISR>:
*         Indicates that SUSPEND state has been detected on the USB
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUSBSuspend_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	72fb      	strb	r3, [r7, #11]
  
  prev_status = pdev->dev.device_status;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003cb2:	72fb      	strb	r3, [r7, #11]
  USBD_DCD_INT_fops->Suspend (pdev);      
 8003cb4:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <DCD_HandleUSBSuspend_ISR+0xb4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	4798      	blx	r3
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	60fb      	str	r3, [r7, #12]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
  gintsts.b.usbsuspend = 1;
 8003cca:	7d7b      	ldrb	r3, [r7, #21]
 8003ccc:	f043 0308 	orr.w	r3, r3, #8
 8003cd0:	757b      	strb	r3, [r7, #21]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	615a      	str	r2, [r3, #20]
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	7a9b      	ldrb	r3, [r3, #10]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d032      	beq.n	8003d48 <DCD_HandleUSBSuspend_ISR+0xa8>
 8003ce2:	7b3b      	ldrb	r3, [r7, #12]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d02c      	beq.n	8003d48 <DCD_HandleUSBSuspend_ISR+0xa8>
    (pdev->dev.connection_status == 1) && 
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d127      	bne.n	8003d48 <DCD_HandleUSBSuspend_ISR+0xa8>
    (pdev->dev.connection_status == 1) && 
    (prev_status  == USB_OTG_CONFIGURED))
 8003cf8:	7afb      	ldrb	r3, [r7, #11]
 8003cfa:	b2db      	uxtb	r3, r3
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
    (pdev->dev.connection_status == 1) && 
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d123      	bne.n	8003d48 <DCD_HandleUSBSuspend_ISR+0xa8>
    (prev_status  == USB_OTG_CONFIGURED))
  {
	/*  switch-off the clocks */
    power.d32 = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]
    power.b.stoppclk = 1;
 8003d04:	7c3b      	ldrb	r3, [r7, #16]
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	743b      	strb	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8003d18:	6811      	ldr	r1, [r2, #0]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]
    
    power.b.gatehclk = 1;
 8003d20:	7c3b      	ldrb	r3, [r7, #16]
 8003d22:	f043 0302 	orr.w	r3, r3, #2
 8003d26:	743b      	strb	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8003d34:	6811      	ldr	r1, [r2, #0]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]
    
    /* Request to enter Sleep mode after exit from current ISR */
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 8003d3c:	4a06      	ldr	r2, [pc, #24]	; (8003d58 <DCD_HandleUSBSuspend_ISR+0xb8>)
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <DCD_HandleUSBSuspend_ISR+0xb8>)
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f043 0306 	orr.w	r3, r3, #6
 8003d46:	6113      	str	r3, [r2, #16]
  }
  return 1;
 8003d48:	2301      	movs	r3, #1
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000150 	.word	0x20000150
 8003d58:	e000ed00 	.word	0xe000ed00

08003d5c <DCD_HandleInEP_ISR>:
*         Indicates that an IN EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleInEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  USB_OTG_DIEPINTn_TypeDef  diepint;
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	613b      	str	r3, [r7, #16]
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60bb      	str	r3, [r7, #8]
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff fc29 	bl	80035c4 <USB_OTG_ReadDevAllInEPItr>
 8003d72:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 8003d74:	e0b4      	b.n	8003ee0 <DCD_HandleInEP_ISR+0x184>
  {
    if (ep_intr&0x1) /* In ITR */
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80a9 	beq.w	8003ed4 <DCD_HandleInEP_ISR+0x178>
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fb6b 	bl	8004464 <DCD_ReadDevInEP>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	60bb      	str	r3, [r7, #8]
      if ( diepint.b.xfercompl )
 8003d92:	7a3b      	ldrb	r3, [r7, #8]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d032      	beq.n	8003e04 <DCD_HandleInEP_ISR+0xa8>
      {
        fifoemptymsk = 0x1 << epnum;
 8003d9e:	2201      	movs	r2, #1
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	60fb      	str	r3, [r7, #12]
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6912      	ldr	r2, [r2, #16]
 8003db0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	43d2      	mvns	r2, r2
 8003db6:	400a      	ands	r2, r1
 8003db8:	635a      	str	r2, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	7a3b      	ldrb	r3, [r7, #8]
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	723b      	strb	r3, [r7, #8]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	609a      	str	r2, [r3, #8]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <DCD_HandleInEP_ISR+0x198>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	4611      	mov	r1, r2
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	78db      	ldrb	r3, [r3, #3]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d10a      	bne.n	8003e04 <DCD_HandleInEP_ISR+0xa8>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d107      	bne.n	8003e04 <DCD_HandleInEP_ISR+0xa8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d102      	bne.n	8003e04 <DCD_HandleInEP_ISR+0xa8>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff fbf6 	bl	80035f0 <USB_OTG_EP0_OutStart>
          }
        }           
      }
      if ( diepint.b.timeout )
 8003e04:	7a3b      	ldrb	r3, [r7, #8]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00d      	beq.n	8003e2c <DCD_HandleInEP_ISR+0xd0>
      {
        CLEAR_IN_EP_INTR(epnum, timeout);
 8003e10:	2300      	movs	r3, #0
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	7a3b      	ldrb	r3, [r7, #8]
 8003e16:	f043 0308 	orr.w	r3, r3, #8
 8003e1a:	723b      	strb	r3, [r7, #8]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	3304      	adds	r3, #4
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.intktxfemp)
 8003e2c:	7a3b      	ldrb	r3, [r7, #8]
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00d      	beq.n	8003e54 <DCD_HandleInEP_ISR+0xf8>
      {
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	7a3b      	ldrb	r3, [r7, #8]
 8003e3e:	f043 0310 	orr.w	r3, r3, #16
 8003e42:	723b      	strb	r3, [r7, #8]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.inepnakeff)
 8003e54:	7a3b      	ldrb	r3, [r7, #8]
 8003e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <DCD_HandleInEP_ISR+0x120>
      {
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 8003e60:	2300      	movs	r3, #0
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	7a3b      	ldrb	r3, [r7, #8]
 8003e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e6a:	723b      	strb	r3, [r7, #8]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	3304      	adds	r3, #4
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	609a      	str	r2, [r3, #8]
      }
      if ( diepint.b.epdisabled )
 8003e7c:	7a3b      	ldrb	r3, [r7, #8]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00d      	beq.n	8003ea4 <DCD_HandleInEP_ISR+0x148>
      {
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	7a3b      	ldrb	r3, [r7, #8]
 8003e8e:	f043 0302 	orr.w	r3, r3, #2
 8003e92:	723b      	strb	r3, [r7, #8]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	609a      	str	r2, [r3, #8]
      }       
      if (diepint.b.emptyintr)
 8003ea4:	7a3b      	ldrb	r3, [r7, #8]
 8003ea6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d011      	beq.n	8003ed4 <DCD_HandleInEP_ISR+0x178>
      {
        
        DCD_WriteEmptyTxFifo(pdev , epnum);
 8003eb0:	6939      	ldr	r1, [r7, #16]
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f964 	bl	8004180 <DCD_WriteEmptyTxFifo>
        
        CLEAR_IN_EP_INTR(epnum, emptyintr);
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	7a3b      	ldrb	r3, [r7, #8]
 8003ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec2:	723b      	strb	r3, [r7, #8]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	085b      	lsrs	r3, r3, #1
 8003ede:	617b      	str	r3, [r7, #20]
  uint32_t epnum = 0;
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
  
  while ( ep_intr )
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f47f af47 	bne.w	8003d76 <DCD_HandleInEP_ISR+0x1a>
    }
    epnum++;
    ep_intr >>= 1;
  }
  
  return 1;
 8003ee8:	2301      	movs	r3, #1
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000150 	.word	0x20000150

08003ef8 <DCD_HandleOutEP_ISR>:
*         Indicates that an OUT EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleOutEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t ep_intr;
  USB_OTG_DOEPINTn_TypeDef  doepint;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  uint32_t epnum = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	613b      	str	r3, [r7, #16]
  
  doepint.d32 = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff fb29 	bl	8003560 <USB_OTG_ReadDevAllOutEp_itr>
 8003f0e:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 8003f10:	e08f      	b.n	8004032 <DCD_HandleOutEP_ISR+0x13a>
  {
    if (ep_intr&0x1)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 8084 	beq.w	8004026 <DCD_HandleOutEP_ISR+0x12e>
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	4619      	mov	r1, r3
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff fb31 	bl	800358c <USB_OTG_ReadDevOutEP_itr>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	60fb      	str	r3, [r7, #12]
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 8003f2e:	7b3b      	ldrb	r3, [r7, #12]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d048      	beq.n	8003fcc <DCD_HandleOutEP_ISR+0xd4>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	7b3b      	ldrb	r3, [r7, #12]
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	733b      	strb	r3, [r7, #12]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	3314      	adds	r3, #20
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	609a      	str	r2, [r3, #8]
        if (pdev->cfg.dma_enable == 1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	78db      	ldrb	r3, [r3, #3]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d11f      	bne.n	8003f9e <DCD_HandleOutEP_ISR+0xa6>
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	3314      	adds	r3, #20
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	60bb      	str	r3, [r7, #8]
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	440b      	add	r3, r1
 8003f7c:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8003f80:	681b      	ldr	r3, [r3, #0]
            deptsiz.b.xfersize;
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	f3c2 0212 	ubfx	r2, r2, #0, #19
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
        if (pdev->cfg.dma_enable == 1)
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8003f88:	1a99      	subs	r1, r3, r2
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	4403      	add	r3, r0
 8003f98:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8003f9c:	6019      	str	r1, [r3, #0]
            deptsiz.b.xfersize;
        }
        /* Inform upper layer: data ready */
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 8003f9e:	4b29      	ldr	r3, [pc, #164]	; (8004044 <DCD_HandleOutEP_ISR+0x14c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	4611      	mov	r1, r2
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	78db      	ldrb	r3, [r3, #3]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d10a      	bne.n	8003fcc <DCD_HandleOutEP_ISR+0xd4>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d107      	bne.n	8003fcc <DCD_HandleOutEP_ISR+0xd4>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8003fc2:	2b05      	cmp	r3, #5
 8003fc4:	d102      	bne.n	8003fcc <DCD_HandleOutEP_ISR+0xd4>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff fb12 	bl	80035f0 <USB_OTG_EP0_OutStart>
          }
        }        
      }
      /* Endpoint disable  */
      if ( doepint.b.epdisabled )
 8003fcc:	7b3b      	ldrb	r3, [r7, #12]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00d      	beq.n	8003ff4 <DCD_HandleOutEP_ISR+0xfc>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	7b3b      	ldrb	r3, [r7, #12]
 8003fde:	f043 0302 	orr.w	r3, r3, #2
 8003fe2:	733b      	strb	r3, [r7, #12]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	3314      	adds	r3, #20
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	609a      	str	r2, [r3, #8]
      }
      /* Setup Phase Done (control EPs) */
      if ( doepint.b.setup )
 8003ff4:	7b3b      	ldrb	r3, [r7, #12]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d012      	beq.n	8004026 <DCD_HandleOutEP_ISR+0x12e>
      {
        
        /* inform the upper layer that a setup packet is available */
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
 8004000:	4b10      	ldr	r3, [pc, #64]	; (8004044 <DCD_HandleOutEP_ISR+0x14c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	7b3b      	ldrb	r3, [r7, #12]
 8004010:	f043 0308 	orr.w	r3, r3, #8
 8004014:	733b      	strb	r3, [r7, #12]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	3314      	adds	r3, #20
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	3301      	adds	r3, #1
 800402a:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	617b      	str	r3, [r7, #20]
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
  
  while ( ep_intr )
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f47f af6c 	bne.w	8003f12 <DCD_HandleOutEP_ISR+0x1a>
      }
    }
    epnum++;
    ep_intr >>= 1;
  }
  return 1;
 800403a:	2301      	movs	r3, #1
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	20000150 	.word	0x20000150

08004048 <DCD_HandleSof_ISR>:
*         Handles the SOF Interrupts
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  GINTSTS;
  
  
  USBD_DCD_INT_fops->SOF(pdev);
 8004050:	4b09      	ldr	r3, [pc, #36]	; (8004078 <DCD_HandleSof_ISR+0x30>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	4798      	blx	r3
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	60fb      	str	r3, [r7, #12]
  GINTSTS.b.sofintr = 1;
 800405e:	7b3b      	ldrb	r3, [r7, #12]
 8004060:	f043 0308 	orr.w	r3, r3, #8
 8004064:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	615a      	str	r2, [r3, #20]
  
  return 1;
 800406e:	2301      	movs	r3, #1
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20000150 	.word	0x20000150

0800407c <DCD_HandleRxStatusQueueLevel_ISR>:
*         Handles the Rx Status Queue Level Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleRxStatusQueueLevel_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  USB_OTG_DRXSTS_TypeDef   status;
  USB_OTG_EP *ep;
  
  /* Disable the Rx Status Queue Level interrupt */
  int_mask.d32 = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	613b      	str	r3, [r7, #16]
  int_mask.b.rxstsqlvl = 1;
 8004088:	7c3b      	ldrb	r3, [r7, #16]
 800408a:	f043 0310 	orr.w	r3, r3, #16
 800408e:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	68d2      	ldr	r2, [r2, #12]
 8004098:	6991      	ldr	r1, [r2, #24]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	43d2      	mvns	r2, r2
 800409e:	400a      	ands	r2, r1
 80040a0:	619a      	str	r2, [r3, #24]
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	60fb      	str	r3, [r7, #12]
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 80040aa:	7b3b      	ldrb	r3, [r7, #12]
 80040ac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	4413      	add	r3, r2
 80040c4:	3304      	adds	r3, #4
 80040c6:	617b      	str	r3, [r7, #20]
  
  switch (status.b.pktsts)
 80040c8:	7bbb      	ldrb	r3, [r7, #14]
 80040ca:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	2b05      	cmp	r3, #5
 80040d4:	d844      	bhi.n	8004160 <DCD_HandleRxStatusQueueLevel_ISR+0xe4>
 80040d6:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <DCD_HandleRxStatusQueueLevel_ISR+0x60>)
 80040d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040dc:	08004161 	.word	0x08004161
 80040e0:	080040f5 	.word	0x080040f5
 80040e4:	08004161 	.word	0x08004161
 80040e8:	08004161 	.word	0x08004161
 80040ec:	08004161 	.word	0x08004161
 80040f0:	0800413d 	.word	0x0800413d
  {
  case STS_GOUT_NAK:
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
 80040f4:	89ba      	ldrh	r2, [r7, #12]
 80040f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80040fa:	4013      	ands	r3, r2
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d030      	beq.n	8004164 <DCD_HandleRxStatusQueueLevel_ISR+0xe8>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	68d9      	ldr	r1, [r3, #12]
 8004106:	89bb      	ldrh	r3, [r7, #12]
 8004108:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800410c:	b29b      	uxth	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7fe fa3d 	bl	8002590 <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	89ba      	ldrh	r2, [r7, #12]
 800411c:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8004120:	b292      	uxth	r2, r2
 8004122:	441a      	add	r2, r3
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	60da      	str	r2, [r3, #12]
      ep->xfer_count += status.b.bcnt;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	89ba      	ldrh	r2, [r7, #12]
 800412e:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8004132:	b292      	uxth	r2, r2
 8004134:	441a      	add	r2, r3
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	619a      	str	r2, [r3, #24]
    }
    break;
 800413a:	e013      	b.n	8004164 <DCD_HandleRxStatusQueueLevel_ISR+0xe8>
    break;
  case STS_SETUP_COMP:
    break;
  case STS_SETUP_UPDT:
    /* Copy the setup packet received in FIFO into the setup buffer in RAM */
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f203 53cc 	addw	r3, r3, #1484	; 0x5cc
 8004142:	2208      	movs	r2, #8
 8004144:	4619      	mov	r1, r3
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fe fa22 	bl	8002590 <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	89ba      	ldrh	r2, [r7, #12]
 8004152:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8004156:	b292      	uxth	r2, r2
 8004158:	441a      	add	r2, r3
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	619a      	str	r2, [r3, #24]
    break;
 800415e:	e002      	b.n	8004166 <DCD_HandleRxStatusQueueLevel_ISR+0xea>
  default:
    break;
 8004160:	bf00      	nop
 8004162:	e000      	b.n	8004166 <DCD_HandleRxStatusQueueLevel_ISR+0xea>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
      ep->xfer_buff += status.b.bcnt;
      ep->xfer_count += status.b.bcnt;
    }
    break;
 8004164:	bf00      	nop
  default:
    break;
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68d2      	ldr	r2, [r2, #12]
 800416e:	6991      	ldr	r1, [r2, #24]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	430a      	orrs	r2, r1
 8004174:	619a      	str	r2, [r3, #24]
  
  return 1;
 8004176:	2301      	movs	r3, #1
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <DCD_WriteEmptyTxFifo>:
*         check FIFO for the next packet to be loaded
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_WriteEmptyTxFifo(USB_OTG_CORE_HANDLE *pdev, uint32_t epnum)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  USB_OTG_DTXFSTSn_TypeDef  txstatus;
  USB_OTG_EP *ep;
  uint32_t len = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
  uint32_t len32b;
  txstatus.d32 = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	60bb      	str	r3, [r7, #8]
  
  ep = &pdev->dev.in_ep[epnum];    
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4413      	add	r3, r2
 80041a4:	3304      	adds	r3, #4
 80041a6:	60fb      	str	r3, [r7, #12]
  
  len = ep->xfer_len - ep->xfer_count;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	695a      	ldr	r2, [r3, #20]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	617b      	str	r3, [r7, #20]
  
  if (len > ep->maxpacket)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d202      	bcs.n	80041c4 <DCD_WriteEmptyTxFifo+0x44>
  {
    len = ep->maxpacket;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	617b      	str	r3, [r7, #20]
  }
  
  len32b = (len + 3) / 4;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	3303      	adds	r3, #3
 80041c8:	089b      	lsrs	r3, r3, #2
 80041ca:	613b      	str	r3, [r7, #16]
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	3304      	adds	r3, #4
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	60bb      	str	r3, [r7, #8]
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 80041dc:	e02e      	b.n	800423c <DCD_WriteEmptyTxFifo+0xbc>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	695a      	ldr	r2, [r3, #20]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	617b      	str	r3, [r7, #20]
    
    if (len > ep->maxpacket)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d202      	bcs.n	80041fa <DCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	617b      	str	r3, [r7, #20]
    }
    len32b = (len + 3) / 4;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	3303      	adds	r3, #3
 80041fe:	089b      	lsrs	r3, r3, #2
 8004200:	613b      	str	r3, [r7, #16]
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	68d9      	ldr	r1, [r3, #12]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	b29b      	uxth	r3, r3
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fe f982 	bl	8002518 <USB_OTG_WritePacket>
    
    ep->xfer_buff  += len;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	441a      	add	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	699a      	ldr	r2, [r3, #24]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	441a      	add	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	619a      	str	r2, [r3, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	3304      	adds	r3, #4
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	60bb      	str	r3, [r7, #8]
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 800423c:	893b      	ldrh	r3, [r7, #8]
 800423e:	461a      	mov	r2, r3
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	429a      	cmp	r2, r3
 8004244:	d909      	bls.n	800425a <DCD_WriteEmptyTxFifo+0xda>
          ep->xfer_count < ep->xfer_len &&
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	699a      	ldr	r2, [r3, #24]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	695b      	ldr	r3, [r3, #20]
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 800424e:	429a      	cmp	r2, r3
 8004250:	d203      	bcs.n	800425a <DCD_WriteEmptyTxFifo+0xda>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	695b      	ldr	r3, [r3, #20]
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
          ep->xfer_count < ep->xfer_len &&
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1c1      	bne.n	80041de <DCD_WriteEmptyTxFifo+0x5e>
    ep->xfer_count += len;
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  }
  
  return 1;
 800425a:	2301      	movs	r3, #1
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <DCD_HandleUsbReset_ISR>:
*         This interrupt occurs when a USB Reset is detected
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUsbReset_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  USB_OTG_DCFG_TypeDef     dcfg;
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t i;
  
  dctl.d32 = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	623b      	str	r3, [r7, #32]
  doepmsk.d32 = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]
  diepmsk.d32 = 0;
 8004278:	2300      	movs	r3, #0
 800427a:	61bb      	str	r3, [r7, #24]
  dcfg.d32 = 0;
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
  gintsts.d32 = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
 8004284:	7c3b      	ldrb	r3, [r7, #16]
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6912      	ldr	r2, [r2, #16]
 8004294:	6851      	ldr	r1, [r2, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	43d2      	mvns	r2, r2
 800429a:	400a      	ands	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 800429e:	2100      	movs	r1, #0
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7fe fb31 	bl	8002908 <USB_OTG_FlushTxFifo>
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80042a6:	2300      	movs	r3, #0
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
 80042aa:	e012      	b.n	80042d2 <DCD_HandleUsbReset_ISR+0x6e>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	3304      	adds	r3, #4
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	22ff      	movs	r2, #255	; 0xff
 80042ba:	609a      	str	r2, [r3, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	3314      	adds	r3, #20
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	22ff      	movs	r2, #255	; 0xff
 80042ca:	609a      	str	r2, [r3, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	3301      	adds	r3, #1
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	785b      	ldrb	r3, [r3, #1]
 80042d6:	461a      	mov	r2, r3
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	429a      	cmp	r2, r3
 80042dc:	d8e6      	bhi.n	80042ac <DCD_HandleUsbReset_ISR+0x48>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f04f 32ff 	mov.w	r2, #4294967295
 80042e6:	619a      	str	r2, [r3, #24]
  
  daintmsk.ep.in = 1;
 80042e8:	2301      	movs	r3, #1
 80042ea:	843b      	strh	r3, [r7, #32]
  daintmsk.ep.out = 1;
 80042ec:	2301      	movs	r3, #1
 80042ee:	847b      	strh	r3, [r7, #34]	; 0x22
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	6a3a      	ldr	r2, [r7, #32]
 80042f6:	61da      	str	r2, [r3, #28]
  
  doepmsk.b.setup = 1;
 80042f8:	7f3b      	ldrb	r3, [r7, #28]
 80042fa:	f043 0308 	orr.w	r3, r3, #8
 80042fe:	773b      	strb	r3, [r7, #28]
  doepmsk.b.xfercompl = 1;
 8004300:	7f3b      	ldrb	r3, [r7, #28]
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	773b      	strb	r3, [r7, #28]
  doepmsk.b.epdisabled = 1;
 8004308:	7f3b      	ldrb	r3, [r7, #28]
 800430a:	f043 0302 	orr.w	r3, r3, #2
 800430e:	773b      	strb	r3, [r7, #28]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	615a      	str	r2, [r3, #20]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED   
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOUTEP1MSK, doepmsk.d32 );
#endif
  diepmsk.b.xfercompl = 1;
 8004318:	7e3b      	ldrb	r3, [r7, #24]
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	763b      	strb	r3, [r7, #24]
  diepmsk.b.timeout = 1;
 8004320:	7e3b      	ldrb	r3, [r7, #24]
 8004322:	f043 0308 	orr.w	r3, r3, #8
 8004326:	763b      	strb	r3, [r7, #24]
  diepmsk.b.epdisabled = 1;
 8004328:	7e3b      	ldrb	r3, [r7, #24]
 800432a:	f043 0302 	orr.w	r3, r3, #2
 800432e:	763b      	strb	r3, [r7, #24]

  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	611a      	str	r2, [r3, #16]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
#endif
  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	617b      	str	r3, [r7, #20]
  dcfg.b.devaddr = 0;
 8004340:	8abb      	ldrh	r3, [r7, #20]
 8004342:	f36f 130a 	bfc	r3, #4, #7
 8004346:	82bb      	strh	r3, [r7, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	601a      	str	r2, [r3, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff f94d 	bl	80035f0 <USB_OTG_EP0_OutStart>
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
  gintsts.b.usbreset = 1;
 800435a:	7b7b      	ldrb	r3, [r7, #13]
 800435c:	f043 0310 	orr.w	r3, r3, #16
 8004360:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	615a      	str	r2, [r3, #20]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 800436a:	4b05      	ldr	r3, [pc, #20]	; (8004380 <DCD_HandleUsbReset_ISR+0x11c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4798      	blx	r3
  return 1;
 8004374:	2301      	movs	r3, #1
}
 8004376:	4618      	mov	r0, r3
 8004378:	3728      	adds	r7, #40	; 0x28
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000150 	.word	0x20000150

08004384 <DCD_HandleEnumDone_ISR>:
*         Read the device status register and set the device speed
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7fe fd4d 	bl	8002e2c <USB_OTG_EP0Activate>
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	60bb      	str	r3, [r7, #8]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fe fd22 	bl	8002de4 <USB_OTG_GetDeviceSpeed>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	d10c      	bne.n	80043c0 <DCD_HandleEnumDone_ISR+0x3c>
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043b2:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 9;
 80043b4:	7a7b      	ldrb	r3, [r7, #9]
 80043b6:	2209      	movs	r2, #9
 80043b8:	f362 0385 	bfi	r3, r2, #2, #4
 80043bc:	727b      	strb	r3, [r7, #9]
 80043be:	e00a      	b.n	80043d6 <DCD_HandleEnumDone_ISR+0x52>
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2240      	movs	r2, #64	; 0x40
 80043ca:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 5;
 80043cc:	7a7b      	ldrb	r3, [r7, #9]
 80043ce:	2205      	movs	r2, #5
 80043d0:	f362 0385 	bfi	r3, r2, #2, #4
 80043d4:	727b      	strb	r3, [r7, #9]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	60da      	str	r2, [r3, #12]
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
  gintsts.b.enumdone = 1;
 80043e2:	7b7b      	ldrb	r3, [r7, #13]
 80043e4:	f043 0320 	orr.w	r3, r3, #32
 80043e8:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	615a      	str	r2, [r3, #20]
  return 1;
 80043f2:	2301      	movs	r3, #1
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <DCD_IsoINIncomplete_ISR>:
*         handle the ISO IN incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoINIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
 8004408:	4b08      	ldr	r3, [pc, #32]	; (800442c <DCD_IsoINIncomplete_ISR+0x30>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoin = 1;
 8004412:	7bbb      	ldrb	r3, [r7, #14]
 8004414:	f043 0310 	orr.w	r3, r3, #16
 8004418:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	615a      	str	r2, [r3, #20]
  
  return 1;
 8004422:	2301      	movs	r3, #1
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	20000150 	.word	0x20000150

08004430 <DCD_IsoOUTIncomplete_ISR>:
*         handle the ISO OUT incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoOUTIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
 800443c:	4b08      	ldr	r3, [pc, #32]	; (8004460 <DCD_IsoOUTIncomplete_ISR+0x30>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 8004446:	7bbb      	ldrb	r3, [r7, #14]
 8004448:	f043 0320 	orr.w	r3, r3, #32
 800444c:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	615a      	str	r2, [r3, #20]
  return 1;
 8004456:	2301      	movs	r3, #1
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000150 	.word	0x20000150

08004464 <DCD_ReadDevInEP>:
*         Reads ep flags
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	617b      	str	r3, [r7, #20]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447e:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
 8004488:	01db      	lsls	r3, r3, #7
 800448a:	b2db      	uxtb	r3, r3
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	3304      	adds	r3, #4
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	4013      	ands	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
  return v;
 80044a6:	68fb      	ldr	r3, [r7, #12]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	371c      	adds	r7, #28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <usbd_cdc_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  usbd_cdc_Init (void  *pdev, 
                               uint8_t cfgidx)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	70fb      	strb	r3, [r7, #3]
  uint8_t *pbuf;

  /* Open EP IN */
  DCD_EP_Open(pdev,
 80044c0:	2302      	movs	r3, #2
 80044c2:	2240      	movs	r2, #64	; 0x40
 80044c4:	2181      	movs	r1, #129	; 0x81
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff f950 	bl	800376c <DCD_EP_Open>
              CDC_IN_EP,
              CDC_DATA_IN_PACKET_SIZE,
              USB_OTG_EP_BULK);
  
  /* Open EP OUT */
  DCD_EP_Open(pdev,
 80044cc:	2302      	movs	r3, #2
 80044ce:	2240      	movs	r2, #64	; 0x40
 80044d0:	2101      	movs	r1, #1
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff f94a 	bl	800376c <DCD_EP_Open>
              CDC_OUT_EP,
              CDC_DATA_OUT_PACKET_SIZE,
              USB_OTG_EP_BULK);
  
  /* Open Command IN EP */
  DCD_EP_Open(pdev,
 80044d8:	2303      	movs	r3, #3
 80044da:	2208      	movs	r2, #8
 80044dc:	2182      	movs	r1, #130	; 0x82
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff f944 	bl	800376c <DCD_EP_Open>
              CDC_CMD_EP,
              CDC_CMD_PACKET_SZE,
              USB_OTG_EP_INT);
  
  pbuf = (uint8_t *)USBD_DeviceDesc;
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <usbd_cdc_Init+0x60>)
 80044e6:	60fb      	str	r3, [r7, #12]
  pbuf[4] = DEVICE_CLASS_CDC;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3304      	adds	r3, #4
 80044ec:	2202      	movs	r2, #2
 80044ee:	701a      	strb	r2, [r3, #0]
  pbuf[5] = DEVICE_SUBCLASS_CDC;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3305      	adds	r3, #5
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
  
  /* Initialize the Interface physical components */
  APP_FOPS.pIf_Init();
 80044f8:	4b07      	ldr	r3, [pc, #28]	; (8004518 <usbd_cdc_Init+0x64>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4798      	blx	r3

  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 80044fe:	2340      	movs	r3, #64	; 0x40
 8004500:	4a06      	ldr	r2, [pc, #24]	; (800451c <usbd_cdc_Init+0x68>)
 8004502:	2101      	movs	r1, #1
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff f9c5 	bl	8003894 <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);
  
  return USBD_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20000170 	.word	0x20000170
 8004518:	20000110 	.word	0x20000110
 800451c:	200008d8 	.word	0x200008d8

08004520 <usbd_cdc_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  usbd_cdc_DeInit (void  *pdev, 
                                 uint8_t cfgidx)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  DCD_EP_Close(pdev,
 800452c:	2181      	movs	r1, #129	; 0x81
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff f974 	bl	800381c <DCD_EP_Close>
              CDC_IN_EP);
  
  /* Open EP OUT */
  DCD_EP_Close(pdev,
 8004534:	2101      	movs	r1, #1
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff f970 	bl	800381c <DCD_EP_Close>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  DCD_EP_Close(pdev,
 800453c:	2182      	movs	r1, #130	; 0x82
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff f96c 	bl	800381c <DCD_EP_Close>
              CDC_CMD_EP);

  /* Restore default state of the Interface physical components */
  APP_FOPS.pIf_DeInit();
 8004544:	4b03      	ldr	r3, [pc, #12]	; (8004554 <usbd_cdc_DeInit+0x34>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4798      	blx	r3
  
  return USBD_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	20000110 	.word	0x20000110

08004558 <usbd_cdc_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  usbd_cdc_Setup (void  *pdev, 
                                USB_SETUP_REQ *req)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint16_t len=USB_CDC_DESC_SIZ;
 8004562:	233a      	movs	r3, #58	; 0x3a
 8004564:	81fb      	strh	r3, [r7, #14]
  uint8_t  *pbuf=usbd_cdc_CfgDesc + 9;
 8004566:	4b3f      	ldr	r3, [pc, #252]	; (8004664 <usbd_cdc_Setup+0x10c>)
 8004568:	60bb      	str	r3, [r7, #8]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004572:	2b00      	cmp	r3, #0
 8004574:	d03d      	beq.n	80045f2 <usbd_cdc_Setup+0x9a>
 8004576:	2b20      	cmp	r3, #32
 8004578:	d135      	bne.n	80045e6 <usbd_cdc_Setup+0x8e>
  {
    /* CDC Class Requests -------------------------------*/
  case USB_REQ_TYPE_CLASS :
      /* Check if the request is a data setup packet */
      if (req->wLength)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	88db      	ldrh	r3, [r3, #6]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d027      	beq.n	80045d2 <usbd_cdc_Setup+0x7a>
      {
        /* Check if the request is Device-to-Host */
        if (req->bmRequest & 0x80)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	b25b      	sxtb	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	da10      	bge.n	80045ae <usbd_cdc_Setup+0x56>
        {
          /* Get the data to be sent to Host from interface layer */
          APP_FOPS.pIf_Ctrl(req->bRequest, CmdBuff, req->wLength);
 800458c:	4b36      	ldr	r3, [pc, #216]	; (8004668 <usbd_cdc_Setup+0x110>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	7852      	ldrb	r2, [r2, #1]
 8004594:	4610      	mov	r0, r2
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	88d2      	ldrh	r2, [r2, #6]
 800459a:	4934      	ldr	r1, [pc, #208]	; (800466c <usbd_cdc_Setup+0x114>)
 800459c:	4798      	blx	r3
          
          /* Send the data to the host */
          USBD_CtlSendData (pdev, 
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	88db      	ldrh	r3, [r3, #6]
 80045a2:	461a      	mov	r2, r3
 80045a4:	4931      	ldr	r1, [pc, #196]	; (800466c <usbd_cdc_Setup+0x114>)
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fd4c 	bl	8005044 <USBD_CtlSendData>
 80045ac:	e019      	b.n	80045e2 <usbd_cdc_Setup+0x8a>
                            req->wLength);          
        }
        else /* Host-to-Device requeset */
        {
          /* Set the value of the current command to be processed */
          cdcCmd = req->bRequest;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	785b      	ldrb	r3, [r3, #1]
 80045b2:	461a      	mov	r2, r3
 80045b4:	4b2e      	ldr	r3, [pc, #184]	; (8004670 <usbd_cdc_Setup+0x118>)
 80045b6:	601a      	str	r2, [r3, #0]
          cdcLen = req->wLength;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	88db      	ldrh	r3, [r3, #6]
 80045bc:	461a      	mov	r2, r3
 80045be:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <usbd_cdc_Setup+0x11c>)
 80045c0:	601a      	str	r2, [r3, #0]
          
          /* Prepare the reception of the buffer over EP0
          Next step: the received data will be managed in usbd_cdc_EP0_TxSent() 
          function. */
          USBD_CtlPrepareRx (pdev,
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	88db      	ldrh	r3, [r3, #6]
 80045c6:	461a      	mov	r2, r3
 80045c8:	4928      	ldr	r1, [pc, #160]	; (800466c <usbd_cdc_Setup+0x114>)
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fd6e 	bl	80050ac <USBD_CtlPrepareRx>
 80045d0:	e007      	b.n	80045e2 <usbd_cdc_Setup+0x8a>
        }
      }
      else /* No Data request */
      {
        /* Transfer the command to the interface layer */
        APP_FOPS.pIf_Ctrl(req->bRequest, NULL, 0);
 80045d2:	4b25      	ldr	r3, [pc, #148]	; (8004668 <usbd_cdc_Setup+0x110>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	7852      	ldrb	r2, [r2, #1]
 80045da:	4610      	mov	r0, r2
 80045dc:	2200      	movs	r2, #0
 80045de:	2100      	movs	r1, #0
 80045e0:	4798      	blx	r3
      }
      
      return USBD_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e03a      	b.n	800465c <usbd_cdc_Setup+0x104>
      
    default:
      USBD_CtlError (pdev, req);
 80045e6:	6839      	ldr	r1, [r7, #0]
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f001 f9e3 	bl	80059b4 <USBD_CtlError>
      return USBD_FAIL;
 80045ee:	2302      	movs	r3, #2
 80045f0:	e034      	b.n	800465c <usbd_cdc_Setup+0x104>
    
      
      
    /* Standard Requests -------------------------------*/
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	785b      	ldrb	r3, [r3, #1]
 80045f6:	2b0a      	cmp	r3, #10
 80045f8:	d018      	beq.n	800462c <usbd_cdc_Setup+0xd4>
 80045fa:	2b0b      	cmp	r3, #11
 80045fc:	d01c      	beq.n	8004638 <usbd_cdc_Setup+0xe0>
 80045fe:	2b06      	cmp	r3, #6
 8004600:	d12b      	bne.n	800465a <usbd_cdc_Setup+0x102>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( (req->wValue >> 8) == CDC_DESCRIPTOR_TYPE)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	885b      	ldrh	r3, [r3, #2]
 8004606:	0a1b      	lsrs	r3, r3, #8
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b21      	cmp	r3, #33	; 0x21
 800460c:	d107      	bne.n	800461e <usbd_cdc_Setup+0xc6>
      {
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
        pbuf = usbd_cdc_Desc;   
#else
        pbuf = usbd_cdc_CfgDesc + 9 + (9 * USBD_ITF_MAX_NUM);
 800460e:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <usbd_cdc_Setup+0x120>)
 8004610:	60bb      	str	r3, [r7, #8]
#endif 
        len = MIN(USB_CDC_DESC_SIZ , req->wLength);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	88db      	ldrh	r3, [r3, #6]
 8004616:	2b3a      	cmp	r3, #58	; 0x3a
 8004618:	bf28      	it	cs
 800461a:	233a      	movcs	r3, #58	; 0x3a
 800461c:	81fb      	strh	r3, [r7, #14]
      }
      
      USBD_CtlSendData (pdev, 
 800461e:	89fb      	ldrh	r3, [r7, #14]
 8004620:	461a      	mov	r2, r3
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fd0d 	bl	8005044 <USBD_CtlSendData>
                        pbuf,
                        len);
      break;
 800462a:	e016      	b.n	800465a <usbd_cdc_Setup+0x102>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 800462c:	2201      	movs	r2, #1
 800462e:	4913      	ldr	r1, [pc, #76]	; (800467c <usbd_cdc_Setup+0x124>)
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fd07 	bl	8005044 <USBD_CtlSendData>
                        (uint8_t *)&usbd_cdc_AltSet,
                        1);
      break;
 8004636:	e010      	b.n	800465a <usbd_cdc_Setup+0x102>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_ITF_MAX_NUM)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	885b      	ldrh	r3, [r3, #2]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <usbd_cdc_Setup+0xf8>
      {
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	885b      	ldrh	r3, [r3, #2]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	4b0c      	ldr	r3, [pc, #48]	; (800467c <usbd_cdc_Setup+0x124>)
 800464c:	601a      	str	r2, [r3, #0]
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
      }
      break;
 800464e:	e003      	b.n	8004658 <usbd_cdc_Setup+0x100>
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
      }
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
 8004650:	6839      	ldr	r1, [r7, #0]
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f001 f9ae 	bl	80059b4 <USBD_CtlError>
      }
      break;
 8004658:	bf00      	nop
    }
  }
  return USBD_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	2000009d 	.word	0x2000009d
 8004668:	20000110 	.word	0x20000110
 800466c:	20000918 	.word	0x20000918
 8004670:	200000d8 	.word	0x200000d8
 8004674:	200001f4 	.word	0x200001f4
 8004678:	200000a6 	.word	0x200000a6
 800467c:	200001e0 	.word	0x200001e0

08004680 <usbd_cdc_EP0_RxReady>:
  *         Data received on control endpoint
  * @param  pdev: device device instance
  * @retval status
  */
static uint8_t  usbd_cdc_EP0_RxReady (void  *pdev)
{ 
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  if (cdcCmd != NO_CMD)
 8004688:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <usbd_cdc_EP0_RxReady+0x30>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2bff      	cmp	r3, #255	; 0xff
 800468e:	d00a      	beq.n	80046a6 <usbd_cdc_EP0_RxReady+0x26>
  {
    /* Process the data */
    APP_FOPS.pIf_Ctrl(cdcCmd, CmdBuff, cdcLen);
 8004690:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <usbd_cdc_EP0_RxReady+0x34>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	4a06      	ldr	r2, [pc, #24]	; (80046b0 <usbd_cdc_EP0_RxReady+0x30>)
 8004696:	6810      	ldr	r0, [r2, #0]
 8004698:	4a07      	ldr	r2, [pc, #28]	; (80046b8 <usbd_cdc_EP0_RxReady+0x38>)
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	4907      	ldr	r1, [pc, #28]	; (80046bc <usbd_cdc_EP0_RxReady+0x3c>)
 800469e:	4798      	blx	r3
    
    /* Reset the command variable to default value */
    cdcCmd = NO_CMD;
 80046a0:	4b03      	ldr	r3, [pc, #12]	; (80046b0 <usbd_cdc_EP0_RxReady+0x30>)
 80046a2:	22ff      	movs	r2, #255	; 0xff
 80046a4:	601a      	str	r2, [r3, #0]
  }
  
  return USBD_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	200000d8 	.word	0x200000d8
 80046b4:	20000110 	.word	0x20000110
 80046b8:	200001f4 	.word	0x200001f4
 80046bc:	20000918 	.word	0x20000918

080046c0 <usbd_cdc_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_DataIn (void *pdev, uint8_t epnum)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if (USB_Tx_State == 1)
 80046cc:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <usbd_cdc_DataIn+0x88>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d133      	bne.n	800473c <usbd_cdc_DataIn+0x7c>
  {
    if (APP_Rx_length == 0) 
 80046d4:	4b1d      	ldr	r3, [pc, #116]	; (800474c <usbd_cdc_DataIn+0x8c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d103      	bne.n	80046e4 <usbd_cdc_DataIn+0x24>
    {
      USB_Tx_State = 0;
 80046dc:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <usbd_cdc_DataIn+0x88>)
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	e02b      	b.n	800473c <usbd_cdc_DataIn+0x7c>
    }
    else 
    {
      if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE){
 80046e4:	4b19      	ldr	r3, [pc, #100]	; (800474c <usbd_cdc_DataIn+0x8c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b40      	cmp	r3, #64	; 0x40
 80046ea:	d90f      	bls.n	800470c <usbd_cdc_DataIn+0x4c>
        USB_Tx_ptr = APP_Rx_ptr_out;
 80046ec:	4b18      	ldr	r3, [pc, #96]	; (8004750 <usbd_cdc_DataIn+0x90>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	81fb      	strh	r3, [r7, #14]
        USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 80046f2:	2340      	movs	r3, #64	; 0x40
 80046f4:	81bb      	strh	r3, [r7, #12]
        
        APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;
 80046f6:	4b16      	ldr	r3, [pc, #88]	; (8004750 <usbd_cdc_DataIn+0x90>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3340      	adds	r3, #64	; 0x40
 80046fc:	4a14      	ldr	r2, [pc, #80]	; (8004750 <usbd_cdc_DataIn+0x90>)
 80046fe:	6013      	str	r3, [r2, #0]
        APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;    
 8004700:	4b12      	ldr	r3, [pc, #72]	; (800474c <usbd_cdc_DataIn+0x8c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3b40      	subs	r3, #64	; 0x40
 8004706:	4a11      	ldr	r2, [pc, #68]	; (800474c <usbd_cdc_DataIn+0x8c>)
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e00f      	b.n	800472c <usbd_cdc_DataIn+0x6c>
      }
      else 
      {
        USB_Tx_ptr = APP_Rx_ptr_out;
 800470c:	4b10      	ldr	r3, [pc, #64]	; (8004750 <usbd_cdc_DataIn+0x90>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	81fb      	strh	r3, [r7, #14]
        USB_Tx_length = APP_Rx_length;
 8004712:	4b0e      	ldr	r3, [pc, #56]	; (800474c <usbd_cdc_DataIn+0x8c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	81bb      	strh	r3, [r7, #12]
        
        APP_Rx_ptr_out += APP_Rx_length;
 8004718:	4b0d      	ldr	r3, [pc, #52]	; (8004750 <usbd_cdc_DataIn+0x90>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <usbd_cdc_DataIn+0x8c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4413      	add	r3, r2
 8004722:	4a0b      	ldr	r2, [pc, #44]	; (8004750 <usbd_cdc_DataIn+0x90>)
 8004724:	6013      	str	r3, [r2, #0]
        APP_Rx_length = 0;
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <usbd_cdc_DataIn+0x8c>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
      }
      
      /* Prepare the available data buffer to be sent on IN endpoint */
      DCD_EP_Tx (pdev,
                 CDC_IN_EP,
                 (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
 800472c:	89fb      	ldrh	r3, [r7, #14]
        APP_Rx_ptr_out += APP_Rx_length;
        APP_Rx_length = 0;
      }
      
      /* Prepare the available data buffer to be sent on IN endpoint */
      DCD_EP_Tx (pdev,
 800472e:	4a09      	ldr	r2, [pc, #36]	; (8004754 <usbd_cdc_DataIn+0x94>)
 8004730:	441a      	add	r2, r3
 8004732:	89bb      	ldrh	r3, [r7, #12]
 8004734:	2181      	movs	r1, #129	; 0x81
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff f8ee 	bl	8003918 <DCD_EP_Tx>
                 (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
                 USB_Tx_length);
    }
  }  
  
  return USBD_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	200001f0 	.word	0x200001f0
 800474c:	200001ec 	.word	0x200001ec
 8004750:	200001e8 	.word	0x200001e8
 8004754:	20000920 	.word	0x20000920

08004758 <usbd_cdc_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_DataOut (void *pdev, uint8_t epnum)
{      
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	440b      	add	r3, r1
 8004772:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	81fb      	strh	r3, [r7, #14]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
     NAKed till the end of the application Xfer */
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 800477a:	4b08      	ldr	r3, [pc, #32]	; (800479c <usbd_cdc_DataOut+0x44>)
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	89fa      	ldrh	r2, [r7, #14]
 8004780:	4611      	mov	r1, r2
 8004782:	4807      	ldr	r0, [pc, #28]	; (80047a0 <usbd_cdc_DataOut+0x48>)
 8004784:	4798      	blx	r3
  
  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 8004786:	2340      	movs	r3, #64	; 0x40
 8004788:	4a05      	ldr	r2, [pc, #20]	; (80047a0 <usbd_cdc_DataOut+0x48>)
 800478a:	2101      	movs	r1, #1
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff f881 	bl	8003894 <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000110 	.word	0x20000110
 80047a0:	200008d8 	.word	0x200008d8

080047a4 <usbd_cdc_SOF>:
  * @param  pdev: instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_SOF (void *pdev)
{      
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  static uint32_t FrameCount = 0;
  
  if (FrameCount++ == CDC_IN_FRAME_INTERVAL)
 80047ac:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <usbd_cdc_SOF+0x2c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	4907      	ldr	r1, [pc, #28]	; (80047d0 <usbd_cdc_SOF+0x2c>)
 80047b4:	600a      	str	r2, [r1, #0]
 80047b6:	2b05      	cmp	r3, #5
 80047b8:	d105      	bne.n	80047c6 <usbd_cdc_SOF+0x22>
  {
    /* Reset the frame counter */
    FrameCount = 0;
 80047ba:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <usbd_cdc_SOF+0x2c>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
    
    /* Check the data to be sent through IN pipe */
    Handle_USBAsynchXfer(pdev);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f807 	bl	80047d4 <Handle_USBAsynchXfer>
  }
  
  return USBD_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	200001f8 	.word	0x200001f8

080047d4 <Handle_USBAsynchXfer>:
  *         Send data to USB
  * @param  pdev: instance
  * @retval None
  */
static void Handle_USBAsynchXfer (void *pdev)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 80047dc:	4b2d      	ldr	r3, [pc, #180]	; (8004894 <Handle_USBAsynchXfer+0xc0>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d054      	beq.n	800488e <Handle_USBAsynchXfer+0xba>
  {
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE)
 80047e4:	4b2c      	ldr	r3, [pc, #176]	; (8004898 <Handle_USBAsynchXfer+0xc4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ec:	d102      	bne.n	80047f4 <Handle_USBAsynchXfer+0x20>
    {
      APP_Rx_ptr_out = 0;
 80047ee:	4b2a      	ldr	r3, [pc, #168]	; (8004898 <Handle_USBAsynchXfer+0xc4>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]
    }
    
    if(APP_Rx_ptr_out == APP_Rx_ptr_in) 
 80047f4:	4b28      	ldr	r3, [pc, #160]	; (8004898 <Handle_USBAsynchXfer+0xc4>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4b28      	ldr	r3, [pc, #160]	; (800489c <Handle_USBAsynchXfer+0xc8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d103      	bne.n	8004808 <Handle_USBAsynchXfer+0x34>
    {
      USB_Tx_State = 0; 
 8004800:	4b24      	ldr	r3, [pc, #144]	; (8004894 <Handle_USBAsynchXfer+0xc0>)
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
      return;
 8004806:	e042      	b.n	800488e <Handle_USBAsynchXfer+0xba>
    }
    
    if(APP_Rx_ptr_out > APP_Rx_ptr_in) /* rollback */
 8004808:	4b23      	ldr	r3, [pc, #140]	; (8004898 <Handle_USBAsynchXfer+0xc4>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	4b23      	ldr	r3, [pc, #140]	; (800489c <Handle_USBAsynchXfer+0xc8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d906      	bls.n	8004822 <Handle_USBAsynchXfer+0x4e>
    { 
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 8004814:	4b20      	ldr	r3, [pc, #128]	; (8004898 <Handle_USBAsynchXfer+0xc4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800481c:	4a20      	ldr	r2, [pc, #128]	; (80048a0 <Handle_USBAsynchXfer+0xcc>)
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	e006      	b.n	8004830 <Handle_USBAsynchXfer+0x5c>
    
    }
    else 
    {
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 8004822:	4b1e      	ldr	r3, [pc, #120]	; (800489c <Handle_USBAsynchXfer+0xc8>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4b1c      	ldr	r3, [pc, #112]	; (8004898 <Handle_USBAsynchXfer+0xc4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	4a1c      	ldr	r2, [pc, #112]	; (80048a0 <Handle_USBAsynchXfer+0xcc>)
 800482e:	6013      	str	r3, [r2, #0]
    }
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     APP_Rx_length &= ~0x03;
#endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
    
    if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE)
 8004830:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <Handle_USBAsynchXfer+0xcc>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	d90f      	bls.n	8004858 <Handle_USBAsynchXfer+0x84>
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8004838:	4b17      	ldr	r3, [pc, #92]	; (8004898 <Handle_USBAsynchXfer+0xc4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	81fb      	strh	r3, [r7, #14]
      USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 800483e:	2340      	movs	r3, #64	; 0x40
 8004840:	81bb      	strh	r3, [r7, #12]
      
      APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;	
 8004842:	4b15      	ldr	r3, [pc, #84]	; (8004898 <Handle_USBAsynchXfer+0xc4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3340      	adds	r3, #64	; 0x40
 8004848:	4a13      	ldr	r2, [pc, #76]	; (8004898 <Handle_USBAsynchXfer+0xc4>)
 800484a:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;
 800484c:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <Handle_USBAsynchXfer+0xcc>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3b40      	subs	r3, #64	; 0x40
 8004852:	4a13      	ldr	r2, [pc, #76]	; (80048a0 <Handle_USBAsynchXfer+0xcc>)
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e00f      	b.n	8004878 <Handle_USBAsynchXfer+0xa4>
    }
    else
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <Handle_USBAsynchXfer+0xc4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	81fb      	strh	r3, [r7, #14]
      USB_Tx_length = APP_Rx_length;
 800485e:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <Handle_USBAsynchXfer+0xcc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	81bb      	strh	r3, [r7, #12]
      
      APP_Rx_ptr_out += APP_Rx_length;
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <Handle_USBAsynchXfer+0xc4>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <Handle_USBAsynchXfer+0xcc>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4413      	add	r3, r2
 800486e:	4a0a      	ldr	r2, [pc, #40]	; (8004898 <Handle_USBAsynchXfer+0xc4>)
 8004870:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 8004872:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <Handle_USBAsynchXfer+0xcc>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1; 
 8004878:	4b06      	ldr	r3, [pc, #24]	; (8004894 <Handle_USBAsynchXfer+0xc0>)
 800487a:	2201      	movs	r2, #1
 800487c:	701a      	strb	r2, [r3, #0]

    DCD_EP_Tx (pdev,
               CDC_IN_EP,
               (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
 800487e:	89fb      	ldrh	r3, [r7, #14]
      APP_Rx_ptr_out += APP_Rx_length;
      APP_Rx_length = 0;
    }
    USB_Tx_State = 1; 

    DCD_EP_Tx (pdev,
 8004880:	4a08      	ldr	r2, [pc, #32]	; (80048a4 <Handle_USBAsynchXfer+0xd0>)
 8004882:	441a      	add	r2, r3
 8004884:	89bb      	ldrh	r3, [r7, #12]
 8004886:	2181      	movs	r1, #129	; 0x81
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff f845 	bl	8003918 <DCD_EP_Tx>
               CDC_IN_EP,
               (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
               USB_Tx_length);
  }  
  
}
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	200001f0 	.word	0x200001f0
 8004898:	200001e8 	.word	0x200001e8
 800489c:	200001e4 	.word	0x200001e4
 80048a0:	200001ec 	.word	0x200001ec
 80048a4:	20000920 	.word	0x20000920

080048a8 <USBD_cdc_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_cdc_GetCfgDesc (uint8_t speed, uint16_t *length)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	6039      	str	r1, [r7, #0]
 80048b2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof (usbd_cdc_CfgDesc);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2243      	movs	r2, #67	; 0x43
 80048b8:	801a      	strh	r2, [r3, #0]
  return usbd_cdc_CfgDesc;
 80048ba:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <USBD_cdc_GetCfgDesc+0x20>)
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	20000094 	.word	0x20000094

080048cc <VCP_Init>:
  * @brief  VCP_Init
  *         Initializes the Media on the STM32
  * @param  None
  * @retval Result of the opeartion (USBD_OK in all cases)
  */
static uint16_t VCP_Init(void) {
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return USBD_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <VCP_DeInit>:
  * @brief  VCP_DeInit
  *         DeInitializes the Media on the STM32
  * @param  None
  * @retval Result of the opeartion (USBD_OK in all cases)
  */
static uint16_t VCP_DeInit(void) {
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  return USBD_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <VCP_Ctrl>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion (USBD_OK in all cases)
  */
static uint16_t VCP_Ctrl (uint32_t Cmd, uint8_t* Buf, uint32_t Len)
{ /*
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
	for (i = 0; i < Len; i++) {
		printf("0x%02X ", Buf[i]);
	}
	printf("\n");
	*/
  switch (Cmd)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b23      	cmp	r3, #35	; 0x23
 80048fc:	f200 809b 	bhi.w	8004a36 <VCP_Ctrl+0x14a>
 8004900:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <VCP_Ctrl+0x1c>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	08004a37 	.word	0x08004a37
 800490c:	08004a37 	.word	0x08004a37
 8004910:	08004a37 	.word	0x08004a37
 8004914:	08004a37 	.word	0x08004a37
 8004918:	08004a37 	.word	0x08004a37
 800491c:	08004a37 	.word	0x08004a37
 8004920:	08004a37 	.word	0x08004a37
 8004924:	08004a37 	.word	0x08004a37
 8004928:	08004a37 	.word	0x08004a37
 800492c:	08004a37 	.word	0x08004a37
 8004930:	08004a37 	.word	0x08004a37
 8004934:	08004a37 	.word	0x08004a37
 8004938:	08004a37 	.word	0x08004a37
 800493c:	08004a37 	.word	0x08004a37
 8004940:	08004a37 	.word	0x08004a37
 8004944:	08004a37 	.word	0x08004a37
 8004948:	08004a37 	.word	0x08004a37
 800494c:	08004a37 	.word	0x08004a37
 8004950:	08004a37 	.word	0x08004a37
 8004954:	08004a37 	.word	0x08004a37
 8004958:	08004a37 	.word	0x08004a37
 800495c:	08004a37 	.word	0x08004a37
 8004960:	08004a37 	.word	0x08004a37
 8004964:	08004a37 	.word	0x08004a37
 8004968:	08004a37 	.word	0x08004a37
 800496c:	08004a37 	.word	0x08004a37
 8004970:	08004a37 	.word	0x08004a37
 8004974:	08004a37 	.word	0x08004a37
 8004978:	08004a37 	.word	0x08004a37
 800497c:	08004a37 	.word	0x08004a37
 8004980:	08004a37 	.word	0x08004a37
 8004984:	08004a37 	.word	0x08004a37
 8004988:	08004999 	.word	0x08004999
 800498c:	080049e3 	.word	0x080049e3
 8004990:	08004a37 	.word	0x08004a37
 8004994:	08004a37 	.word	0x08004a37
  case CLEAR_COMM_FEATURE:
    /* Not  needed for this driver */
    break;

  case SET_LINE_CODING:
    linecoding.bitrate = (uint32_t)(Buf[0] | (Buf[1] << 8) | (Buf[2] << 16) | (Buf[3] << 24));
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	3301      	adds	r3, #1
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	431a      	orrs	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	3302      	adds	r3, #2
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	041b      	lsls	r3, r3, #16
 80049b0:	431a      	orrs	r2, r3
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	3303      	adds	r3, #3
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	061b      	lsls	r3, r3, #24
 80049ba:	4313      	orrs	r3, r2
 80049bc:	461a      	mov	r2, r3
 80049be:	4b22      	ldr	r3, [pc, #136]	; (8004a48 <VCP_Ctrl+0x15c>)
 80049c0:	601a      	str	r2, [r3, #0]
    linecoding.format = Buf[4];
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	791a      	ldrb	r2, [r3, #4]
 80049c6:	4b20      	ldr	r3, [pc, #128]	; (8004a48 <VCP_Ctrl+0x15c>)
 80049c8:	711a      	strb	r2, [r3, #4]
    linecoding.paritytype = Buf[5];
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	795a      	ldrb	r2, [r3, #5]
 80049ce:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <VCP_Ctrl+0x15c>)
 80049d0:	715a      	strb	r2, [r3, #5]
    linecoding.datatype = Buf[6];
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	799a      	ldrb	r2, [r3, #6]
 80049d6:	4b1c      	ldr	r3, [pc, #112]	; (8004a48 <VCP_Ctrl+0x15c>)
 80049d8:	719a      	strb	r2, [r3, #6]
	linecoding.changed = 1;
 80049da:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <VCP_Ctrl+0x15c>)
 80049dc:	2201      	movs	r2, #1
 80049de:	71da      	strb	r2, [r3, #7]
  
    //VCP_COMConfig(OTHER_CONFIG);
    break;
 80049e0:	e02a      	b.n	8004a38 <VCP_Ctrl+0x14c>

  case GET_LINE_CODING:
    Buf[0] = (uint8_t)(linecoding.bitrate);
 80049e2:	4b19      	ldr	r3, [pc, #100]	; (8004a48 <VCP_Ctrl+0x15c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	701a      	strb	r2, [r3, #0]
    Buf[1] = (uint8_t)(linecoding.bitrate >> 8);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	3301      	adds	r3, #1
 80049f0:	4a15      	ldr	r2, [pc, #84]	; (8004a48 <VCP_Ctrl+0x15c>)
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	0a12      	lsrs	r2, r2, #8
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]
    Buf[2] = (uint8_t)(linecoding.bitrate >> 16);
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	3302      	adds	r3, #2
 80049fe:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <VCP_Ctrl+0x15c>)
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	0c12      	lsrs	r2, r2, #16
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	701a      	strb	r2, [r3, #0]
    Buf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	3303      	adds	r3, #3
 8004a0c:	4a0e      	ldr	r2, [pc, #56]	; (8004a48 <VCP_Ctrl+0x15c>)
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	0e12      	lsrs	r2, r2, #24
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]
    Buf[4] = linecoding.format;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	4a0b      	ldr	r2, [pc, #44]	; (8004a48 <VCP_Ctrl+0x15c>)
 8004a1c:	7912      	ldrb	r2, [r2, #4]
 8004a1e:	701a      	strb	r2, [r3, #0]
    Buf[5] = linecoding.paritytype;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	3305      	adds	r3, #5
 8004a24:	4a08      	ldr	r2, [pc, #32]	; (8004a48 <VCP_Ctrl+0x15c>)
 8004a26:	7952      	ldrb	r2, [r2, #5]
 8004a28:	701a      	strb	r2, [r3, #0]
    Buf[6] = linecoding.datatype; 
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	3306      	adds	r3, #6
 8004a2e:	4a06      	ldr	r2, [pc, #24]	; (8004a48 <VCP_Ctrl+0x15c>)
 8004a30:	7992      	ldrb	r2, [r2, #6]
 8004a32:	701a      	strb	r2, [r3, #0]
    break;
 8004a34:	e000      	b.n	8004a38 <VCP_Ctrl+0x14c>
  case SEND_BREAK:
    /* Not  needed for this driver */
    break;    
    
  default:
    break;
 8004a36:	bf00      	nop
  }

  return USBD_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	20000108 	.word	0x20000108

08004a4c <VCP_DataTx>:
  *         this function.
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
  */
uint16_t VCP_DataTx (uint8_t* Buf, uint32_t Len) {
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
	uint32_t tx_counter = 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
	
	while (tx_counter < Len) {
 8004a5a:	e017      	b.n	8004a8c <VCP_DataTx+0x40>
		APP_Rx_Buffer[APP_Rx_ptr_in] = *(Buf+tx_counter);
 8004a5c:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <VCP_DataTx+0x58>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	440a      	add	r2, r1
 8004a66:	7811      	ldrb	r1, [r2, #0]
 8004a68:	4a0f      	ldr	r2, [pc, #60]	; (8004aa8 <VCP_DataTx+0x5c>)
 8004a6a:	54d1      	strb	r1, [r2, r3]
		
		APP_Rx_ptr_in++;
 8004a6c:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <VCP_DataTx+0x58>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3301      	adds	r3, #1
 8004a72:	4a0c      	ldr	r2, [pc, #48]	; (8004aa4 <VCP_DataTx+0x58>)
 8004a74:	6013      	str	r3, [r2, #0]
		
		/* To avoid buffer overflow */
		if (APP_Rx_ptr_in >= APP_RX_DATA_SIZE) {
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <VCP_DataTx+0x58>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a7e:	d302      	bcc.n	8004a86 <VCP_DataTx+0x3a>
			APP_Rx_ptr_in = 0;
 8004a80:	4b08      	ldr	r3, [pc, #32]	; (8004aa4 <VCP_DataTx+0x58>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
		}
		
		tx_counter++;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	60fb      	str	r3, [r7, #12]
  * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
  */
uint16_t VCP_DataTx (uint8_t* Buf, uint32_t Len) {
	uint32_t tx_counter = 0;
	
	while (tx_counter < Len) {
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d3e3      	bcc.n	8004a5c <VCP_DataTx+0x10>
		}
		
		tx_counter++;
	}
	
	return USBD_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	200001e4 	.word	0x200001e4
 8004aa8:	20000920 	.word	0x20000920

08004aac <VCP_DataRx>:
  *                 
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
  */
uint16_t VCP_DataRx (uint8_t* Buf, uint32_t Len) {
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
	uint32_t i;
	for (i = 0; i < Len; i++) {
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	e009      	b.n	8004ad0 <VCP_DataRx+0x24>
		/* Add data to internal buffer */
		TM_INT_USB_VCP_AddReceived(*(Buf + i));
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fd fbd7 	bl	8002278 <TM_INT_USB_VCP_AddReceived>
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
  */
uint16_t VCP_DataRx (uint8_t* Buf, uint32_t Len) {
	uint32_t i;
	for (i = 0; i < Len; i++) {
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3301      	adds	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d3f1      	bcc.n	8004abc <VCP_DataRx+0x10>
		/* Add data to internal buffer */
		TM_INT_USB_VCP_AddReceived(*(Buf + i));
	}
	
	return USBD_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop

08004ae4 <USBD_Init>:
void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	460b      	mov	r3, r1
 8004af2:	72fb      	strb	r3, [r7, #11]
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f7fd fbed 	bl	80022d4 <USB_OTG_BSP_Init>
  
  USBD_DeInit(pdev);
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f81e 	bl	8004b3c <USBD_DeInit>
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
  pdev->dev.usr_cb = usr_cb;  
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
  pdev->dev.usr_device = pDevice;    
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 8004b18:	7afb      	ldrb	r3, [r7, #11]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7fe fda1 	bl	8003664 <DCD_Init>
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4798      	blx	r3
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f7fd fc29 	bl	8002384 <USB_OTG_BSP_EnableInterrupt>
}
 8004b32:	bf00      	nop
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop

08004b3c <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_Status USBD_DeInit(USB_OTG_CORE_HANDLE *pdev)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Software Init */
  
  return USBD_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop

08004b54 <USBD_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 8004b5c:	f107 0308 	add.w	r3, r7, #8
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fedc 	bl	8005920 <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 8004b68:	7a3b      	ldrb	r3, [r7, #8]
 8004b6a:	f003 031f 	and.w	r3, r3, #31
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d00a      	beq.n	8004b88 <USBD_SetupStage+0x34>
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d00f      	beq.n	8004b96 <USBD_SetupStage+0x42>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d114      	bne.n	8004ba4 <USBD_SetupStage+0x50>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 8004b7a:	f107 0308 	add.w	r3, r7, #8
 8004b7e:	4619      	mov	r1, r3
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 faf7 	bl	8005174 <USBD_StdDevReq>
    break;
 8004b86:	e016      	b.n	8004bb6 <USBD_SetupStage+0x62>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 8004b88:	f107 0308 	add.w	r3, r7, #8
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fb40 	bl	8005214 <USBD_StdItfReq>
    break;
 8004b94:	e00f      	b.n	8004bb6 <USBD_SetupStage+0x62>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 8004b96:	f107 0308 	add.w	r3, r7, #8
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fb6d 	bl	800527c <USBD_StdEPReq>
    break;
 8004ba2:	e008      	b.n	8004bb6 <USBD_SetupStage+0x62>
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 8004ba4:	7a3b      	ldrb	r3, [r7, #8]
 8004ba6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	4619      	mov	r1, r3
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fe feee 	bl	8003990 <DCD_EP_Stall>
    break;
 8004bb4:	bf00      	nop
  }  
  return USBD_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <USBD_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d144      	bne.n	8004c5c <USBD_DataOutStage+0x9c>
  {
    ep = &pdev->dev.out_ep[0];
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8004bd8:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d14e      	bne.n	8004c82 <USBD_DataOutStage+0xc2>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	69da      	ldr	r2, [r3, #28]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d920      	bls.n	8004c32 <USBD_DataOutStage+0x72>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	1ad2      	subs	r2, r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	61da      	str	r2, [r3, #28]
        
        if(pdev->cfg.dma_enable == 1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	78db      	ldrb	r3, [r3, #3]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d106      	bne.n	8004c14 <USBD_DataOutStage+0x54>
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	441a      	add	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	60da      	str	r2, [r3, #12]
        }        
        USBD_CtlContinueRx (pdev, 
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	68d9      	ldr	r1, [r3, #12]
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	4293      	cmp	r3, r2
 8004c22:	bf28      	it	cs
 8004c24:	4613      	movcs	r3, r2
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
        }        
        USBD_CtlContinueRx (pdev, 
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	461a      	mov	r2, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fa5e 	bl	80050ec <USBD_CtlContinueRx>
 8004c30:	e027      	b.n	8004c82 <USBD_DataOutStage+0xc2>
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <USBD_DataOutStage+0x94>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d105      	bne.n	8004c54 <USBD_DataOutStage+0x94>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fa5d 	bl	8005114 <USBD_CtlSendStatus>
 8004c5a:	e012      	b.n	8004c82 <USBD_DataOutStage+0xc2>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00c      	beq.n	8004c82 <USBD_DataOutStage+0xc2>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d107      	bne.n	8004c82 <USBD_DataOutStage+0xc2>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	4798      	blx	r3
  }  
  return USBD_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <USBD_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d16b      	bne.n	8004d76 <USBD_DataInStage+0xea>
  {
    ep = &pdev->dev.in_ep[0];
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004ca4:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d155      	bne.n	8004d5c <USBD_DataInStage+0xd0>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d91b      	bls.n	8004cf4 <USBD_DataInStage+0x68>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	1ad2      	subs	r2, r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	61da      	str	r2, [r3, #28]
        if(pdev->cfg.dma_enable == 1)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	78db      	ldrb	r3, [r3, #3]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d106      	bne.n	8004ce0 <USBD_DataInStage+0x54>
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	441a      	add	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	60da      	str	r2, [r3, #12]
        }
        USBD_CtlContinueSendData (pdev, 
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	68d9      	ldr	r1, [r3, #12]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	69db      	ldr	r3, [r3, #28]
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
        }
        USBD_CtlContinueSendData (pdev, 
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	461a      	mov	r2, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f9c9 	bl	8005084 <USBD_CtlContinueSendData>
 8004cf2:	e033      	b.n	8004d5c <USBD_DataInStage+0xd0>
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	6892      	ldr	r2, [r2, #8]
 8004cfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d00:	fb02 f201 	mul.w	r2, r2, r1
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d114      	bne.n	8004d34 <USBD_DataInStage+0xa8>
           (ep->total_data_len >= ep->maxpacket) &&
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1a      	ldr	r2, [r3, #32]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	689b      	ldr	r3, [r3, #8]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d30e      	bcc.n	8004d34 <USBD_DataInStage+0xa8>
           (ep->total_data_len >= ep->maxpacket) &&
             (ep->total_data_len < ep->ctl_data_len ))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1a      	ldr	r2, [r3, #32]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
           (ep->total_data_len >= ep->maxpacket) &&
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d208      	bcs.n	8004d34 <USBD_DataInStage+0xa8>
             (ep->total_data_len < ep->ctl_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004d22:	2200      	movs	r2, #0
 8004d24:	2100      	movs	r1, #0
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f9ac 	bl	8005084 <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	625a      	str	r2, [r3, #36]	; 0x24
 8004d32:	e013      	b.n	8004d5c <USBD_DataInStage+0xd0>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <USBD_DataInStage+0xca>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
          USBD_CtlContinueSendData(pdev , NULL, 0);
          ep->ctl_data_len = 0;
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d105      	bne.n	8004d56 <USBD_DataInStage+0xca>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f9f4 	bl	8005144 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev.test_mode == 1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d11a      	bne.n	8004d9c <USBD_DataInStage+0x110>
    {
      USBD_RunTestMode(pdev); 
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f81e 	bl	8004da8 <USBD_RunTestMode>
      pdev->dev.test_mode = 0;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 8004d74:	e012      	b.n	8004d9c <USBD_DataInStage+0x110>
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00c      	beq.n	8004d9c <USBD_DataInStage+0x110>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
    {
      USBD_RunTestMode(pdev); 
      pdev->dev.test_mode = 0;
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d107      	bne.n	8004d9c <USBD_DataInStage+0x110>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	78fa      	ldrb	r2, [r7, #3]
 8004d96:	4611      	mov	r1, r2
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	4798      	blx	r3
  }  
  return USBD_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop

08004da8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	4a04      	ldr	r2, [pc, #16]	; (8004dc8 <USBD_RunTestMode+0x20>)
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	605a      	str	r2, [r3, #4]
  return USBD_OK;  
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	20001120 	.word	0x20001120

08004dcc <USBD_Reset>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	2240      	movs	r2, #64	; 0x40
 8004dd8:	2100      	movs	r1, #0
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fe fcc6 	bl	800376c <DCD_EP_Open>
              0x00,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 8004de0:	2300      	movs	r3, #0
 8004de2:	2240      	movs	r2, #64	; 0x40
 8004de4:	2180      	movs	r1, #128	; 0x80
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fe fcc0 	bl	800376c <DCD_EP_Open>
              0x80,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	7892      	ldrb	r2, [r2, #2]
 8004e00:	4610      	mov	r0, r2
 8004e02:	4798      	blx	r3
  
  return USBD_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop

08004e10 <USBD_Resume>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	4798      	blx	r3
  pdev->dev.device_status = pdev->dev.device_old_status;  
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 2113 	ldrb.w	r2, [r3, #275]	; 0x113
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2203      	movs	r2, #3
 8004e32:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  return USBD_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <USBD_Suspend>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  pdev->dev.device_old_status = pdev->dev.device_status;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 2112 	ldrb.w	r2, [r3, #274]	; 0x112
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2204      	movs	r2, #4
 8004e58:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4798      	blx	r3
  return USBD_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <USBD_SOF>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  if(pdev->dev.class_cb->SOF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <USBD_SOF+0x20>
  {
    pdev->dev.class_cb->SOF(pdev); 
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	4798      	blx	r3
  }
  return USBD_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop

08004e9c <USBD_SetCfg>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	78fa      	ldrb	r2, [r7, #3]
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
  
  /* Upon set config call usr call back */
  pdev->dev.usr_cb->DeviceConfigured();
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	4798      	blx	r3
  return USBD_OK; 
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <USBD_ClrCfg>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_Status
*/
USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	78fa      	ldrb	r2, [r7, #3]
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	4798      	blx	r3
  return USBD_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop

08004ef4 <USBD_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4798      	blx	r3
  return USBD_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop

08004f14 <USBD_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	4798      	blx	r3
  return USBD_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop

08004f34 <USBD_USR_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	6039      	str	r1, [r7, #0]
 8004f3e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_DeviceDesc);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2212      	movs	r2, #18
 8004f44:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8004f46:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <USBD_USR_DeviceDescriptor+0x20>)
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	20000170 	.word	0x20000170

08004f58 <USBD_USR_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	6039      	str	r1, [r7, #0]
 8004f62:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2204      	movs	r2, #4
 8004f68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004f6a:	4b03      	ldr	r3, [pc, #12]	; (8004f78 <USBD_USR_LangIDStrDescriptor+0x20>)
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	20000184 	.word	0x20000184

08004f7c <USBD_USR_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	6039      	str	r1, [r7, #0]
 8004f86:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	4904      	ldr	r1, [pc, #16]	; (8004f9c <USBD_USR_ProductStrDescriptor+0x20>)
 8004f8c:	4804      	ldr	r0, [pc, #16]	; (8004fa0 <USBD_USR_ProductStrDescriptor+0x24>)
 8004f8e:	f000 fd25 	bl	80059dc <USBD_GetString>
  return USBD_StrDesc;
 8004f92:	4b02      	ldr	r3, [pc, #8]	; (8004f9c <USBD_USR_ProductStrDescriptor+0x20>)
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	20001124 	.word	0x20001124
 8004fa0:	08005e44 	.word	0x08005e44

08004fa4 <USBD_USR_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	6039      	str	r1, [r7, #0]
 8004fae:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	4904      	ldr	r1, [pc, #16]	; (8004fc4 <USBD_USR_ManufacturerStrDescriptor+0x20>)
 8004fb4:	4804      	ldr	r0, [pc, #16]	; (8004fc8 <USBD_USR_ManufacturerStrDescriptor+0x24>)
 8004fb6:	f000 fd11 	bl	80059dc <USBD_GetString>
  return USBD_StrDesc;
 8004fba:	4b02      	ldr	r3, [pc, #8]	; (8004fc4 <USBD_USR_ManufacturerStrDescriptor+0x20>)
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20001124 	.word	0x20001124
 8004fc8:	08005e68 	.word	0x08005e68

08004fcc <USBD_USR_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	6039      	str	r1, [r7, #0]
 8004fd6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);    
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	4904      	ldr	r1, [pc, #16]	; (8004fec <USBD_USR_SerialStrDescriptor+0x20>)
 8004fdc:	4804      	ldr	r0, [pc, #16]	; (8004ff0 <USBD_USR_SerialStrDescriptor+0x24>)
 8004fde:	f000 fcfd 	bl	80059dc <USBD_GetString>
  return USBD_StrDesc;
 8004fe2:	4b02      	ldr	r3, [pc, #8]	; (8004fec <USBD_USR_SerialStrDescriptor+0x20>)
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	20001124 	.word	0x20001124
 8004ff0:	08005e7c 	.word	0x08005e7c

08004ff4 <USBD_USR_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	6039      	str	r1, [r7, #0]
 8004ffe:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	4904      	ldr	r1, [pc, #16]	; (8005014 <USBD_USR_ConfigStrDescriptor+0x20>)
 8005004:	4804      	ldr	r0, [pc, #16]	; (8005018 <USBD_USR_ConfigStrDescriptor+0x24>)
 8005006:	f000 fce9 	bl	80059dc <USBD_GetString>
  return USBD_StrDesc;  
 800500a:	4b02      	ldr	r3, [pc, #8]	; (8005014 <USBD_USR_ConfigStrDescriptor+0x20>)
}
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	20001124 	.word	0x20001124
 8005018:	08005e8c 	.word	0x08005e8c

0800501c <USBD_USR_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	4603      	mov	r3, r0
 8005024:	6039      	str	r1, [r7, #0]
 8005026:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	4904      	ldr	r1, [pc, #16]	; (800503c <USBD_USR_InterfaceStrDescriptor+0x20>)
 800502c:	4804      	ldr	r0, [pc, #16]	; (8005040 <USBD_USR_InterfaceStrDescriptor+0x24>)
 800502e:	f000 fcd5 	bl	80059dc <USBD_GetString>
  return USBD_StrDesc;  
 8005032:	4b02      	ldr	r3, [pc, #8]	; (800503c <USBD_USR_InterfaceStrDescriptor+0x20>)
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20001124 	.word	0x20001124
 8005040:	08005e98 	.word	0x08005e98

08005044 <USBD_CtlSendData>:
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	4613      	mov	r3, r2
 8005050:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	75fb      	strb	r3, [r7, #23]
  
  pdev->dev.in_ep[0].total_data_len = len;
 8005056:	88fa      	ldrh	r2, [r7, #6]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  pdev->dev.in_ep[0].rem_data_len   = len;
 800505e:	88fa      	ldrh	r2, [r7, #6]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2202      	movs	r2, #2
 800506a:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111

  DCD_EP_Tx (pdev, 0, pbuf, len);
 800506e:	88fb      	ldrh	r3, [r7, #6]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	2100      	movs	r1, #0
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7fe fc4f 	bl	8003918 <DCD_EP_Tx>
 
  return ret;
 800507a:	7dfb      	ldrb	r3, [r7, #23]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	4613      	mov	r3, r2
 8005090:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	2100      	movs	r1, #0
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7fe fc3b 	bl	8003918 <DCD_EP_Tx>
  
  
  return ret;
 80050a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_Status  USBD_CtlPrepareRx (USB_OTG_CORE_HANDLE  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	4613      	mov	r3, r2
 80050b8:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	75fb      	strb	r3, [r7, #23]
  
  pdev->dev.out_ep[0].total_data_len = len;
 80050be:	88fa      	ldrh	r2, [r7, #6]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
  pdev->dev.out_ep[0].rem_data_len   = len;
 80050c6:	88fa      	ldrh	r2, [r7, #6]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
  pdev->dev.device_state = USB_OTG_EP0_DATA_OUT;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2203      	movs	r2, #3
 80050d2:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  
  DCD_EP_PrepareRx (pdev,
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	2100      	movs	r1, #0
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f7fe fbd9 	bl	8003894 <DCD_EP_PrepareRx>
                    0,
                    pbuf,
                    len);
  

  return ret;
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <USBD_CtlContinueRx>:
* @retval status
*/
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_PrepareRx (pdev,
 80050fe:	88fb      	ldrh	r3, [r7, #6]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	2100      	movs	r1, #0
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7fe fbc5 	bl	8003894 <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
 800510a:	7dfb      	ldrb	r3, [r7, #23]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2204      	movs	r2, #4
 8005124:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_Tx (pdev,
 8005128:	2300      	movs	r3, #0
 800512a:	2200      	movs	r2, #0
 800512c:	2100      	movs	r1, #0
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fe fbf2 	bl	8003918 <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7fe fa5b 	bl	80035f0 <USB_OTG_EP0_OutStart>
  
  return ret;
 800513a:	7bfb      	ldrb	r3, [r7, #15]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2205      	movs	r2, #5
 8005154:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_PrepareRx ( pdev,
 8005158:	2300      	movs	r3, #0
 800515a:	2200      	movs	r2, #0
 800515c:	2100      	movs	r1, #0
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fe fb98 	bl	8003894 <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7fe fa43 	bl	80035f0 <USB_OTG_EP0_OutStart>
  
  return ret;
 800516a:	7bfb      	ldrb	r3, [r7, #15]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK;  
 800517e:	2300      	movs	r3, #0
 8005180:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	785b      	ldrb	r3, [r3, #1]
 8005186:	2b09      	cmp	r3, #9
 8005188:	d839      	bhi.n	80051fe <USBD_StdDevReq+0x8a>
 800518a:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <USBD_StdDevReq+0x1c>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051e1 	.word	0x080051e1
 8005194:	080051f5 	.word	0x080051f5
 8005198:	080051ff 	.word	0x080051ff
 800519c:	080051eb 	.word	0x080051eb
 80051a0:	080051ff 	.word	0x080051ff
 80051a4:	080051c3 	.word	0x080051c3
 80051a8:	080051b9 	.word	0x080051b9
 80051ac:	080051ff 	.word	0x080051ff
 80051b0:	080051d7 	.word	0x080051d7
 80051b4:	080051cd 	.word	0x080051cd
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 80051b8:	6839      	ldr	r1, [r7, #0]
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f936 	bl	800542c <USBD_GetDescriptor>
    break;
 80051c0:	e022      	b.n	8005208 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 80051c2:	6839      	ldr	r1, [r7, #0]
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fa05 	bl	80055d4 <USBD_SetAddress>
    break;
 80051ca:	e01d      	b.n	8005208 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fa3e 	bl	8005650 <USBD_SetConfig>
    break;
 80051d4:	e018      	b.n	8005208 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 80051d6:	6839      	ldr	r1, [r7, #0]
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fab3 	bl	8005744 <USBD_GetConfig>
    break;
 80051de:	e013      	b.n	8005208 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 80051e0:	6839      	ldr	r1, [r7, #0]
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fade 	bl	80057a4 <USBD_GetStatus>
    break;
 80051e8:	e00e      	b.n	8005208 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 80051ea:	6839      	ldr	r1, [r7, #0]
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fb03 	bl	80057f8 <USBD_SetFeature>
    break;
 80051f2:	e009      	b.n	8005208 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fb6a 	bl	80058d0 <USBD_ClrFeature>
    break;
 80051fc:	e004      	b.n	8005208 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fbd7 	bl	80059b4 <USBD_CtlError>
    break;
 8005206:	bf00      	nop
  }
  
  return ret;
 8005208:	7bfb      	ldrb	r3, [r7, #15]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop

08005214 <USBD_StdItfReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK; 
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev.device_status) 
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005228:	2b03      	cmp	r3, #3
 800522a:	d11b      	bne.n	8005264 <USBD_StdItfReq+0x50>
  {
  case USB_OTG_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	889b      	ldrh	r3, [r3, #4]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b01      	cmp	r3, #1
 8005234:	d811      	bhi.n	800525a <USBD_StdItfReq+0x46>
    {
      pdev->dev.class_cb->Setup (pdev, req); 
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	6839      	ldr	r1, [r7, #0]
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	88db      	ldrh	r3, [r3, #6]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d110      	bne.n	800526e <USBD_StdItfReq+0x5a>
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10d      	bne.n	800526e <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7ff ff5e 	bl	8005114 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8005258:	e009      	b.n	800526e <USBD_StdItfReq+0x5a>
         USBD_CtlSendStatus(pdev);
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 800525a:	6839      	ldr	r1, [r7, #0]
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fba9 	bl	80059b4 <USBD_CtlError>
    }
    break;
 8005262:	e004      	b.n	800526e <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fba4 	bl	80059b4 <USBD_CtlError>
    break;
 800526c:	e000      	b.n	8005270 <USBD_StdItfReq+0x5c>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800526e:	bf00      	nop
    
  default:
     USBD_CtlError(pdev , req);
    break;
  }
  return ret;
 8005270:	7bfb      	ldrb	r3, [r7, #15]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop

0800527c <USBD_StdEPReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
 8005286:	2300      	movs	r3, #0
 8005288:	73fb      	strb	r3, [r7, #15]
  
  ep_addr  = LOBYTE(req->wIndex);   
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	889b      	ldrh	r3, [r3, #4]
 800528e:	73bb      	strb	r3, [r7, #14]
  
  switch (req->bRequest) 
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	785b      	ldrb	r3, [r3, #1]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d039      	beq.n	800530c <USBD_StdEPReq+0x90>
 8005298:	2b03      	cmp	r3, #3
 800529a:	d002      	beq.n	80052a2 <USBD_StdEPReq+0x26>
 800529c:	2b00      	cmp	r3, #0
 800529e:	d06c      	beq.n	800537a <USBD_StdEPReq+0xfe>
      break;
    }
    break;
    
  default:
    break;
 80052a0:	e0bd      	b.n	800541e <USBD_StdEPReq+0x1a2>
  switch (req->bRequest) 
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev.device_status) 
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d002      	beq.n	80052b2 <USBD_StdEPReq+0x36>
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d00c      	beq.n	80052ca <USBD_StdEPReq+0x4e>
 80052b0:	e025      	b.n	80052fe <USBD_StdEPReq+0x82>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80052b2:	7bbb      	ldrb	r3, [r7, #14]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d027      	beq.n	8005308 <USBD_StdEPReq+0x8c>
 80052b8:	7bbb      	ldrb	r3, [r7, #14]
 80052ba:	2b80      	cmp	r3, #128	; 0x80
 80052bc:	d024      	beq.n	8005308 <USBD_StdEPReq+0x8c>
      {
        DCD_EP_Stall(pdev , ep_addr);
 80052be:	7bbb      	ldrb	r3, [r7, #14]
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fe fb64 	bl	8003990 <DCD_EP_Stall>
      }
      break;	
 80052c8:	e01e      	b.n	8005308 <USBD_StdEPReq+0x8c>
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	885b      	ldrh	r3, [r3, #2]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10a      	bne.n	80052e8 <USBD_StdEPReq+0x6c>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80052d2:	7bbb      	ldrb	r3, [r7, #14]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <USBD_StdEPReq+0x6c>
 80052d8:	7bbb      	ldrb	r3, [r7, #14]
 80052da:	2b80      	cmp	r3, #128	; 0x80
 80052dc:	d004      	beq.n	80052e8 <USBD_StdEPReq+0x6c>
        { 
          DCD_EP_Stall(pdev , ep_addr);
 80052de:	7bbb      	ldrb	r3, [r7, #14]
 80052e0:	4619      	mov	r1, r3
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fe fb54 	bl	8003990 <DCD_EP_Stall>
          
        }
      }
      pdev->dev.class_cb->Setup (pdev, req);   
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	6839      	ldr	r1, [r7, #0]
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7ff ff0c 	bl	8005114 <USBD_CtlSendStatus>
      
      break;
 80052fc:	e005      	b.n	800530a <USBD_StdEPReq+0x8e>
      
    default:                         
      USBD_CtlError(pdev , req);
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fb57 	bl	80059b4 <USBD_CtlError>
      break;    
 8005306:	e000      	b.n	800530a <USBD_StdEPReq+0x8e>
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
 8005308:	bf00      	nop
      
    default:                         
      USBD_CtlError(pdev , req);
      break;    
    }
    break;
 800530a:	e088      	b.n	800541e <USBD_StdEPReq+0x1a2>
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev.device_status) 
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005312:	2b02      	cmp	r3, #2
 8005314:	d002      	beq.n	800531c <USBD_StdEPReq+0xa0>
 8005316:	2b03      	cmp	r3, #3
 8005318:	d00c      	beq.n	8005334 <USBD_StdEPReq+0xb8>
 800531a:	e025      	b.n	8005368 <USBD_StdEPReq+0xec>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800531c:	7bbb      	ldrb	r3, [r7, #14]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d027      	beq.n	8005372 <USBD_StdEPReq+0xf6>
 8005322:	7bbb      	ldrb	r3, [r7, #14]
 8005324:	2b80      	cmp	r3, #128	; 0x80
 8005326:	d024      	beq.n	8005372 <USBD_StdEPReq+0xf6>
      {
        DCD_EP_Stall(pdev , ep_addr);
 8005328:	7bbb      	ldrb	r3, [r7, #14]
 800532a:	4619      	mov	r1, r3
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7fe fb2f 	bl	8003990 <DCD_EP_Stall>
      }
      break;	
 8005332:	e01e      	b.n	8005372 <USBD_StdEPReq+0xf6>
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	885b      	ldrh	r3, [r3, #2]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d11c      	bne.n	8005376 <USBD_StdEPReq+0xfa>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800533c:	7bbb      	ldrb	r3, [r7, #14]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00e      	beq.n	8005360 <USBD_StdEPReq+0xe4>
 8005342:	7bbb      	ldrb	r3, [r7, #14]
 8005344:	2b80      	cmp	r3, #128	; 0x80
 8005346:	d00b      	beq.n	8005360 <USBD_StdEPReq+0xe4>
        {        
          DCD_EP_ClrStall(pdev , ep_addr);
 8005348:	7bbb      	ldrb	r3, [r7, #14]
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7fe fb5d 	bl	8003a0c <DCD_EP_ClrStall>
          pdev->dev.class_cb->Setup (pdev, req);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	6839      	ldr	r1, [r7, #0]
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff fed7 	bl	8005114 <USBD_CtlSendStatus>
      }
      break;
 8005366:	e006      	b.n	8005376 <USBD_StdEPReq+0xfa>
      
    default:                         
       USBD_CtlError(pdev , req);
 8005368:	6839      	ldr	r1, [r7, #0]
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fb22 	bl	80059b4 <USBD_CtlError>
      break;    
 8005370:	e002      	b.n	8005378 <USBD_StdEPReq+0xfc>
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
 8005372:	bf00      	nop
 8005374:	e053      	b.n	800541e <USBD_StdEPReq+0x1a2>
          DCD_EP_ClrStall(pdev , ep_addr);
          pdev->dev.class_cb->Setup (pdev, req);
        }
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005376:	bf00      	nop
      
    default:                         
       USBD_CtlError(pdev , req);
      break;    
    }
    break;
 8005378:	e051      	b.n	800541e <USBD_StdEPReq+0x1a2>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev.device_status) 
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005380:	2b02      	cmp	r3, #2
 8005382:	d002      	beq.n	800538a <USBD_StdEPReq+0x10e>
 8005384:	2b03      	cmp	r3, #3
 8005386:	d00c      	beq.n	80053a2 <USBD_StdEPReq+0x126>
 8005388:	e042      	b.n	8005410 <USBD_StdEPReq+0x194>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800538a:	7bbb      	ldrb	r3, [r7, #14]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d044      	beq.n	800541a <USBD_StdEPReq+0x19e>
 8005390:	7bbb      	ldrb	r3, [r7, #14]
 8005392:	2b80      	cmp	r3, #128	; 0x80
 8005394:	d041      	beq.n	800541a <USBD_StdEPReq+0x19e>
      {
        DCD_EP_Stall(pdev , ep_addr);
 8005396:	7bbb      	ldrb	r3, [r7, #14]
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fe faf8 	bl	8003990 <DCD_EP_Stall>
      }
      break;	
 80053a0:	e03b      	b.n	800541a <USBD_StdEPReq+0x19e>
      
    case USB_OTG_CONFIGURED:         
      
      
      if ((ep_addr & 0x80)== 0x80)
 80053a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	da15      	bge.n	80053d6 <USBD_StdEPReq+0x15a>
      {
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 80053aa:	7bbb      	ldrb	r3, [r7, #14]
 80053ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	440b      	add	r3, r1
 80053bc:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <USBD_StdEPReq+0x152>
        {
          USBD_ep_status = 0x0001;     
 80053c6:	4b18      	ldr	r3, [pc, #96]	; (8005428 <USBD_StdEPReq+0x1ac>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	e01a      	b.n	8005404 <USBD_StdEPReq+0x188>
        }
        else
        {
          USBD_ep_status = 0x0000;  
 80053ce:	4b16      	ldr	r3, [pc, #88]	; (8005428 <USBD_StdEPReq+0x1ac>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	e016      	b.n	8005404 <USBD_StdEPReq+0x188>
        }
      }
      else if ((ep_addr & 0x80)== 0x00)
 80053d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	db12      	blt.n	8005404 <USBD_StdEPReq+0x188>
      {
        if(pdev->dev.out_ep[ep_addr].is_stall)
 80053de:	7bba      	ldrb	r2, [r7, #14]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	440b      	add	r3, r1
 80053ec:	f203 3376 	addw	r3, r3, #886	; 0x376
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <USBD_StdEPReq+0x182>
        {
          USBD_ep_status = 0x0001;     
 80053f6:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <USBD_StdEPReq+0x1ac>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	e002      	b.n	8005404 <USBD_StdEPReq+0x188>
        }
        
        else 
        {
          USBD_ep_status = 0x0000;     
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <USBD_StdEPReq+0x1ac>)
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
        }      
      }
      USBD_CtlSendData (pdev,
 8005404:	2202      	movs	r2, #2
 8005406:	4908      	ldr	r1, [pc, #32]	; (8005428 <USBD_StdEPReq+0x1ac>)
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fe1b 	bl	8005044 <USBD_CtlSendData>
                        (uint8_t *)&USBD_ep_status,
                        2);
      break;
 800540e:	e005      	b.n	800541c <USBD_StdEPReq+0x1a0>
      
    default:                         
       USBD_CtlError(pdev , req);
 8005410:	6839      	ldr	r1, [r7, #0]
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 face 	bl	80059b4 <USBD_CtlError>
      break;
 8005418:	e000      	b.n	800541c <USBD_StdEPReq+0x1a0>
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
 800541a:	bf00      	nop
      
    default:                         
       USBD_CtlError(pdev , req);
      break;
    }
    break;
 800541c:	bf00      	nop
    
  default:
    break;
  }
  return ret;
 800541e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	200001fc 	.word	0x200001fc

0800542c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USB_OTG_CORE_HANDLE  *pdev, 
                               USB_SETUP_REQ *req)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	885b      	ldrh	r3, [r3, #2]
 800543a:	0a1b      	lsrs	r3, r3, #8
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b01      	subs	r3, #1
 8005440:	2b06      	cmp	r3, #6
 8005442:	f200 80a9 	bhi.w	8005598 <USBD_GetDescriptor+0x16c>
 8005446:	a201      	add	r2, pc, #4	; (adr r2, 800544c <USBD_GetDescriptor+0x20>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	08005469 	.word	0x08005469
 8005450:	08005499 	.word	0x08005499
 8005454:	080054c1 	.word	0x080054c1
 8005458:	08005599 	.word	0x08005599
 800545c:	08005599 	.word	0x08005599
 8005460:	08005585 	.word	0x08005585
 8005464:	0800558f 	.word	0x0800558f
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	7892      	ldrb	r2, [r2, #2]
 8005474:	f107 010a 	add.w	r1, r7, #10
 8005478:	4610      	mov	r0, r2
 800547a:	4798      	blx	r3
 800547c:	60f8      	str	r0, [r7, #12]
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	88db      	ldrh	r3, [r3, #6]
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	d005      	beq.n	8005492 <USBD_GetDescriptor+0x66>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800548c:	2b01      	cmp	r3, #1
 800548e:	f040 8088 	bne.w	80055a2 <USBD_GetDescriptor+0x176>
    {                  
      len = 8;
 8005492:	2308      	movs	r3, #8
 8005494:	817b      	strh	r3, [r7, #10]
    }
    break;
 8005496:	e084      	b.n	80055a2 <USBD_GetDescriptor+0x176>
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	7892      	ldrb	r2, [r2, #2]
 80054a4:	f107 010a 	add.w	r1, r7, #10
 80054a8:	4610      	mov	r0, r2
 80054aa:	4798      	blx	r3
 80054ac:	60f8      	str	r0, [r7, #12]
       (pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY))
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3301      	adds	r3, #1
 80054b2:	2202      	movs	r2, #2
 80054b4:	701a      	strb	r2, [r3, #0]
    pdev->dev.pConfig_descriptor = pbuf;    
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
    break;
 80054be:	e071      	b.n	80055a4 <USBD_GetDescriptor+0x178>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	885b      	ldrh	r3, [r3, #2]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	d856      	bhi.n	8005578 <USBD_GetDescriptor+0x14c>
 80054ca:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <USBD_GetDescriptor+0xa4>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	080054e9 	.word	0x080054e9
 80054d4:	08005501 	.word	0x08005501
 80054d8:	08005519 	.word	0x08005519
 80054dc:	08005531 	.word	0x08005531
 80054e0:	08005549 	.word	0x08005549
 80054e4:	08005561 	.word	0x08005561
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	7892      	ldrb	r2, [r2, #2]
 80054f4:	f107 010a 	add.w	r1, r7, #10
 80054f8:	4610      	mov	r0, r2
 80054fa:	4798      	blx	r3
 80054fc:	60f8      	str	r0, [r7, #12]
      break;
 80054fe:	e040      	b.n	8005582 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	7892      	ldrb	r2, [r2, #2]
 800550c:	f107 010a 	add.w	r1, r7, #10
 8005510:	4610      	mov	r0, r2
 8005512:	4798      	blx	r3
 8005514:	60f8      	str	r0, [r7, #12]
      break;
 8005516:	e034      	b.n	8005582 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	7892      	ldrb	r2, [r2, #2]
 8005524:	f107 010a 	add.w	r1, r7, #10
 8005528:	4610      	mov	r0, r2
 800552a:	4798      	blx	r3
 800552c:	60f8      	str	r0, [r7, #12]
      break;
 800552e:	e028      	b.n	8005582 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	7892      	ldrb	r2, [r2, #2]
 800553c:	f107 010a 	add.w	r1, r7, #10
 8005540:	4610      	mov	r0, r2
 8005542:	4798      	blx	r3
 8005544:	60f8      	str	r0, [r7, #12]
      break;
 8005546:	e01c      	b.n	8005582 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	7892      	ldrb	r2, [r2, #2]
 8005554:	f107 010a 	add.w	r1, r7, #10
 8005558:	4610      	mov	r0, r2
 800555a:	4798      	blx	r3
 800555c:	60f8      	str	r0, [r7, #12]
      break;
 800555e:	e010      	b.n	8005582 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	7892      	ldrb	r2, [r2, #2]
 800556c:	f107 010a 	add.w	r1, r7, #10
 8005570:	4610      	mov	r0, r2
 8005572:	4798      	blx	r3
 8005574:	60f8      	str	r0, [r7, #12]
      break;
 8005576:	e004      	b.n	8005582 <USBD_GetDescriptor+0x156>
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->cfg.speed, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8005578:	6839      	ldr	r1, [r7, #0]
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fa1a 	bl	80059b4 <USBD_CtlError>
      return;
 8005580:	e025      	b.n	80055ce <USBD_GetDescriptor+0x1a2>
#endif /* USBD_CtlError(pdev , req); */      
    }
    break;
 8005582:	e00f      	b.n	80055a4 <USBD_GetDescriptor+0x178>
    {
      USBD_CtlError(pdev , req);
      return;
    }
#else
      USBD_CtlError(pdev , req);
 8005584:	6839      	ldr	r1, [r7, #0]
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fa14 	bl	80059b4 <USBD_CtlError>
      return;
 800558c:	e01f      	b.n	80055ce <USBD_GetDescriptor+0x1a2>
    {
      USBD_CtlError(pdev , req);
      return;
    }
#else
      USBD_CtlError(pdev , req);
 800558e:	6839      	ldr	r1, [r7, #0]
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fa0f 	bl	80059b4 <USBD_CtlError>
      return;
 8005596:	e01a      	b.n	80055ce <USBD_GetDescriptor+0x1a2>
#endif     

    
  default: 
     USBD_CtlError(pdev , req);
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fa0a 	bl	80059b4 <USBD_CtlError>
    return;
 80055a0:	e015      	b.n	80055ce <USBD_GetDescriptor+0x1a2>
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
    {                  
      len = 8;
    }
    break;
 80055a2:	bf00      	nop
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 80055a4:	897b      	ldrh	r3, [r7, #10]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d011      	beq.n	80055ce <USBD_GetDescriptor+0x1a2>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	88db      	ldrh	r3, [r3, #6]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00d      	beq.n	80055ce <USBD_GetDescriptor+0x1a2>
  {
    
    len = MIN(len , req->wLength);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	88da      	ldrh	r2, [r3, #6]
 80055b6:	897b      	ldrh	r3, [r7, #10]
 80055b8:	4293      	cmp	r3, r2
 80055ba:	bf28      	it	cs
 80055bc:	4613      	movcs	r3, r2
 80055be:	b29b      	uxth	r3, r3
 80055c0:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 80055c2:	897b      	ldrh	r3, [r7, #10]
 80055c4:	461a      	mov	r2, r3
 80055c6:	68f9      	ldr	r1, [r7, #12]
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff fd3b 	bl	8005044 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	889b      	ldrh	r3, [r3, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d12c      	bne.n	8005640 <USBD_SetAddress+0x6c>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	88db      	ldrh	r3, [r3, #6]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d128      	bne.n	8005640 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	885b      	ldrh	r3, [r3, #2]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055f8:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005600:	2b03      	cmp	r3, #3
 8005602:	d104      	bne.n	800560e <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8005604:	6839      	ldr	r1, [r7, #0]
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f9d4 	bl	80059b4 <USBD_CtlError>
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 800560c:	e01c      	b.n	8005648 <USBD_SetAddress+0x74>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	7bfa      	ldrb	r2, [r7, #15]
 8005612:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
      DCD_EP_SetAddress(pdev, dev_addr);               
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fe fa34 	bl	8003a88 <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff fd77 	bl	8005114 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8005626:	7bfb      	ldrb	r3, [r7, #15]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d004      	beq.n	8005636 <USBD_SetAddress+0x62>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8005634:	e008      	b.n	8005648 <USBD_SetAddress+0x74>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
      } 
      else 
      {
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 800563e:	e003      	b.n	8005648 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8005640:	6839      	ldr	r1, [r7, #0]
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9b6 	bl	80059b4 <USBD_CtlError>
  } 
}
 8005648:	bf00      	nop
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	885b      	ldrh	r3, [r3, #2]
 800565e:	b2da      	uxtb	r2, r3
 8005660:	4b37      	ldr	r3, [pc, #220]	; (8005740 <USBD_SetConfig+0xf0>)
 8005662:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 8005664:	4b36      	ldr	r3, [pc, #216]	; (8005740 <USBD_SetConfig+0xf0>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d904      	bls.n	8005676 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f9a0 	bl	80059b4 <USBD_CtlError>
    default:					
       USBD_CtlError(pdev , req);                     
      break;
    }
  }
}
 8005674:	e05f      	b.n	8005736 <USBD_SetConfig+0xe6>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev.device_status) 
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800567c:	2b02      	cmp	r3, #2
 800567e:	d002      	beq.n	8005686 <USBD_SetConfig+0x36>
 8005680:	2b03      	cmp	r3, #3
 8005682:	d01b      	beq.n	80056bc <USBD_SetConfig+0x6c>
 8005684:	e052      	b.n	800572c <USBD_SetConfig+0xdc>
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
 8005686:	4b2e      	ldr	r3, [pc, #184]	; (8005740 <USBD_SetConfig+0xf0>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d012      	beq.n	80056b4 <USBD_SetConfig+0x64>
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 800568e:	4b2c      	ldr	r3, [pc, #176]	; (8005740 <USBD_SetConfig+0xf0>)
 8005690:	781a      	ldrb	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2203      	movs	r2, #3
 800569c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        USBD_SetCfg(pdev , cfgidx);
 80056a0:	4b27      	ldr	r3, [pc, #156]	; (8005740 <USBD_SetConfig+0xf0>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	4619      	mov	r1, r3
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff fbf8 	bl	8004e9c <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff fd31 	bl	8005114 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80056b2:	e040      	b.n	8005736 <USBD_SetConfig+0xe6>
        USBD_SetCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff fd2d 	bl	8005114 <USBD_CtlSendStatus>
      }
      break;
 80056ba:	e03c      	b.n	8005736 <USBD_SetConfig+0xe6>
      
    case USB_OTG_CONFIGURED:
      if (cfgidx == 0) 
 80056bc:	4b20      	ldr	r3, [pc, #128]	; (8005740 <USBD_SetConfig+0xf0>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d112      	bne.n	80056ea <USBD_SetConfig+0x9a>
      {                           
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        pdev->dev.device_config = cfgidx;          
 80056cc:	4b1c      	ldr	r3, [pc, #112]	; (8005740 <USBD_SetConfig+0xf0>)
 80056ce:	781a      	ldrb	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_ClrCfg(pdev , cfgidx);
 80056d6:	4b1a      	ldr	r3, [pc, #104]	; (8005740 <USBD_SetConfig+0xf0>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	4619      	mov	r1, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff fbf5 	bl	8004ecc <USBD_ClrCfg>
        USBD_CtlSendStatus(pdev);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff fd16 	bl	8005114 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80056e8:	e025      	b.n	8005736 <USBD_SetConfig+0xe6>
        pdev->dev.device_config = cfgidx;          
        USBD_ClrCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev.device_config) 
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 80056f0:	4b13      	ldr	r3, [pc, #76]	; (8005740 <USBD_SetConfig+0xf0>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d015      	beq.n	8005724 <USBD_SetConfig+0xd4>
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff fbe3 	bl	8004ecc <USBD_ClrCfg>
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 8005706:	4b0e      	ldr	r3, [pc, #56]	; (8005740 <USBD_SetConfig+0xf0>)
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_SetCfg(pdev , cfgidx);
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <USBD_SetConfig+0xf0>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff fbc0 	bl	8004e9c <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff fcf9 	bl	8005114 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005722:	e008      	b.n	8005736 <USBD_SetConfig+0xe6>
        USBD_SetCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff fcf5 	bl	8005114 <USBD_CtlSendStatus>
      }
      break;
 800572a:	e004      	b.n	8005736 <USBD_SetConfig+0xe6>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f940 	bl	80059b4 <USBD_CtlError>
      break;
 8005734:	bf00      	nop
    }
  }
}
 8005736:	bf00      	nop
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20000208 	.word	0x20000208

08005744 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
 
  if (req->wLength != 1) 
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	88db      	ldrh	r3, [r3, #6]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d004      	beq.n	8005760 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8005756:	6839      	ldr	r1, [r7, #0]
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f92b 	bl	80059b4 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800575e:	e01b      	b.n	8005798 <USBD_GetConfig+0x54>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev.device_status )  
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8005766:	2b02      	cmp	r3, #2
 8005768:	d002      	beq.n	8005770 <USBD_GetConfig+0x2c>
 800576a:	2b03      	cmp	r3, #3
 800576c:	d006      	beq.n	800577c <USBD_GetConfig+0x38>
 800576e:	e00e      	b.n	800578e <USBD_GetConfig+0x4a>
    {
    case USB_OTG_ADDRESSED:                     
      
      USBD_CtlSendData (pdev, 
 8005770:	2201      	movs	r2, #1
 8005772:	490b      	ldr	r1, [pc, #44]	; (80057a0 <USBD_GetConfig+0x5c>)
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff fc65 	bl	8005044 <USBD_CtlSendData>
                        (uint8_t *)&USBD_default_cfg,
                        1);
      break;
 800577a:	e00d      	b.n	8005798 <USBD_GetConfig+0x54>
      
    case USB_OTG_CONFIGURED:                   
      
      USBD_CtlSendData (pdev, 
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005782:	2201      	movs	r2, #1
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff fc5c 	bl	8005044 <USBD_CtlSendData>
                        &pdev->dev.device_config,
                        1);
      break;
 800578c:	e004      	b.n	8005798 <USBD_GetConfig+0x54>
      
    default:
       USBD_CtlError(pdev , req);
 800578e:	6839      	ldr	r1, [r7, #0]
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f90f 	bl	80059b4 <USBD_CtlError>
      break;
 8005796:	bf00      	nop
    }
  }
}
 8005798:	bf00      	nop
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20000200 	.word	0x20000200

080057a4 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev.device_status) 
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80057b4:	3b02      	subs	r3, #2
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d813      	bhi.n	80057e2 <USBD_GetStatus+0x3e>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
 80057ba:	4b0e      	ldr	r3, [pc, #56]	; (80057f4 <USBD_GetStatus+0x50>)
 80057bc:	2201      	movs	r2, #1
 80057be:	601a      	str	r2, [r3, #0]
#else
    USBD_cfg_status = 0x00;                                    
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <USBD_GetStatus+0x32>
    {
      USBD_cfg_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80057ca:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <USBD_GetStatus+0x50>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f043 0302 	orr.w	r3, r3, #2
 80057d2:	4a08      	ldr	r2, [pc, #32]	; (80057f4 <USBD_GetStatus+0x50>)
 80057d4:	6013      	str	r3, [r2, #0]
    }
    
    USBD_CtlSendData (pdev, 
 80057d6:	2202      	movs	r2, #2
 80057d8:	4906      	ldr	r1, [pc, #24]	; (80057f4 <USBD_GetStatus+0x50>)
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff fc32 	bl	8005044 <USBD_CtlSendData>
                      (uint8_t *)&USBD_cfg_status,
                      2);
    break;
 80057e0:	e004      	b.n	80057ec <USBD_GetStatus+0x48>
    
  default :
    USBD_CtlError(pdev , req);                        
 80057e2:	6839      	ldr	r1, [r7, #0]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f8e5 	bl	80059b4 <USBD_CtlError>
    break;
 80057ea:	bf00      	nop
  }
}
 80057ec:	bf00      	nop
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	20000204 	.word	0x20000204

080057f8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]

  USB_OTG_DCTL_TypeDef     dctl;
  uint8_t test_mode = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	885b      	ldrh	r3, [r3, #2]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d10e      	bne.n	800582c <USBD_SetFeature+0x34>
  {
    pdev->dev.DevRemoteWakeup = 1;  
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    pdev->dev.class_cb->Setup (pdev, req);   
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7ff fc75 	bl	8005114 <USBD_CtlSendStatus>
    SET_TEST_MODE = dctl;
    pdev->dev.test_mode = 1;
    USBD_CtlSendStatus(pdev);
  }

}
 800582a:	e04b      	b.n	80058c4 <USBD_SetFeature+0xcc>
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	885b      	ldrh	r3, [r3, #2]
 8005830:	2b02      	cmp	r3, #2
 8005832:	d147      	bne.n	80058c4 <USBD_SetFeature+0xcc>
           ((req->wIndex & 0xFF) == 0))
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	889b      	ldrh	r3, [r3, #4]
 8005838:	b2db      	uxtb	r3, r3
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 800583a:	2b00      	cmp	r3, #0
 800583c:	d142      	bne.n	80058c4 <USBD_SetFeature+0xcc>
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	60bb      	str	r3, [r7, #8]
    
    test_mode = req->wIndex >> 8;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	889b      	ldrh	r3, [r3, #4]
 800584a:	0a1b      	lsrs	r3, r3, #8
 800584c:	b29b      	uxth	r3, r3
 800584e:	73fb      	strb	r3, [r7, #15]
    switch (test_mode) 
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	3b01      	subs	r3, #1
 8005854:	2b04      	cmp	r3, #4
 8005856:	d82b      	bhi.n	80058b0 <USBD_SetFeature+0xb8>
 8005858:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <USBD_SetFeature+0x68>)
 800585a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585e:	bf00      	nop
 8005860:	08005875 	.word	0x08005875
 8005864:	08005881 	.word	0x08005881
 8005868:	0800588d 	.word	0x0800588d
 800586c:	08005899 	.word	0x08005899
 8005870:	080058a5 	.word	0x080058a5
    {
    case 1: // TEST_J
      dctl.b.tstctl = 1;
 8005874:	7a3b      	ldrb	r3, [r7, #8]
 8005876:	2201      	movs	r2, #1
 8005878:	f362 1306 	bfi	r3, r2, #4, #3
 800587c:	723b      	strb	r3, [r7, #8]
      break;
 800587e:	e017      	b.n	80058b0 <USBD_SetFeature+0xb8>
      
    case 2: // TEST_K	
      dctl.b.tstctl = 2;
 8005880:	7a3b      	ldrb	r3, [r7, #8]
 8005882:	2202      	movs	r2, #2
 8005884:	f362 1306 	bfi	r3, r2, #4, #3
 8005888:	723b      	strb	r3, [r7, #8]
      break;
 800588a:	e011      	b.n	80058b0 <USBD_SetFeature+0xb8>
      
    case 3: // TEST_SE0_NAK
      dctl.b.tstctl = 3;
 800588c:	7a3b      	ldrb	r3, [r7, #8]
 800588e:	2203      	movs	r2, #3
 8005890:	f362 1306 	bfi	r3, r2, #4, #3
 8005894:	723b      	strb	r3, [r7, #8]
      break;
 8005896:	e00b      	b.n	80058b0 <USBD_SetFeature+0xb8>
      
    case 4: // TEST_PACKET
      dctl.b.tstctl = 4;
 8005898:	7a3b      	ldrb	r3, [r7, #8]
 800589a:	2204      	movs	r2, #4
 800589c:	f362 1306 	bfi	r3, r2, #4, #3
 80058a0:	723b      	strb	r3, [r7, #8]
      break;
 80058a2:	e005      	b.n	80058b0 <USBD_SetFeature+0xb8>
      
    case 5: // TEST_FORCE_ENABLE
      dctl.b.tstctl = 5;
 80058a4:	7a3b      	ldrb	r3, [r7, #8]
 80058a6:	2205      	movs	r2, #5
 80058a8:	f362 1306 	bfi	r3, r2, #4, #3
 80058ac:	723b      	strb	r3, [r7, #8]
      break;
 80058ae:	bf00      	nop
    }
    SET_TEST_MODE = dctl;
 80058b0:	4a06      	ldr	r2, [pc, #24]	; (80058cc <USBD_SetFeature+0xd4>)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	6013      	str	r3, [r2, #0]
    pdev->dev.test_mode = 1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    USBD_CtlSendStatus(pdev);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7ff fc28 	bl	8005114 <USBD_CtlSendStatus>
  }

}
 80058c4:	bf00      	nop
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	20001120 	.word	0x20001120

080058d0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev.device_status)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80058e0:	3b02      	subs	r3, #2
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d812      	bhi.n	800590c <USBD_ClrFeature+0x3c>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	885b      	ldrh	r3, [r3, #2]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d113      	bne.n	8005916 <USBD_ClrFeature+0x46>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
      pdev->dev.class_cb->Setup (pdev, req);   
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff fc05 	bl	8005114 <USBD_CtlSendStatus>
    }
    break;
 800590a:	e004      	b.n	8005916 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f850 	bl	80059b4 <USBD_CtlError>
    break;
 8005914:	e000      	b.n	8005918 <USBD_ClrFeature+0x48>
    {
      pdev->dev.DevRemoteWakeup = 0; 
      pdev->dev.class_cb->Setup (pdev, req);   
      USBD_CtlSendStatus(pdev);
    }
    break;
 8005916:	bf00      	nop
    
  default :
     USBD_CtlError(pdev , req);
    break;
  }
}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 25cc 	ldrb.w	r2, [r3, #1484]	; 0x5cc
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 25cd 	ldrb.w	r2, [r3, #1485]	; 0x5cd
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 35ce 	ldrb.w	r3, [r3, #1486]	; 0x5ce
 8005944:	b29a      	uxth	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 35cf 	ldrb.w	r3, [r3, #1487]	; 0x5cf
 800594c:	b29b      	uxth	r3, r3
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	b29b      	uxth	r3, r3
 8005952:	4413      	add	r3, r2
 8005954:	b29a      	uxth	r2, r3
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 35d0 	ldrb.w	r3, [r3, #1488]	; 0x5d0
 8005960:	b29a      	uxth	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 35d1 	ldrb.w	r3, [r3, #1489]	; 0x5d1
 8005968:	b29b      	uxth	r3, r3
 800596a:	021b      	lsls	r3, r3, #8
 800596c:	b29b      	uxth	r3, r3
 800596e:	4413      	add	r3, r2
 8005970:	b29a      	uxth	r2, r3
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 35d2 	ldrb.w	r3, [r3, #1490]	; 0x5d2
 800597c:	b29a      	uxth	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 35d3 	ldrb.w	r3, [r3, #1491]	; 0x5d3
 8005984:	b29b      	uxth	r3, r3
 8005986:	021b      	lsls	r3, r3, #8
 8005988:	b29b      	uxth	r3, r3
 800598a:	4413      	add	r3, r2
 800598c:	b29a      	uxth	r2, r3
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	80da      	strh	r2, [r3, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	88db      	ldrh	r3, [r3, #6]
 8005996:	461a      	mov	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop

080059b4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  
  DCD_EP_Stall(pdev , 0x80);
 80059be:	2180      	movs	r1, #128	; 0x80
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7fd ffe5 	bl	8003990 <DCD_EP_Stall>
  DCD_EP_Stall(pdev , 0);
 80059c6:	2100      	movs	r1, #0
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7fd ffe1 	bl	8003990 <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fd fe0e 	bl	80035f0 <USB_OTG_EP0_OutStart>
}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 80059e8:	2300      	movs	r3, #0
 80059ea:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d033      	beq.n	8005a5a <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f836 	bl	8005a64 <USBD_GetLen>
 80059f8:	4603      	mov	r3, r0
 80059fa:	3301      	adds	r3, #1
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	75fa      	strb	r2, [r7, #23]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	4413      	add	r3, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	8812      	ldrh	r2, [r2, #0]
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8005a1a:	7dfb      	ldrb	r3, [r7, #23]
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	75fa      	strb	r2, [r7, #23]
 8005a20:	461a      	mov	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	4413      	add	r3, r2
 8005a26:	2203      	movs	r2, #3
 8005a28:	701a      	strb	r2, [r3, #0]
    
    while (*desc != NULL) 
 8005a2a:	e012      	b.n	8005a52 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	75fa      	strb	r2, [r7, #23]
 8005a32:	461a      	mov	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	441a      	add	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	1c59      	adds	r1, r3, #1
 8005a3c:	60f9      	str	r1, [r7, #12]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	75fa      	strb	r2, [r7, #23]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	2200      	movs	r2, #0
 8005a50:	701a      	strb	r2, [r3, #0]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != NULL) 
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e8      	bne.n	8005a2c <USBD_GetString+0x50>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 8005a5a:	bf00      	nop
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop

08005a64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	73fb      	strb	r3, [r7, #15]

    while (*buf != NULL) 
 8005a70:	e005      	b.n	8005a7e <USBD_GetLen+0x1a>
    {
        len++;
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	3301      	adds	r3, #1
 8005a76:	73fb      	strb	r3, [r7, #15]
        buf++;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	607b      	str	r3, [r7, #4]
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != NULL) 
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f5      	bne.n	8005a72 <USBD_GetLen+0xe>
    {
        len++;
        buf++;
    }

    return len;
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <USBD_USR_Init>:
  USBD_USR_DeviceResumed,
  USBD_USR_DeviceConnected,
  USBD_USR_DeviceDisconnected,    
};

void USBD_USR_Init(void) {
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
	TM_USB_VCP_INT_Status = TM_USB_VCP_NOT_CONNECTED;
 8005a98:	4b03      	ldr	r3, [pc, #12]	; (8005aa8 <USBD_USR_Init+0x14>)
 8005a9a:	2205      	movs	r2, #5
 8005a9c:	701a      	strb	r2, [r3, #0]
}
 8005a9e:	bf00      	nop
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	20000188 	.word	0x20000188

08005aac <USBD_USR_DeviceReset>:

void USBD_USR_DeviceReset(uint8_t speed ) {
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	71fb      	strb	r3, [r7, #7]
	TM_USB_VCP_INT_Status = TM_USB_VCP_NOT_CONNECTED;
 8005ab6:	4b04      	ldr	r3, [pc, #16]	; (8005ac8 <USBD_USR_DeviceReset+0x1c>)
 8005ab8:	2205      	movs	r2, #5
 8005aba:	701a      	strb	r2, [r3, #0]
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	20000188 	.word	0x20000188

08005acc <USBD_USR_DeviceConfigured>:

void USBD_USR_DeviceConfigured (void) {
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
	TM_USB_VCP_INT_Status = TM_USB_VCP_CONNECTED;
 8005ad0:	4b03      	ldr	r3, [pc, #12]	; (8005ae0 <USBD_USR_DeviceConfigured+0x14>)
 8005ad2:	2206      	movs	r2, #6
 8005ad4:	701a      	strb	r2, [r3, #0]
}
 8005ad6:	bf00      	nop
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	20000188 	.word	0x20000188

08005ae4 <USBD_USR_DeviceSuspended>:

void USBD_USR_DeviceSuspended(void) {
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
	TM_USB_VCP_INT_Status = TM_USB_VCP_NOT_CONNECTED;
 8005ae8:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <USBD_USR_DeviceSuspended+0x14>)
 8005aea:	2205      	movs	r2, #5
 8005aec:	701a      	strb	r2, [r3, #0]
}
 8005aee:	bf00      	nop
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	20000188 	.word	0x20000188

08005afc <USBD_USR_DeviceResumed>:

void USBD_USR_DeviceResumed(void) {
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
	TM_USB_VCP_INT_Status = TM_USB_VCP_NOT_CONNECTED;
 8005b00:	4b03      	ldr	r3, [pc, #12]	; (8005b10 <USBD_USR_DeviceResumed+0x14>)
 8005b02:	2205      	movs	r2, #5
 8005b04:	701a      	strb	r2, [r3, #0]
}
 8005b06:	bf00      	nop
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	20000188 	.word	0x20000188

08005b14 <USBD_USR_DeviceConnected>:

void USBD_USR_DeviceConnected (void) {
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
	TM_USB_VCP_INT_Status = TM_USB_VCP_NOT_CONNECTED;
 8005b18:	4b03      	ldr	r3, [pc, #12]	; (8005b28 <USBD_USR_DeviceConnected+0x14>)
 8005b1a:	2205      	movs	r2, #5
 8005b1c:	701a      	strb	r2, [r3, #0]
}
 8005b1e:	bf00      	nop
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	20000188 	.word	0x20000188

08005b2c <USBD_USR_DeviceDisconnected>:

void USBD_USR_DeviceDisconnected (void) {
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
	TM_USB_VCP_INT_Status = TM_USB_VCP_NOT_CONNECTED;
 8005b30:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <USBD_USR_DeviceDisconnected+0x14>)
 8005b32:	2205      	movs	r2, #5
 8005b34:	701a      	strb	r2, [r3, #0]
}
 8005b36:	bf00      	nop
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	20000188 	.word	0x20000188
 8005b44:	00000000 	.word	0x00000000

08005b48 <main>:
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void) {
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
    uint8_t c;
    /* System Init */
    SystemInit();
 8005b4e:	f000 f895 	bl	8005c7c <SystemInit>
    TM_USB_VCP_Init();
 8005b52:	f7fc fb2f 	bl	80021b4 <TM_USB_VCP_Init>


    while (1){
	/* USB configured OK, drivers OK */

		if (TM_USB_VCP_Getc(&c) == TM_USB_VCP_DATA_OK)
 8005b56:	1dfb      	adds	r3, r7, #7
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fc fb57 	bl	800220c <TM_USB_VCP_Getc>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d1f8      	bne.n	8005b56 <main+0xe>
			/*DMA_Cmd(DMA2_Stream0, ENABLE);
			ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
			ADC_DMACmd(ADC1, ENABLE);
			ADC_Cmd (ADC1, ENABLE);*/
			/* Output predefined triangle signal with frequency of 5kHz */
			counter = 0;
 8005b64:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <main+0x48>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	701a      	strb	r2, [r3, #0]
			TM_DAC_SIGNAL_Init(TM_DAC1, TIM4);
 8005b6a:	490a      	ldr	r1, [pc, #40]	; (8005b94 <main+0x4c>)
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	f7fb fc9f 	bl	80014b0 <TM_DAC_SIGNAL_Init>
			TM_DAC_SIGNAL_SetSignal(TM_DAC1, TM_DAC_SIGNAL_Signal_Sinus, 192000);
 8005b72:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005b88 <main+0x40>
 8005b76:	2100      	movs	r1, #0
 8005b78:	2000      	movs	r0, #0
 8005b7a:	f7fb fceb 	bl	8001554 <TM_DAC_SIGNAL_SetSignal>
			TM_DMA_EnableInterrupts(DAC_SIGNAL_DMA_DAC1_STREAM);
 8005b7e:	4806      	ldr	r0, [pc, #24]	; (8005b98 <main+0x50>)
 8005b80:	f7fb ff10 	bl	80019a4 <TM_DMA_EnableInterrupts>
				i++;
			}
		}*/


}
 8005b84:	e7e7      	b.n	8005b56 <main+0xe>
 8005b86:	bf00      	nop
 8005b88:	00000000 	.word	0x00000000
 8005b8c:	41077000 	.word	0x41077000
 8005b90:	20000209 	.word	0x20000209
 8005b94:	40000800 	.word	0x40000800
 8005b98:	40026088 	.word	0x40026088

08005b9c <TM_DMA_TransferCompleteHandler>:


	}

}*/
void TM_DMA_TransferCompleteHandler(DMA_Stream_TypeDef* DMA_Stream){
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
	counter++;
 8005ba4:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <TM_DMA_TransferCompleteHandler+0x28>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <TM_DMA_TransferCompleteHandler+0x28>)
 8005bae:	701a      	strb	r2, [r3, #0]
	if (counter>20){
 8005bb0:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <TM_DMA_TransferCompleteHandler+0x28>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b14      	cmp	r3, #20
 8005bb6:	d901      	bls.n	8005bbc <TM_DMA_TransferCompleteHandler+0x20>
		DAC_DeInit();
 8005bb8:	f7fa ffee 	bl	8000b98 <DAC_DeInit>
	}
}
 8005bbc:	bf00      	nop
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20000209 	.word	0x20000209

08005bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005bcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005bce:	e003      	b.n	8005bd8 <LoopCopyDataInit>

08005bd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	; (8005c04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005bd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005bd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005bd6:	3104      	adds	r1, #4

08005bd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005bd8:	480b      	ldr	r0, [pc, #44]	; (8005c08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005bda:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005bdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005bde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005be0:	d3f6      	bcc.n	8005bd0 <CopyDataInit>
  ldr  r2, =_sbss
 8005be2:	4a0b      	ldr	r2, [pc, #44]	; (8005c10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005be4:	e002      	b.n	8005bec <LoopFillZerobss>

08005be6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005be6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005be8:	f842 3b04 	str.w	r3, [r2], #4

08005bec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005bec:	4b09      	ldr	r3, [pc, #36]	; (8005c14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005bee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005bf0:	d3f9      	bcc.n	8005be6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005bf2:	f000 f843 	bl	8005c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005bf6:	f000 f8f3 	bl	8005de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005bfa:	f7ff ffa5 	bl	8005b48 <main>
  bx  lr    
 8005bfe:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005c00:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8005c04:	08018ac4 	.word	0x08018ac4
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005c08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005c0c:	200001a8 	.word	0x200001a8
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8005c10:	200001a8 	.word	0x200001a8
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005c14:	20001224 	.word	0x20001224

08005c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c18:	e7fe      	b.n	8005c18 <ADC_IRQHandler>
	...

08005c1c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
}
 8005c20:	bf00      	nop
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop

08005c2c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8005c30:	e7fe      	b.n	8005c30 <HardFault_Handler+0x4>
 8005c32:	bf00      	nop

08005c34 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8005c38:	e7fe      	b.n	8005c38 <MemManage_Handler+0x4>
 8005c3a:	bf00      	nop

08005c3c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8005c40:	e7fe      	b.n	8005c40 <BusFault_Handler+0x4>
 8005c42:	bf00      	nop

08005c44 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8005c48:	e7fe      	b.n	8005c48 <UsageFault_Handler+0x4>
 8005c4a:	bf00      	nop

08005c4c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
}
 8005c50:	bf00      	nop
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop

08005c5c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
}
 8005c60:	bf00      	nop
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop

08005c6c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
}
 8005c70:	bf00      	nop
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop

08005c7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c80:	4a16      	ldr	r2, [pc, #88]	; (8005cdc <SystemInit+0x60>)
 8005c82:	4b16      	ldr	r3, [pc, #88]	; (8005cdc <SystemInit+0x60>)
 8005c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005c90:	4a13      	ldr	r2, [pc, #76]	; (8005ce0 <SystemInit+0x64>)
 8005c92:	4b13      	ldr	r3, [pc, #76]	; (8005ce0 <SystemInit+0x64>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f043 0301 	orr.w	r3, r3, #1
 8005c9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005c9c:	4b10      	ldr	r3, [pc, #64]	; (8005ce0 <SystemInit+0x64>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005ca2:	4a0f      	ldr	r2, [pc, #60]	; (8005ce0 <SystemInit+0x64>)
 8005ca4:	4b0e      	ldr	r3, [pc, #56]	; (8005ce0 <SystemInit+0x64>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005cb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <SystemInit+0x64>)
 8005cb4:	4a0b      	ldr	r2, [pc, #44]	; (8005ce4 <SystemInit+0x68>)
 8005cb6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005cb8:	4a09      	ldr	r2, [pc, #36]	; (8005ce0 <SystemInit+0x64>)
 8005cba:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <SystemInit+0x64>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cc2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005cc4:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <SystemInit+0x64>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8005cca:	f000 f80d 	bl	8005ce8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005cce:	4b03      	ldr	r3, [pc, #12]	; (8005cdc <SystemInit+0x60>)
 8005cd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005cd4:	609a      	str	r2, [r3, #8]
#endif
}
 8005cd6:	bf00      	nop
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	e000ed00 	.word	0xe000ed00
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	24003010 	.word	0x24003010

08005ce8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	607b      	str	r3, [r7, #4]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8005cf6:	4a36      	ldr	r2, [pc, #216]	; (8005dd0 <SetSysClock+0xe8>)
 8005cf8:	4b35      	ldr	r3, [pc, #212]	; (8005dd0 <SetSysClock+0xe8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d00:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8005d02:	4b33      	ldr	r3, [pc, #204]	; (8005dd0 <SetSysClock+0xe8>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d103      	bne.n	8005d20 <SetSysClock+0x38>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005d1e:	d1f0      	bne.n	8005d02 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8005d20:	4b2b      	ldr	r3, [pc, #172]	; (8005dd0 <SetSysClock+0xe8>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	e001      	b.n	8005d36 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8005d32:	2300      	movs	r3, #0
 8005d34:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d142      	bne.n	8005dc2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8005d3c:	4a24      	ldr	r2, [pc, #144]	; (8005dd0 <SetSysClock+0xe8>)
 8005d3e:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <SetSysClock+0xe8>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d46:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8005d48:	4a22      	ldr	r2, [pc, #136]	; (8005dd4 <SetSysClock+0xec>)
 8005d4a:	4b22      	ldr	r3, [pc, #136]	; (8005dd4 <SetSysClock+0xec>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d52:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8005d54:	4a1e      	ldr	r2, [pc, #120]	; (8005dd0 <SetSysClock+0xe8>)
 8005d56:	4b1e      	ldr	r3, [pc, #120]	; (8005dd0 <SetSysClock+0xe8>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8005d5c:	4a1c      	ldr	r2, [pc, #112]	; (8005dd0 <SetSysClock+0xe8>)
 8005d5e:	4b1c      	ldr	r3, [pc, #112]	; (8005dd0 <SetSysClock+0xe8>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d66:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8005d68:	4a19      	ldr	r2, [pc, #100]	; (8005dd0 <SetSysClock+0xe8>)
 8005d6a:	4b19      	ldr	r3, [pc, #100]	; (8005dd0 <SetSysClock+0xe8>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8005d72:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8005d74:	4b16      	ldr	r3, [pc, #88]	; (8005dd0 <SetSysClock+0xe8>)
 8005d76:	4a18      	ldr	r2, [pc, #96]	; (8005dd8 <SetSysClock+0xf0>)
 8005d78:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8005d7a:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <SetSysClock+0xe8>)
 8005d7c:	4b14      	ldr	r3, [pc, #80]	; (8005dd0 <SetSysClock+0xe8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d84:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005d86:	bf00      	nop
 8005d88:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <SetSysClock+0xe8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0f9      	beq.n	8005d88 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8005d94:	4b11      	ldr	r3, [pc, #68]	; (8005ddc <SetSysClock+0xf4>)
 8005d96:	f240 6205 	movw	r2, #1541	; 0x605
 8005d9a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005d9c:	4a0c      	ldr	r2, [pc, #48]	; (8005dd0 <SetSysClock+0xe8>)
 8005d9e:	4b0c      	ldr	r3, [pc, #48]	; (8005dd0 <SetSysClock+0xe8>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f023 0303 	bic.w	r3, r3, #3
 8005da6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005da8:	4a09      	ldr	r2, [pc, #36]	; (8005dd0 <SetSysClock+0xe8>)
 8005daa:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <SetSysClock+0xe8>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f043 0302 	orr.w	r3, r3, #2
 8005db2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8005db4:	bf00      	nop
 8005db6:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <SetSysClock+0xe8>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 030c 	and.w	r3, r3, #12
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d1f9      	bne.n	8005db6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40023800 	.word	0x40023800
 8005dd4:	40007000 	.word	0x40007000
 8005dd8:	07405408 	.word	0x07405408
 8005ddc:	40023c00 	.word	0x40023c00

08005de0 <__libc_init_array>:
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	4b0e      	ldr	r3, [pc, #56]	; (8005e1c <__libc_init_array+0x3c>)
 8005de4:	4c0e      	ldr	r4, [pc, #56]	; (8005e20 <__libc_init_array+0x40>)
 8005de6:	1ae4      	subs	r4, r4, r3
 8005de8:	10a4      	asrs	r4, r4, #2
 8005dea:	2500      	movs	r5, #0
 8005dec:	461e      	mov	r6, r3
 8005dee:	42a5      	cmp	r5, r4
 8005df0:	d004      	beq.n	8005dfc <__libc_init_array+0x1c>
 8005df2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005df6:	4798      	blx	r3
 8005df8:	3501      	adds	r5, #1
 8005dfa:	e7f8      	b.n	8005dee <__libc_init_array+0xe>
 8005dfc:	f000 f816 	bl	8005e2c <_init>
 8005e00:	4c08      	ldr	r4, [pc, #32]	; (8005e24 <__libc_init_array+0x44>)
 8005e02:	4b09      	ldr	r3, [pc, #36]	; (8005e28 <__libc_init_array+0x48>)
 8005e04:	1ae4      	subs	r4, r4, r3
 8005e06:	10a4      	asrs	r4, r4, #2
 8005e08:	2500      	movs	r5, #0
 8005e0a:	461e      	mov	r6, r3
 8005e0c:	42a5      	cmp	r5, r4
 8005e0e:	d004      	beq.n	8005e1a <__libc_init_array+0x3a>
 8005e10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e14:	4798      	blx	r3
 8005e16:	3501      	adds	r5, #1
 8005e18:	e7f8      	b.n	8005e0c <__libc_init_array+0x2c>
 8005e1a:	bd70      	pop	{r4, r5, r6, pc}
 8005e1c:	08018abc 	.word	0x08018abc
 8005e20:	08018abc 	.word	0x08018abc
 8005e24:	08018ac0 	.word	0x08018ac0
 8005e28:	08018abc 	.word	0x08018abc

08005e2c <_init>:
 8005e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2e:	bf00      	nop
 8005e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e32:	bc08      	pop	{r3}
 8005e34:	469e      	mov	lr, r3
 8005e36:	4770      	bx	lr

08005e38 <_fini>:
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	bf00      	nop
 8005e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3e:	bc08      	pop	{r3}
 8005e40:	469e      	mov	lr, r3
 8005e42:	4770      	bx	lr
