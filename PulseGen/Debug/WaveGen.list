
C:\Work\2018\4022F\STMF4\tm_stm32f4_dac_signal\WaveGen\Debug\WaveGen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e78  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08002000  08002000  00012000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002004  08002004  00012004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002008  08002008  00012008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0001f494  20000000  0800200c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0003f494  2**0
                  CONTENTS
  7 .bss          00000040  2001f494  2001f494  0003f494  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2001f4d4  2001f4d4  0003f494  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003f494  2**0
                  CONTENTS, READONLY
 10 .debug_info   000063e5  00000000  00000000  0003f4c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000e99  00000000  00000000  000458a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000898  00000000  00000000  00046748  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007e0  00000000  00000000  00046fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002bcd  00000000  00000000  000477c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002c3a  00000000  00000000  0004a38d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0004cfc7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002428  00000000  00000000  0004d048  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0004f470  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2001f494 	.word	0x2001f494
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001fe8 	.word	0x08001fe8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2001f498 	.word	0x2001f498
 80001c4:	08001fe8 	.word	0x08001fe8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <DAC_Init+0x64>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000ac4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000ae4:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000aea:	4313      	orrs	r3, r2
 8000aec:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <DAC_Init+0x64>)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	6013      	str	r3, [r2, #0]
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40007400 	.word	0x40007400

08000b14 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d009      	beq.n	8000b3a <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000b26:	490d      	ldr	r1, [pc, #52]	; (8000b5c <DAC_Cmd+0x48>)
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <DAC_Cmd+0x48>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	fa00 f303 	lsl.w	r3, r0, r3
 8000b34:	4313      	orrs	r3, r2
 8000b36:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8000b38:	e009      	b.n	8000b4e <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000b3a:	4908      	ldr	r1, [pc, #32]	; (8000b5c <DAC_Cmd+0x48>)
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <DAC_Cmd+0x48>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	2001      	movs	r0, #1
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	fa00 f303 	lsl.w	r3, r0, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	600b      	str	r3, [r1, #0]
  }
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40007400 	.word	0x40007400

08000b60 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b6c:	78fb      	ldrb	r3, [r7, #3]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d00a      	beq.n	8000b88 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8000b72:	490e      	ldr	r1, [pc, #56]	; (8000bac <DAC_DMACmd+0x4c>)
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <DAC_DMACmd+0x4c>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	fa00 f303 	lsl.w	r3, r0, r3
 8000b82:	4313      	orrs	r3, r2
 8000b84:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 8000b86:	e00a      	b.n	8000b9e <DAC_DMACmd+0x3e>
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8000b88:	4908      	ldr	r1, [pc, #32]	; (8000bac <DAC_DMACmd+0x4c>)
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <DAC_DMACmd+0x4c>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	fa00 f303 	lsl.w	r3, r0, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	600b      	str	r3, [r1, #0]
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40007400 	.word	0x40007400

08000bb0 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f023 0201 	bic.w	r2, r3, #1
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2221      	movs	r2, #33	; 0x21
 8000be6:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a46      	ldr	r2, [pc, #280]	; (8000d04 <DMA_DeInit+0x154>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d103      	bne.n	8000bf8 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000bf0:	4b45      	ldr	r3, [pc, #276]	; (8000d08 <DMA_DeInit+0x158>)
 8000bf2:	223d      	movs	r2, #61	; 0x3d
 8000bf4:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000bf6:	e07e      	b.n	8000cf6 <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a44      	ldr	r2, [pc, #272]	; (8000d0c <DMA_DeInit+0x15c>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d104      	bne.n	8000c0a <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000c00:	4b41      	ldr	r3, [pc, #260]	; (8000d08 <DMA_DeInit+0x158>)
 8000c02:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000c06:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000c08:	e075      	b.n	8000cf6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a40      	ldr	r2, [pc, #256]	; (8000d10 <DMA_DeInit+0x160>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d104      	bne.n	8000c1c <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000c12:	4b3d      	ldr	r3, [pc, #244]	; (8000d08 <DMA_DeInit+0x158>)
 8000c14:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000c18:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000c1a:	e06c      	b.n	8000cf6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a3d      	ldr	r2, [pc, #244]	; (8000d14 <DMA_DeInit+0x164>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d104      	bne.n	8000c2e <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000c24:	4b38      	ldr	r3, [pc, #224]	; (8000d08 <DMA_DeInit+0x158>)
 8000c26:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000c2a:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000c2c:	e063      	b.n	8000cf6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a39      	ldr	r2, [pc, #228]	; (8000d18 <DMA_DeInit+0x168>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d103      	bne.n	8000c3e <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000c36:	4b34      	ldr	r3, [pc, #208]	; (8000d08 <DMA_DeInit+0x158>)
 8000c38:	4a38      	ldr	r2, [pc, #224]	; (8000d1c <DMA_DeInit+0x16c>)
 8000c3a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000c3c:	e05b      	b.n	8000cf6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a37      	ldr	r2, [pc, #220]	; (8000d20 <DMA_DeInit+0x170>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d103      	bne.n	8000c4e <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000c46:	4b30      	ldr	r3, [pc, #192]	; (8000d08 <DMA_DeInit+0x158>)
 8000c48:	4a36      	ldr	r2, [pc, #216]	; (8000d24 <DMA_DeInit+0x174>)
 8000c4a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000c4c:	e053      	b.n	8000cf6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a35      	ldr	r2, [pc, #212]	; (8000d28 <DMA_DeInit+0x178>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d103      	bne.n	8000c5e <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000c56:	4b2c      	ldr	r3, [pc, #176]	; (8000d08 <DMA_DeInit+0x158>)
 8000c58:	4a34      	ldr	r2, [pc, #208]	; (8000d2c <DMA_DeInit+0x17c>)
 8000c5a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000c5c:	e04b      	b.n	8000cf6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a33      	ldr	r2, [pc, #204]	; (8000d30 <DMA_DeInit+0x180>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d104      	bne.n	8000c70 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000c66:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <DMA_DeInit+0x158>)
 8000c68:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000c6c:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000c6e:	e042      	b.n	8000cf6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a30      	ldr	r2, [pc, #192]	; (8000d34 <DMA_DeInit+0x184>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d103      	bne.n	8000c80 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000c78:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <DMA_DeInit+0x188>)
 8000c7a:	223d      	movs	r2, #61	; 0x3d
 8000c7c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000c7e:	e03a      	b.n	8000cf6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a2e      	ldr	r2, [pc, #184]	; (8000d3c <DMA_DeInit+0x18c>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d104      	bne.n	8000c92 <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000c88:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <DMA_DeInit+0x188>)
 8000c8a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000c8e:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000c90:	e031      	b.n	8000cf6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a2a      	ldr	r2, [pc, #168]	; (8000d40 <DMA_DeInit+0x190>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d104      	bne.n	8000ca4 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <DMA_DeInit+0x188>)
 8000c9c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000ca0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000ca2:	e028      	b.n	8000cf6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a27      	ldr	r2, [pc, #156]	; (8000d44 <DMA_DeInit+0x194>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d104      	bne.n	8000cb6 <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000cac:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <DMA_DeInit+0x188>)
 8000cae:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000cb2:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000cb4:	e01f      	b.n	8000cf6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a23      	ldr	r2, [pc, #140]	; (8000d48 <DMA_DeInit+0x198>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d103      	bne.n	8000cc6 <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <DMA_DeInit+0x188>)
 8000cc0:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <DMA_DeInit+0x16c>)
 8000cc2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000cc4:	e017      	b.n	8000cf6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a20      	ldr	r2, [pc, #128]	; (8000d4c <DMA_DeInit+0x19c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d103      	bne.n	8000cd6 <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <DMA_DeInit+0x188>)
 8000cd0:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <DMA_DeInit+0x174>)
 8000cd2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000cd4:	e00f      	b.n	8000cf6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a1d      	ldr	r2, [pc, #116]	; (8000d50 <DMA_DeInit+0x1a0>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d103      	bne.n	8000ce6 <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <DMA_DeInit+0x188>)
 8000ce0:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <DMA_DeInit+0x17c>)
 8000ce2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000ce4:	e007      	b.n	8000cf6 <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a1a      	ldr	r2, [pc, #104]	; (8000d54 <DMA_DeInit+0x1a4>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d103      	bne.n	8000cf6 <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <DMA_DeInit+0x188>)
 8000cf0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000cf4:	60da      	str	r2, [r3, #12]
    }
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40026010 	.word	0x40026010
 8000d08:	40026000 	.word	0x40026000
 8000d0c:	40026028 	.word	0x40026028
 8000d10:	40026040 	.word	0x40026040
 8000d14:	40026058 	.word	0x40026058
 8000d18:	40026070 	.word	0x40026070
 8000d1c:	2000003d 	.word	0x2000003d
 8000d20:	40026088 	.word	0x40026088
 8000d24:	20000f40 	.word	0x20000f40
 8000d28:	400260a0 	.word	0x400260a0
 8000d2c:	203d0000 	.word	0x203d0000
 8000d30:	400260b8 	.word	0x400260b8
 8000d34:	40026410 	.word	0x40026410
 8000d38:	40026400 	.word	0x40026400
 8000d3c:	40026428 	.word	0x40026428
 8000d40:	40026440 	.word	0x40026440
 8000d44:	40026458 	.word	0x40026458
 8000d48:	40026470 	.word	0x40026470
 8000d4c:	40026488 	.word	0x40026488
 8000d50:	400264a0 	.word	0x400264a0
 8000d54:	400264b8 	.word	0x400264b8

08000d58 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <DMA_Init+0xac>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000d82:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000d8e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	6a1b      	ldr	r3, [r3, #32]
 8000d94:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000d9a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000da6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dac:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f023 0307 	bic.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	691a      	ldr	r2, [r3, #16]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	60da      	str	r2, [r3, #12]
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	f01c803f 	.word	0xf01c803f

08000e08 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e14:	78fb      	ldrb	r3, [r7, #3]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d006      	beq.n	8000e28 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f043 0201 	orr.w	r2, r3, #1
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000e26:	e005      	b.n	8000e34 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f023 0201 	bic.w	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	601a      	str	r2, [r3, #0]
  }
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
 8000e54:	2302      	movs	r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000e60:	4b48      	ldr	r3, [pc, #288]	; (8000f84 <RCC_GetClocksFreq+0x144>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 030c 	and.w	r3, r3, #12
 8000e68:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	d007      	beq.n	8000e80 <RCC_GetClocksFreq+0x40>
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d009      	beq.n	8000e88 <RCC_GetClocksFreq+0x48>
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d13f      	bne.n	8000ef8 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a43      	ldr	r2, [pc, #268]	; (8000f88 <RCC_GetClocksFreq+0x148>)
 8000e7c:	601a      	str	r2, [r3, #0]
      break;
 8000e7e:	e03f      	b.n	8000f00 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a42      	ldr	r2, [pc, #264]	; (8000f8c <RCC_GetClocksFreq+0x14c>)
 8000e84:	601a      	str	r2, [r3, #0]
      break;
 8000e86:	e03b      	b.n	8000f00 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000e88:	4b3e      	ldr	r3, [pc, #248]	; (8000f84 <RCC_GetClocksFreq+0x144>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e90:	0d9b      	lsrs	r3, r3, #22
 8000e92:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e94:	4b3b      	ldr	r3, [pc, #236]	; (8000f84 <RCC_GetClocksFreq+0x144>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e9c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d00d      	beq.n	8000ec0 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000ea4:	4a39      	ldr	r2, [pc, #228]	; (8000f8c <RCC_GetClocksFreq+0x14c>)
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000eac:	4b35      	ldr	r3, [pc, #212]	; (8000f84 <RCC_GetClocksFreq+0x144>)
 8000eae:	6859      	ldr	r1, [r3, #4]
 8000eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000eb4:	400b      	ands	r3, r1
 8000eb6:	099b      	lsrs	r3, r3, #6
 8000eb8:	fb03 f302 	mul.w	r3, r3, r2
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	e00c      	b.n	8000eda <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000ec0:	4a31      	ldr	r2, [pc, #196]	; (8000f88 <RCC_GetClocksFreq+0x148>)
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ec8:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <RCC_GetClocksFreq+0x144>)
 8000eca:	6859      	ldr	r1, [r3, #4]
 8000ecc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ed0:	400b      	ands	r3, r1
 8000ed2:	099b      	lsrs	r3, r3, #6
 8000ed4:	fb03 f302 	mul.w	r3, r3, r2
 8000ed8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000eda:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <RCC_GetClocksFreq+0x144>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ee2:	0c1b      	lsrs	r3, r3, #16
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000eea:	69fa      	ldr	r2, [r7, #28]
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	601a      	str	r2, [r3, #0]
      break;
 8000ef6:	e003      	b.n	8000f00 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a23      	ldr	r2, [pc, #140]	; (8000f88 <RCC_GetClocksFreq+0x148>)
 8000efc:	601a      	str	r2, [r3, #0]
      break;
 8000efe:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000f00:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <RCC_GetClocksFreq+0x144>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f08:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000f10:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <RCC_GetClocksFreq+0x150>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	4413      	add	r3, r2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	40da      	lsrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <RCC_GetClocksFreq+0x144>)
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000f30:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	0a9b      	lsrs	r3, r3, #10
 8000f36:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000f38:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <RCC_GetClocksFreq+0x150>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	40da      	lsrs	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <RCC_GetClocksFreq+0x144>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000f58:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	0b5b      	lsrs	r3, r3, #13
 8000f5e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000f60:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <RCC_GetClocksFreq+0x150>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	4413      	add	r3, r2
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	40da      	lsrs	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	60da      	str	r2, [r3, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3724      	adds	r7, #36	; 0x24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	40023800 	.word	0x40023800
 8000f88:	00f42400 	.word	0x00f42400
 8000f8c:	007a1200 	.word	0x007a1200
 8000f90:	20000000 	.word	0x20000000

08000f94 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a29      	ldr	r2, [pc, #164]	; (8001050 <TIM_TimeBaseInit+0xbc>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d013      	beq.n	8000fd8 <TIM_TimeBaseInit+0x44>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a28      	ldr	r2, [pc, #160]	; (8001054 <TIM_TimeBaseInit+0xc0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d00f      	beq.n	8000fd8 <TIM_TimeBaseInit+0x44>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fbe:	d00b      	beq.n	8000fd8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a25      	ldr	r2, [pc, #148]	; (8001058 <TIM_TimeBaseInit+0xc4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d007      	beq.n	8000fd8 <TIM_TimeBaseInit+0x44>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a24      	ldr	r2, [pc, #144]	; (800105c <TIM_TimeBaseInit+0xc8>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d003      	beq.n	8000fd8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a23      	ldr	r2, [pc, #140]	; (8001060 <TIM_TimeBaseInit+0xcc>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d108      	bne.n	8000fea <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000fd8:	89fb      	ldrh	r3, [r7, #14]
 8000fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fde:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	885a      	ldrh	r2, [r3, #2]
 8000fe4:	89fb      	ldrh	r3, [r7, #14]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <TIM_TimeBaseInit+0xd0>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00c      	beq.n	800100c <TIM_TimeBaseInit+0x78>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a1c      	ldr	r2, [pc, #112]	; (8001068 <TIM_TimeBaseInit+0xd4>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d008      	beq.n	800100c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000ffa:	89fb      	ldrh	r3, [r7, #14]
 8000ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001000:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	891a      	ldrh	r2, [r3, #8]
 8001006:	89fb      	ldrh	r3, [r7, #14]
 8001008:	4313      	orrs	r3, r2
 800100a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	89fa      	ldrh	r2, [r7, #14]
 8001010:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	881a      	ldrh	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <TIM_TimeBaseInit+0xbc>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d003      	beq.n	8001032 <TIM_TimeBaseInit+0x9e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a09      	ldr	r2, [pc, #36]	; (8001054 <TIM_TimeBaseInit+0xc0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d104      	bne.n	800103c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	7a9b      	ldrb	r3, [r3, #10]
 8001036:	b29a      	uxth	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	829a      	strh	r2, [r3, #20]
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40010000 	.word	0x40010000
 8001054:	40010400 	.word	0x40010400
 8001058:	40000400 	.word	0x40000400
 800105c:	40000800 	.word	0x40000800
 8001060:	40000c00 	.word	0x40000c00
 8001064:	40001000 	.word	0x40001000
 8001068:	40001400 	.word	0x40001400

0800106c <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f04f 32ff 	mov.w	r2, #4294967295
 800107a:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	729a      	strb	r2, [r3, #10]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	889b      	ldrh	r3, [r3, #4]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	889b      	ldrh	r3, [r3, #4]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	809a      	strh	r2, [r3, #4]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <TM_DAC_SIGNAL_Init>:
};

TIM_TypeDef *DAC_TIM[2];
uint8_t dac_timer_set[2] = {0, 0};

TM_DAC_SIGNAL_Result_t TM_DAC_SIGNAL_Init(TM_DAC_SIGNAL_Channel_t DACx, TIM_TypeDef* TIMx) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
	uint16_t GPIO_Pin;
	
	/* Check used timer */
	/* Set proper trigger */
	if (
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010ea:	d013      	beq.n	8001114 <TM_DAC_SIGNAL_Init+0x3c>
		TIMx == TIM2 || 
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	4a1b      	ldr	r2, [pc, #108]	; (800115c <TM_DAC_SIGNAL_Init+0x84>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d00f      	beq.n	8001114 <TM_DAC_SIGNAL_Init+0x3c>
		TIMx == TIM4 ||
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	4a1a      	ldr	r2, [pc, #104]	; (8001160 <TM_DAC_SIGNAL_Init+0x88>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d00b      	beq.n	8001114 <TM_DAC_SIGNAL_Init+0x3c>
		TIMx == TIM5 ||
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	4a19      	ldr	r2, [pc, #100]	; (8001164 <TM_DAC_SIGNAL_Init+0x8c>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d007      	beq.n	8001114 <TM_DAC_SIGNAL_Init+0x3c>
		TIMx == TIM6 ||
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	4a18      	ldr	r2, [pc, #96]	; (8001168 <TM_DAC_SIGNAL_Init+0x90>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d003      	beq.n	8001114 <TM_DAC_SIGNAL_Init+0x3c>
		TIMx == TIM7 ||
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <TM_DAC_SIGNAL_Init+0x94>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d10c      	bne.n	800112e <TM_DAC_SIGNAL_Init+0x56>
		TIMx == TIM8
	) {
		/* Set timer */
		DAC_TIM[DACx] = TIMx;
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	4916      	ldr	r1, [pc, #88]	; (8001170 <TM_DAC_SIGNAL_Init+0x98>)
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		/* Set flag */
		dac_timer_set[DACx] = 1;
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <TM_DAC_SIGNAL_Init+0x9c>)
 8001122:	2101      	movs	r1, #1
 8001124:	54d1      	strb	r1, [r2, r3]
		return TM_DAC_SIGNAL_Result_TimerNotValid;
	}

	
	/* Select proper GPIO pin */
	if (DACx == TM_DAC1) {
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <TM_DAC_SIGNAL_Init+0x5a>
 800112c:	e004      	b.n	8001138 <TM_DAC_SIGNAL_Init+0x60>
		DAC_TIM[DACx] = TIMx;
		/* Set flag */
		dac_timer_set[DACx] = 1;
	} else {
		/* Timer is not valid */
		return TM_DAC_SIGNAL_Result_TimerNotValid;
 800112e:	2302      	movs	r3, #2
 8001130:	e00f      	b.n	8001152 <TM_DAC_SIGNAL_Init+0x7a>
	}

	
	/* Select proper GPIO pin */
	if (DACx == TM_DAC1) {
		GPIO_Pin = GPIO_PIN_4;
 8001132:	2310      	movs	r3, #16
 8001134:	81fb      	strh	r3, [r7, #14]
 8001136:	e001      	b.n	800113c <TM_DAC_SIGNAL_Init+0x64>
	} else {
		GPIO_Pin = GPIO_PIN_5;
 8001138:	2320      	movs	r3, #32
 800113a:	81fb      	strh	r3, [r7, #14]
	}
	
	/* Initialize proper GPIO pin */
	TM_GPIO_Init(GPIOA, GPIO_Pin, TM_GPIO_Mode_AN, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast);
 800113c:	89f9      	ldrh	r1, [r7, #14]
 800113e:	2302      	movs	r3, #2
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	2300      	movs	r3, #0
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2300      	movs	r3, #0
 8001148:	2203      	movs	r2, #3
 800114a:	480b      	ldr	r0, [pc, #44]	; (8001178 <TM_DAC_SIGNAL_Init+0xa0>)
 800114c:	f000 fb68 	bl	8001820 <TM_GPIO_Init>
	
	/* Return OK */
	return TM_DAC_SIGNAL_Result_Ok;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40000800 	.word	0x40000800
 8001160:	40000c00 	.word	0x40000c00
 8001164:	40001000 	.word	0x40001000
 8001168:	40001400 	.word	0x40001400
 800116c:	40010400 	.word	0x40010400
 8001170:	2001f4cc 	.word	0x2001f4cc
 8001174:	2001f4b0 	.word	0x2001f4b0
 8001178:	40020000 	.word	0x40020000

0800117c <TM_DAC_SIGNAL_SetSignal>:

TM_DAC_SIGNAL_Result_t TM_DAC_SIGNAL_SetSignal(TM_DAC_SIGNAL_Channel_t DACx, TM_DAC_SIGNAL_Signal_t signal_type, double frequency) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	460a      	mov	r2, r1
 8001186:	ed87 0b00 	vstr	d0, [r7]
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	4613      	mov	r3, r2
 800118e:	73bb      	strb	r3, [r7, #14]
	TM_DAC_SIGNAL_Result_t result;
	switch (signal_type) {
 8001190:	7bbb      	ldrb	r3, [r7, #14]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d837      	bhi.n	8001206 <TM_DAC_SIGNAL_SetSignal+0x8a>
 8001196:	a201      	add	r2, pc, #4	; (adr r2, 800119c <TM_DAC_SIGNAL_SetSignal+0x20>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011db 	.word	0x080011db
 80011a4:	080011c5 	.word	0x080011c5
 80011a8:	080011f1 	.word	0x080011f1
		case TM_DAC_SIGNAL_Signal_Sinus:
			result = TM_DAC_SIGNAL_SetCustomSignal(DACx, DAC_SIGNAL_Sinus, DAC_SIGNAL_SINUS_LENGTH, frequency);
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	ed97 0b00 	vldr	d0, [r7]
 80011b2:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80011b6:	4917      	ldr	r1, [pc, #92]	; (8001214 <TM_DAC_SIGNAL_SetSignal+0x98>)
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 f833 	bl	8001224 <TM_DAC_SIGNAL_SetCustomSignal>
 80011be:	4603      	mov	r3, r0
 80011c0:	75fb      	strb	r3, [r7, #23]
			break;
 80011c2:	e022      	b.n	800120a <TM_DAC_SIGNAL_SetSignal+0x8e>
		case TM_DAC_SIGNAL_Signal_Sawtooth:
			result = TM_DAC_SIGNAL_SetCustomSignal(DACx, DAC_SIGNAL_Sawtooth, DAC_SIGNAL_SAWTOOTH_LENGTH, frequency);
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	ed97 0b00 	vldr	d0, [r7]
 80011ca:	2220      	movs	r2, #32
 80011cc:	4912      	ldr	r1, [pc, #72]	; (8001218 <TM_DAC_SIGNAL_SetSignal+0x9c>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f828 	bl	8001224 <TM_DAC_SIGNAL_SetCustomSignal>
 80011d4:	4603      	mov	r3, r0
 80011d6:	75fb      	strb	r3, [r7, #23]
			break;
 80011d8:	e017      	b.n	800120a <TM_DAC_SIGNAL_SetSignal+0x8e>
		case TM_DAC_SIGNAL_Signal_Triangle:
			result = TM_DAC_SIGNAL_SetCustomSignal(DACx, DAC_SIGNAL_Triangle, DAC_SIGNAL_TRIANGLE_LENGTH, frequency);
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	ed97 0b00 	vldr	d0, [r7]
 80011e0:	2220      	movs	r2, #32
 80011e2:	490e      	ldr	r1, [pc, #56]	; (800121c <TM_DAC_SIGNAL_SetSignal+0xa0>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f81d 	bl	8001224 <TM_DAC_SIGNAL_SetCustomSignal>
 80011ea:	4603      	mov	r3, r0
 80011ec:	75fb      	strb	r3, [r7, #23]
			break;
 80011ee:	e00c      	b.n	800120a <TM_DAC_SIGNAL_SetSignal+0x8e>
		case TM_DAC_SIGNAL_Signal_Square:
			result = TM_DAC_SIGNAL_SetCustomSignal(DACx, DAC_SIGNAL_Square, DAC_SIGNAL_SQUARE_LENGTH, frequency);
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	ed97 0b00 	vldr	d0, [r7]
 80011f6:	2202      	movs	r2, #2
 80011f8:	4909      	ldr	r1, [pc, #36]	; (8001220 <TM_DAC_SIGNAL_SetSignal+0xa4>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f812 	bl	8001224 <TM_DAC_SIGNAL_SetCustomSignal>
 8001200:	4603      	mov	r3, r0
 8001202:	75fb      	strb	r3, [r7, #23]
			break;
 8001204:	e001      	b.n	800120a <TM_DAC_SIGNAL_SetSignal+0x8e>
		default:
			result = TM_DAC_SIGNAL_Result_Error;
 8001206:	2301      	movs	r3, #1
 8001208:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Return result */
	return result;
 800120a:	7dfb      	ldrb	r3, [r7, #23]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000010 	.word	0x20000010
 8001218:	2001f450 	.word	0x2001f450
 800121c:	2001f410 	.word	0x2001f410
 8001220:	2001f490 	.word	0x2001f490

08001224 <TM_DAC_SIGNAL_SetCustomSignal>:

TM_DAC_SIGNAL_Result_t TM_DAC_SIGNAL_SetCustomSignal(TM_DAC_SIGNAL_Channel_t DACx, uint16_t* Signal_Data, uint16_t Signal_Length, double frequency) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b0a0      	sub	sp, #128	; 0x80
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	ed87 0b00 	vstr	d0, [r7]
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	4613      	mov	r3, r2
 8001236:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStruct;
	DMA_InitTypeDef DMA_InitStruct;
	TM_TIMER_PROPERTIES_t Timer_Data;

	/* Check if timer is set */
	if (!dac_timer_set[DACx]) {
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	4a8c      	ldr	r2, [pc, #560]	; (800146c <TM_DAC_SIGNAL_SetCustomSignal+0x248>)
 800123c:	5cd3      	ldrb	r3, [r2, r3]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <TM_DAC_SIGNAL_SetCustomSignal+0x22>
		return TM_DAC_SIGNAL_Result_Error;
 8001242:	2301      	movs	r3, #1
 8001244:	e10d      	b.n	8001462 <TM_DAC_SIGNAL_SetCustomSignal+0x23e>
	}
	
	/* Check used timer */
	/* Set proper trigger */
	if (DAC_TIM[DACx] == TIM2) {
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4a89      	ldr	r2, [pc, #548]	; (8001470 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 800124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001252:	d102      	bne.n	800125a <TM_DAC_SIGNAL_SetCustomSignal+0x36>
		DAC_InitStruct.DAC_Trigger = DAC_Trigger_T2_TRGO;
 8001254:	2324      	movs	r3, #36	; 0x24
 8001256:	673b      	str	r3, [r7, #112]	; 0x70
 8001258:	e033      	b.n	80012c2 <TM_DAC_SIGNAL_SetCustomSignal+0x9e>
	} else if (DAC_TIM[DACx] == TIM4) {
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	4a84      	ldr	r2, [pc, #528]	; (8001470 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	4a84      	ldr	r2, [pc, #528]	; (8001474 <TM_DAC_SIGNAL_SetCustomSignal+0x250>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d102      	bne.n	800126e <TM_DAC_SIGNAL_SetCustomSignal+0x4a>
		DAC_InitStruct.DAC_Trigger = DAC_Trigger_T4_TRGO;
 8001268:	232c      	movs	r3, #44	; 0x2c
 800126a:	673b      	str	r3, [r7, #112]	; 0x70
 800126c:	e029      	b.n	80012c2 <TM_DAC_SIGNAL_SetCustomSignal+0x9e>
	} else if (DAC_TIM[DACx] == TIM5) {
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	4a7f      	ldr	r2, [pc, #508]	; (8001470 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001276:	4a80      	ldr	r2, [pc, #512]	; (8001478 <TM_DAC_SIGNAL_SetCustomSignal+0x254>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d102      	bne.n	8001282 <TM_DAC_SIGNAL_SetCustomSignal+0x5e>
		DAC_InitStruct.DAC_Trigger = DAC_Trigger_T5_TRGO;
 800127c:	231c      	movs	r3, #28
 800127e:	673b      	str	r3, [r7, #112]	; 0x70
 8001280:	e01f      	b.n	80012c2 <TM_DAC_SIGNAL_SetCustomSignal+0x9e>
	} else if (DAC_TIM[DACx] == TIM6) {
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	4a7a      	ldr	r2, [pc, #488]	; (8001470 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	4a7c      	ldr	r2, [pc, #496]	; (800147c <TM_DAC_SIGNAL_SetCustomSignal+0x258>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d102      	bne.n	8001296 <TM_DAC_SIGNAL_SetCustomSignal+0x72>
		DAC_InitStruct.DAC_Trigger = DAC_Trigger_T6_TRGO;
 8001290:	2304      	movs	r3, #4
 8001292:	673b      	str	r3, [r7, #112]	; 0x70
 8001294:	e015      	b.n	80012c2 <TM_DAC_SIGNAL_SetCustomSignal+0x9e>
	} else if (DAC_TIM[DACx] == TIM7) {
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	4a75      	ldr	r2, [pc, #468]	; (8001470 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	4a78      	ldr	r2, [pc, #480]	; (8001480 <TM_DAC_SIGNAL_SetCustomSignal+0x25c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d102      	bne.n	80012aa <TM_DAC_SIGNAL_SetCustomSignal+0x86>
		DAC_InitStruct.DAC_Trigger = DAC_Trigger_T7_TRGO;
 80012a4:	2314      	movs	r3, #20
 80012a6:	673b      	str	r3, [r7, #112]	; 0x70
 80012a8:	e00b      	b.n	80012c2 <TM_DAC_SIGNAL_SetCustomSignal+0x9e>
	} else if (DAC_TIM[DACx] == TIM8) {
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	4a70      	ldr	r2, [pc, #448]	; (8001470 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	4a74      	ldr	r2, [pc, #464]	; (8001484 <TM_DAC_SIGNAL_SetCustomSignal+0x260>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d102      	bne.n	80012be <TM_DAC_SIGNAL_SetCustomSignal+0x9a>
		DAC_InitStruct.DAC_Trigger = DAC_Trigger_T8_TRGO;
 80012b8:	230c      	movs	r3, #12
 80012ba:	673b      	str	r3, [r7, #112]	; 0x70
 80012bc:	e001      	b.n	80012c2 <TM_DAC_SIGNAL_SetCustomSignal+0x9e>
	} else {
		/* Timer is not valid */
		return TM_DAC_SIGNAL_Result_TimerNotValid;
 80012be:	2302      	movs	r3, #2
 80012c0:	e0cf      	b.n	8001462 <TM_DAC_SIGNAL_SetCustomSignal+0x23e>
	}
	
	/* Get timer data */
	TM_TIMER_PROPERTIES_GetTimerProperties(DAC_TIM[DACx], &Timer_Data);
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	4a6a      	ldr	r2, [pc, #424]	; (8001470 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 80012c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ca:	f107 0210 	add.w	r2, r7, #16
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fb79 	bl	80019c8 <TM_TIMER_PROPERTIES_GetTimerProperties>
	
	/* Get period and prescaler values */
	//TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency(&Timer_Data, frequency * Signal_Length);
	/* Get period and prescaler values */
	TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency(&Timer_Data, frequency);
 80012d6:	f107 0310 	add.w	r3, r7, #16
 80012da:	ed97 0b00 	vldr	d0, [r7]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fbf2 	bl	8001ac8 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency>
	
	/* Check valid frequency */
	if (Timer_Data.Frequency == 0) {
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <TM_DAC_SIGNAL_SetCustomSignal+0xca>
		return TM_DAC_SIGNAL_Result_Error;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0b9      	b.n	8001462 <TM_DAC_SIGNAL_SetCustomSignal+0x23e>
	}
	
	/* Enable DAC clock */
	RCC->APB1ENR |= RCC_APB1ENR_DACEN;
 80012ee:	4a66      	ldr	r2, [pc, #408]	; (8001488 <TM_DAC_SIGNAL_SetCustomSignal+0x264>)
 80012f0:	4b65      	ldr	r3, [pc, #404]	; (8001488 <TM_DAC_SIGNAL_SetCustomSignal+0x264>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
	/* Enable DMA1 clock */
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 80012fa:	4a63      	ldr	r2, [pc, #396]	; (8001488 <TM_DAC_SIGNAL_SetCustomSignal+0x264>)
 80012fc:	4b62      	ldr	r3, [pc, #392]	; (8001488 <TM_DAC_SIGNAL_SetCustomSignal+0x264>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
	
	/* Initialize DAC */
	DAC_InitStruct.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8001306:	2300      	movs	r3, #0
 8001308:	677b      	str	r3, [r7, #116]	; 0x74
	DAC_InitStruct.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 800130a:	2300      	movs	r3, #0
 800130c:	67fb      	str	r3, [r7, #124]	; 0x7c
	
	/* Disable DMA */
	if (DACx == TM_DAC1) {
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d106      	bne.n	8001322 <TM_DAC_SIGNAL_SetCustomSignal+0xfe>
		/* Init DAC channel 1 */
		DAC_Init(DAC_Channel_1, &DAC_InitStruct);
 8001314:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001318:	4619      	mov	r1, r3
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff fbc6 	bl	8000aac <DAC_Init>
 8001320:	e008      	b.n	8001334 <TM_DAC_SIGNAL_SetCustomSignal+0x110>
	} else if (DACx == TM_DAC2) {
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <TM_DAC_SIGNAL_SetCustomSignal+0x110>
		/* Init DAC channel 2 */
		DAC_Init(DAC_Channel_2, &DAC_InitStruct);
 8001328:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800132c:	4619      	mov	r1, r3
 800132e:	2010      	movs	r0, #16
 8001330:	f7ff fbbc 	bl	8000aac <DAC_Init>
	}
	
	/* Enable timer clock */
	TM_TIMER_PROPERTIES_EnableClock(DAC_TIM[DACx]);
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	4a4e      	ldr	r2, [pc, #312]	; (8001470 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 8001338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fc4f 	bl	8001be0 <TM_TIMER_PROPERTIES_EnableClock>
	
	/* Time base configuration */
	TIM_TimeBaseStructInit(&TIM_TimeBaseStruct); 
 8001342:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fe90 	bl	800106c <TIM_TimeBaseStructInit>
	TIM_TimeBaseStruct.TIM_Period = Timer_Data.Period - 1;          
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	3b01      	subs	r3, #1
 8001350:	66bb      	str	r3, [r7, #104]	; 0x68
	TIM_TimeBaseStruct.TIM_Prescaler = Timer_Data.Prescaler - 1;       
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	b29b      	uxth	r3, r3
 8001356:	3b01      	subs	r3, #1
 8001358:	b29b      	uxth	r3, r3
 800135a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	TIM_TimeBaseStruct.TIM_ClockDivision = 0;    
 800135e:	2300      	movs	r3, #0
 8001360:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	TIM_TimeBaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8001364:	2300      	movs	r3, #0
 8001366:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	
	/* Initialize timer */
	TIM_TimeBaseInit(DAC_TIM[DACx], &TIM_TimeBaseStruct);
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	4a40      	ldr	r2, [pc, #256]	; (8001470 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 800136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001372:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe0b 	bl	8000f94 <TIM_TimeBaseInit>

	/* Enable TIM selection */
	TIM_SelectOutputTrigger(DAC_TIM[DACx], TIM_TRGOSource_Update);
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	4a3b      	ldr	r2, [pc, #236]	; (8001470 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	2120      	movs	r1, #32
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe89 	bl	80010a0 <TIM_SelectOutputTrigger>
	
	/* Set DMA options */
	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)Signal_Data;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8001392:	2340      	movs	r3, #64	; 0x40
 8001394:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_InitStruct.DMA_BufferSize = Signal_Length;
 8001396:	89bb      	ldrh	r3, [r7, #12]
 8001398:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800139a:	2300      	movs	r3, #0
 800139c:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800139e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a2:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80013a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013a8:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80013aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ae:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_InitStruct.DMA_Mode = DMA_Mode_Circular;
 80013b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 80013b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ba:	653b      	str	r3, [r7, #80]	; 0x50
	DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;         
 80013bc:	2300      	movs	r3, #0
 80013be:	657b      	str	r3, [r7, #84]	; 0x54
	DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 80013c0:	2301      	movs	r3, #1
 80013c2:	65bb      	str	r3, [r7, #88]	; 0x58
	DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80013c4:	2300      	movs	r3, #0
 80013c6:	65fb      	str	r3, [r7, #92]	; 0x5c
	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80013c8:	2300      	movs	r3, #0
 80013ca:	663b      	str	r3, [r7, #96]	; 0x60
	
	switch (DACx) {
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <TM_DAC_SIGNAL_SetCustomSignal+0x1b4>
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d01b      	beq.n	800140e <TM_DAC_SIGNAL_SetCustomSignal+0x1ea>

			/* Enable DMA for DAC Channel 2 */
			DAC_DMACmd(DAC_Channel_2, ENABLE);
			break;
		default:
			break;
 80013d6:	e035      	b.n	8001444 <TM_DAC_SIGNAL_SetCustomSignal+0x220>
	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
	
	switch (DACx) {
		case TM_DAC1:
			/* Set peripheral location = 12bit right aligned for channel 1 */
			DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&DAC->DHR12R1;
 80013d8:	4b2c      	ldr	r3, [pc, #176]	; (800148c <TM_DAC_SIGNAL_SetCustomSignal+0x268>)
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
		
			/* Disable DMA */
			DMA_DeInit(DAC_SIGNAL_DMA_DAC1_STREAM);
 80013dc:	482c      	ldr	r0, [pc, #176]	; (8001490 <TM_DAC_SIGNAL_SetCustomSignal+0x26c>)
 80013de:	f7ff fbe7 	bl	8000bb0 <DMA_DeInit>
			
			/* Set channel used */
			DMA_InitStruct.DMA_Channel = DAC_SIGNAL_DMA_DAC1_CHANNEL;
 80013e2:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
		
			/* Initialize DMA */
			DMA_Init(DAC_SIGNAL_DMA_DAC1_STREAM, &DMA_InitStruct);
 80013e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ec:	4619      	mov	r1, r3
 80013ee:	4828      	ldr	r0, [pc, #160]	; (8001490 <TM_DAC_SIGNAL_SetCustomSignal+0x26c>)
 80013f0:	f7ff fcb2 	bl	8000d58 <DMA_Init>
			
			/* Enable DMA Stream for DAC Channel 1 */
			DMA_Cmd(DAC_SIGNAL_DMA_DAC1_STREAM, ENABLE);
 80013f4:	2101      	movs	r1, #1
 80013f6:	4826      	ldr	r0, [pc, #152]	; (8001490 <TM_DAC_SIGNAL_SetCustomSignal+0x26c>)
 80013f8:	f7ff fd06 	bl	8000e08 <DMA_Cmd>

			/* Enable DAC Channel 1 */
			DAC_Cmd(DAC_Channel_1, ENABLE);
 80013fc:	2101      	movs	r1, #1
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff fb88 	bl	8000b14 <DAC_Cmd>

			/* Enable DMA for DAC Channel 1 */
			DAC_DMACmd(DAC_Channel_1, ENABLE);
 8001404:	2101      	movs	r1, #1
 8001406:	2000      	movs	r0, #0
 8001408:	f7ff fbaa 	bl	8000b60 <DAC_DMACmd>
			break;
 800140c:	e01a      	b.n	8001444 <TM_DAC_SIGNAL_SetCustomSignal+0x220>
		case TM_DAC2:
			/* Disable DMA */
			DMA_DeInit(DAC_SIGNAL_DMA_DAC2_STREAM);
 800140e:	4821      	ldr	r0, [pc, #132]	; (8001494 <TM_DAC_SIGNAL_SetCustomSignal+0x270>)
 8001410:	f7ff fbce 	bl	8000bb0 <DMA_DeInit>
			
			/* Set channel used */
			DMA_InitStruct.DMA_Channel = DAC_SIGNAL_DMA_DAC2_CHANNEL;
 8001414:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
				
			/* Set peripheral location = 12bit right aligned for channel 2 */
			DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&DAC->DHR12R2;
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <TM_DAC_SIGNAL_SetCustomSignal+0x274>)
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
		
			/* Initialize DMA */
			DMA_Init(DAC_SIGNAL_DMA_DAC2_STREAM, &DMA_InitStruct);
 800141e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001422:	4619      	mov	r1, r3
 8001424:	481b      	ldr	r0, [pc, #108]	; (8001494 <TM_DAC_SIGNAL_SetCustomSignal+0x270>)
 8001426:	f7ff fc97 	bl	8000d58 <DMA_Init>
			
			/* Enable DMA Stream for DAC Channel 2 */
			DMA_Cmd(DAC_SIGNAL_DMA_DAC2_STREAM, ENABLE);
 800142a:	2101      	movs	r1, #1
 800142c:	4819      	ldr	r0, [pc, #100]	; (8001494 <TM_DAC_SIGNAL_SetCustomSignal+0x270>)
 800142e:	f7ff fceb 	bl	8000e08 <DMA_Cmd>

			/* Enable DAC Channel 2 */
			DAC_Cmd(DAC_Channel_2, ENABLE);
 8001432:	2101      	movs	r1, #1
 8001434:	2010      	movs	r0, #16
 8001436:	f7ff fb6d 	bl	8000b14 <DAC_Cmd>

			/* Enable DMA for DAC Channel 2 */
			DAC_DMACmd(DAC_Channel_2, ENABLE);
 800143a:	2101      	movs	r1, #1
 800143c:	2010      	movs	r0, #16
 800143e:	f7ff fb8f 	bl	8000b60 <DAC_DMACmd>
			break;
 8001442:	bf00      	nop
		default:
			break;
	}
	
	/* Enable timer */
	DAC_TIM[DACx]->CR1 |= TIM_CR1_CEN;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 8001448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	4908      	ldr	r1, [pc, #32]	; (8001470 <TM_DAC_SIGNAL_SetCustomSignal+0x24c>)
 8001450:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001454:	8812      	ldrh	r2, [r2, #0]
 8001456:	b292      	uxth	r2, r2
 8001458:	f042 0201 	orr.w	r2, r2, #1
 800145c:	b292      	uxth	r2, r2
 800145e:	801a      	strh	r2, [r3, #0]
	
	/* Return OK */
	return TM_DAC_SIGNAL_Result_Ok;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3780      	adds	r7, #128	; 0x80
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2001f4b0 	.word	0x2001f4b0
 8001470:	2001f4cc 	.word	0x2001f4cc
 8001474:	40000800 	.word	0x40000800
 8001478:	40000c00 	.word	0x40000c00
 800147c:	40001000 	.word	0x40001000
 8001480:	40001400 	.word	0x40001400
 8001484:	40010400 	.word	0x40010400
 8001488:	40023800 	.word	0x40023800
 800148c:	40007408 	.word	0x40007408
 8001490:	40026088 	.word	0x40026088
 8001494:	400260a0 	.word	0x400260a0
 8001498:	40007414 	.word	0x40007414

0800149c <TM_DMA_ClearFlag>:
void TM_DMA_ClearFlags(DMA_Stream_TypeDef* DMA_Stream) {
	/* Clear all flags */
	TM_DMA_ClearFlag(DMA_Stream, DMA_FLAG_ALL);
}

void TM_DMA_ClearFlag(DMA_Stream_TypeDef* DMA_Stream, uint32_t flag) {
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
	uint32_t location;
	uint32_t stream_number;

	/* Check stream value */
	if (DMA_Stream < DMA2_Stream0) {
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a18      	ldr	r2, [pc, #96]	; (800150c <TM_DMA_ClearFlag+0x70>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d80a      	bhi.n	80014c4 <TM_DMA_ClearFlag+0x28>
		location = (uint32_t)&DMA1->LIFCR;
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <TM_DMA_ClearFlag+0x74>)
 80014b0:	60fb      	str	r3, [r7, #12]
		stream_number = GET_STREAM_NUMBER_DMA1(DMA_Stream);
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <TM_DMA_ClearFlag+0x78>)
 80014b6:	4413      	add	r3, r2
 80014b8:	4a17      	ldr	r2, [pc, #92]	; (8001518 <TM_DMA_ClearFlag+0x7c>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	091b      	lsrs	r3, r3, #4
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	e009      	b.n	80014d8 <TM_DMA_ClearFlag+0x3c>
	} else {
		location = (uint32_t)&DMA2->LIFCR;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <TM_DMA_ClearFlag+0x80>)
 80014c6:	60fb      	str	r3, [r7, #12]
		stream_number = GET_STREAM_NUMBER_DMA2(DMA_Stream);
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <TM_DMA_ClearFlag+0x84>)
 80014cc:	4413      	add	r3, r2
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <TM_DMA_ClearFlag+0x7c>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	091b      	lsrs	r3, r3, #4
 80014d6:	60bb      	str	r3, [r7, #8]
	}
	
	/* Get register offset */
	if (stream_number >= 4) {
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d905      	bls.n	80014ea <TM_DMA_ClearFlag+0x4e>
		/* High registers for DMA clear */
		location += 4;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3304      	adds	r3, #4
 80014e2:	60fb      	str	r3, [r7, #12]
		
		/* Do offset for high DMA registers */
		stream_number -= 4;
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3b04      	subs	r3, #4
 80014e8:	60bb      	str	r3, [r7, #8]
	}
	
	/* Clear flags */
	*(__IO uint32_t *)location = (flag & DMA_FLAG_ALL) << DMA_Flags_Bit_Pos[stream_number];
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	f002 023d 	and.w	r2, r2, #61	; 0x3d
 80014f2:	480c      	ldr	r0, [pc, #48]	; (8001524 <TM_DMA_ClearFlag+0x88>)
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	4401      	add	r1, r0
 80014f8:	7809      	ldrb	r1, [r1, #0]
 80014fa:	408a      	lsls	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	4002640f 	.word	0x4002640f
 8001510:	40026008 	.word	0x40026008
 8001514:	bffd9ff0 	.word	0xbffd9ff0
 8001518:	aaaaaaab 	.word	0xaaaaaaab
 800151c:	40026408 	.word	0x40026408
 8001520:	bffd9bf0 	.word	0xbffd9bf0
 8001524:	08002000 	.word	0x08002000

08001528 <TM_DMA_GetFlags>:

uint32_t TM_DMA_GetFlags(DMA_Stream_TypeDef* DMA_Stream, uint32_t flag) {
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
	uint32_t stream_number = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
	uint32_t location = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
	uint32_t flags = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
	
	/* Check stream value */
	if (DMA_Stream < DMA2_Stream0) {
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <TM_DMA_GetFlags+0x88>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d80a      	bhi.n	800155c <TM_DMA_GetFlags+0x34>
		location = (uint32_t)&DMA1->LISR;
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <TM_DMA_GetFlags+0x8c>)
 8001548:	613b      	str	r3, [r7, #16]
		stream_number = GET_STREAM_NUMBER_DMA1(DMA_Stream);
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <TM_DMA_GetFlags+0x90>)
 800154e:	4413      	add	r3, r2
 8001550:	4a1a      	ldr	r2, [pc, #104]	; (80015bc <TM_DMA_GetFlags+0x94>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	091b      	lsrs	r3, r3, #4
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	e009      	b.n	8001570 <TM_DMA_GetFlags+0x48>
	} else {
		location = (uint32_t)&DMA2->LISR;
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <TM_DMA_GetFlags+0x98>)
 800155e:	613b      	str	r3, [r7, #16]
		stream_number = GET_STREAM_NUMBER_DMA2(DMA_Stream);
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <TM_DMA_GetFlags+0x9c>)
 8001564:	4413      	add	r3, r2
 8001566:	4a15      	ldr	r2, [pc, #84]	; (80015bc <TM_DMA_GetFlags+0x94>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	091b      	lsrs	r3, r3, #4
 800156e:	617b      	str	r3, [r7, #20]
	}
	
	/* Get register offset */
	if (stream_number >= 4) {
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d905      	bls.n	8001582 <TM_DMA_GetFlags+0x5a>
		/* High registers for DMA clear */
		location += 4;
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	3304      	adds	r3, #4
 800157a:	613b      	str	r3, [r7, #16]
		
		/* Do offset for high DMA registers */
		stream_number -= 4;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	3b04      	subs	r3, #4
 8001580:	617b      	str	r3, [r7, #20]
	}
	
	/* Get register value */
	flags =   *(__IO uint32_t *)location;
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	60fb      	str	r3, [r7, #12]
	flags >>= DMA_Flags_Bit_Pos[stream_number];
 8001588:	4a0f      	ldr	r2, [pc, #60]	; (80015c8 <TM_DMA_GetFlags+0xa0>)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	4413      	add	r3, r2
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	40d3      	lsrs	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
	flags &=  DMA_FLAG_ALL;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800159e:	60fb      	str	r3, [r7, #12]
	
	/* Return value */
	return flags;
 80015a0:	68fb      	ldr	r3, [r7, #12]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	4002640f 	.word	0x4002640f
 80015b4:	40026000 	.word	0x40026000
 80015b8:	bffd9ff0 	.word	0xbffd9ff0
 80015bc:	aaaaaaab 	.word	0xaaaaaaab
 80015c0:	40026400 	.word	0x40026400
 80015c4:	bffd9bf0 	.word	0xbffd9bf0
 80015c8:	08002000 	.word	0x08002000

080015cc <TM_DMA_TransferCompleteHandler>:


/*****************************************************************/
/*                 DMA INTERRUPT USER CALLBACKS                  */
/*****************************************************************/
__weak void TM_DMA_TransferCompleteHandler(DMA_Stream_TypeDef* DMA_Stream) {
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_TransferCompleteHandler could be implemented in the user file
	*/
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <TM_DMA_HalfTransferCompleteHandler>:

__weak void TM_DMA_HalfTransferCompleteHandler(DMA_Stream_TypeDef* DMA_Stream) {
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_HalfTransferCompleteHandler could be implemented in the user file
	*/
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <TM_DMA_TransferErrorHandler>:

__weak void TM_DMA_TransferErrorHandler(DMA_Stream_TypeDef* DMA_Stream) {
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_TransferErrorHandler could be implemented in the user file
	*/
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <TM_DMA_DirectModeErrorHandler>:

__weak void TM_DMA_DirectModeErrorHandler(DMA_Stream_TypeDef* DMA_Stream) {
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_DirectModeErrorHandler could be implemented in the user file
	*/
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <TM_DMA_FIFOErrorHandler>:

__weak void TM_DMA_FIFOErrorHandler(DMA_Stream_TypeDef* DMA_Stream) {
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_FIFOErrorHandler could be implemented in the user file
	*/
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <TM_DMA_INT_ProcessInterrupt>:

/*****************************************************************/
/*                    DMA INTERNAL FUNCTIONS                     */
/*****************************************************************/
static void TM_DMA_INT_ProcessInterrupt(DMA_Stream_TypeDef* DMA_Stream) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	/* Get DMA interrupt status flags */
	uint16_t flags = TM_DMA_GetFlags(DMA_Stream, DMA_FLAG_ALL);
 8001638:	213d      	movs	r1, #61	; 0x3d
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ff74 	bl	8001528 <TM_DMA_GetFlags>
 8001640:	4603      	mov	r3, r0
 8001642:	81fb      	strh	r3, [r7, #14]
	
	/* Clear flags */
	TM_DMA_ClearFlag(DMA_Stream, DMA_FLAG_ALL);
 8001644:	213d      	movs	r1, #61	; 0x3d
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff28 	bl	800149c <TM_DMA_ClearFlag>
	
	/* Call user callback function */
	
	/* Check transfer complete flag */
	if ((flags & DMA_FLAG_TCIF) && (DMA_Stream->CR & DMA_SxCR_TCIE)) {
 800164c:	89fb      	ldrh	r3, [r7, #14]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b00      	cmp	r3, #0
 8001654:	d008      	beq.n	8001668 <TM_DMA_INT_ProcessInterrupt+0x38>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <TM_DMA_INT_ProcessInterrupt+0x38>
		TM_DMA_TransferCompleteHandler(DMA_Stream);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffb2 	bl	80015cc <TM_DMA_TransferCompleteHandler>
	}
	/* Check half-transfer complete flag */
	if ((flags & DMA_FLAG_HTIF) && (DMA_Stream->CR & DMA_SxCR_HTIE)) {
 8001668:	89fb      	ldrh	r3, [r7, #14]
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <TM_DMA_INT_ProcessInterrupt+0x54>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <TM_DMA_INT_ProcessInterrupt+0x54>
		TM_DMA_HalfTransferCompleteHandler(DMA_Stream);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffae 	bl	80015e0 <TM_DMA_HalfTransferCompleteHandler>
	}
	/* Check transfer error flag */
	if ((flags & DMA_FLAG_TEIF) && (DMA_Stream->CR & DMA_SxCR_TEIE)) {
 8001684:	89fb      	ldrh	r3, [r7, #14]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d008      	beq.n	80016a0 <TM_DMA_INT_ProcessInterrupt+0x70>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <TM_DMA_INT_ProcessInterrupt+0x70>
		TM_DMA_TransferErrorHandler(DMA_Stream);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ffaa 	bl	80015f4 <TM_DMA_TransferErrorHandler>
	}
	/* Check direct error flag */
	if ((flags & DMA_FLAG_DMEIF) && (DMA_Stream->CR & DMA_SxCR_DMEIE)) {
 80016a0:	89fb      	ldrh	r3, [r7, #14]
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d008      	beq.n	80016bc <TM_DMA_INT_ProcessInterrupt+0x8c>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <TM_DMA_INT_ProcessInterrupt+0x8c>
		TM_DMA_DirectModeErrorHandler(DMA_Stream);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffa6 	bl	8001608 <TM_DMA_DirectModeErrorHandler>
	}
	/* Check FIFO error flag */
	if ((flags & DMA_FLAG_FEIF) && (DMA_Stream->FCR & DMA_SxFCR_FEIE)) {
 80016bc:	89fb      	ldrh	r3, [r7, #14]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d008      	beq.n	80016d8 <TM_DMA_INT_ProcessInterrupt+0xa8>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <TM_DMA_INT_ProcessInterrupt+0xa8>
		TM_DMA_FIFOErrorHandler(DMA_Stream);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffa2 	bl	800161c <TM_DMA_FIFOErrorHandler>
	}
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <DMA1_Stream0_IRQHandler>:

/* Handle all DMA interrupt handlers possible */
#ifndef DMA1_STREAM0_DISABLE_IRQHANDLER
void DMA1_Stream0_IRQHandler(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream0);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <DMA1_Stream0_IRQHandler+0x10>)
 80016e6:	f7ff ffa3 	bl	8001630 <TM_DMA_INT_ProcessInterrupt>
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40026010 	.word	0x40026010

080016f4 <DMA1_Stream1_IRQHandler>:
#endif
#ifndef DMA1_STREAM1_DISABLE_IRQHANDLER
void DMA1_Stream1_IRQHandler(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream1);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <DMA1_Stream1_IRQHandler+0x10>)
 80016fa:	f7ff ff99 	bl	8001630 <TM_DMA_INT_ProcessInterrupt>
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40026028 	.word	0x40026028

08001708 <DMA1_Stream2_IRQHandler>:
#endif
#ifndef DMA1_STREAM2_DISABLE_IRQHANDLER
void DMA1_Stream2_IRQHandler(void) {
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream2);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <DMA1_Stream2_IRQHandler+0x10>)
 800170e:	f7ff ff8f 	bl	8001630 <TM_DMA_INT_ProcessInterrupt>
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40026040 	.word	0x40026040

0800171c <DMA1_Stream3_IRQHandler>:
#endif
#ifndef DMA1_STREAM3_DISABLE_IRQHANDLER
void DMA1_Stream3_IRQHandler(void) {
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream3);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <DMA1_Stream3_IRQHandler+0x10>)
 8001722:	f7ff ff85 	bl	8001630 <TM_DMA_INT_ProcessInterrupt>
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40026058 	.word	0x40026058

08001730 <DMA1_Stream4_IRQHandler>:
#endif
#ifndef DMA1_STREAM4_DISABLE_IRQHANDLER
void DMA1_Stream4_IRQHandler(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream4);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <DMA1_Stream4_IRQHandler+0x10>)
 8001736:	f7ff ff7b 	bl	8001630 <TM_DMA_INT_ProcessInterrupt>
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40026070 	.word	0x40026070

08001744 <DMA1_Stream5_IRQHandler>:
#endif
#ifndef DMA1_STREAM5_DISABLE_IRQHANDLER
void DMA1_Stream5_IRQHandler(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream5);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <DMA1_Stream5_IRQHandler+0x10>)
 800174a:	f7ff ff71 	bl	8001630 <TM_DMA_INT_ProcessInterrupt>
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40026088 	.word	0x40026088

08001758 <DMA1_Stream6_IRQHandler>:
#endif
#ifndef DMA1_STREAM6_DISABLE_IRQHANDLER
void DMA1_Stream6_IRQHandler(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream6);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <DMA1_Stream6_IRQHandler+0x10>)
 800175e:	f7ff ff67 	bl	8001630 <TM_DMA_INT_ProcessInterrupt>
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	400260a0 	.word	0x400260a0

0800176c <DMA1_Stream7_IRQHandler>:
#endif
#ifndef DMA1_STREAM7_DISABLE_IRQHANDLER
void DMA1_Stream7_IRQHandler(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream7);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <DMA1_Stream7_IRQHandler+0x10>)
 8001772:	f7ff ff5d 	bl	8001630 <TM_DMA_INT_ProcessInterrupt>
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	400260b8 	.word	0x400260b8

08001780 <DMA2_Stream0_IRQHandler>:
#endif
#ifndef DMA2_STREAM0_DISABLE_IRQHANDLER
void DMA2_Stream0_IRQHandler(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream0);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <DMA2_Stream0_IRQHandler+0x10>)
 8001786:	f7ff ff53 	bl	8001630 <TM_DMA_INT_ProcessInterrupt>

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40026410 	.word	0x40026410

08001794 <DMA2_Stream1_IRQHandler>:
#endif
#ifndef DMA2_STREAM1_DISABLE_IRQHANDLER
void DMA2_Stream1_IRQHandler(void) {
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream1);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <DMA2_Stream1_IRQHandler+0x10>)
 800179a:	f7ff ff49 	bl	8001630 <TM_DMA_INT_ProcessInterrupt>
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40026428 	.word	0x40026428

080017a8 <DMA2_Stream2_IRQHandler>:
#endif
#ifndef DMA2_STREAM2_DISABLE_IRQHANDLER
void DMA2_Stream2_IRQHandler(void) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream2);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <DMA2_Stream2_IRQHandler+0x10>)
 80017ae:	f7ff ff3f 	bl	8001630 <TM_DMA_INT_ProcessInterrupt>
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40026440 	.word	0x40026440

080017bc <DMA2_Stream3_IRQHandler>:
#endif
#ifndef DMA2_STREAM3_DISABLE_IRQHANDLER
void DMA2_Stream3_IRQHandler(void) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream3);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <DMA2_Stream3_IRQHandler+0x10>)
 80017c2:	f7ff ff35 	bl	8001630 <TM_DMA_INT_ProcessInterrupt>
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40026458 	.word	0x40026458

080017d0 <DMA2_Stream4_IRQHandler>:
#endif
#ifndef DMA2_STREAM4_DISABLE_IRQHANDLER
void DMA2_Stream4_IRQHandler(void) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream4);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <DMA2_Stream4_IRQHandler+0x10>)
 80017d6:	f7ff ff2b 	bl	8001630 <TM_DMA_INT_ProcessInterrupt>
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40026470 	.word	0x40026470

080017e4 <DMA2_Stream5_IRQHandler>:
#endif
#ifndef DMA2_STREAM5_DISABLE_IRQHANDLER
void DMA2_Stream5_IRQHandler(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream5);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <DMA2_Stream5_IRQHandler+0x10>)
 80017ea:	f7ff ff21 	bl	8001630 <TM_DMA_INT_ProcessInterrupt>
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40026488 	.word	0x40026488

080017f8 <DMA2_Stream6_IRQHandler>:
#endif
#ifndef DMA2_STREAM6_DISABLE_IRQHANDLER
void DMA2_Stream6_IRQHandler(void) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream6);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <DMA2_Stream6_IRQHandler+0x10>)
 80017fe:	f7ff ff17 	bl	8001630 <TM_DMA_INT_ProcessInterrupt>
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	400264a0 	.word	0x400264a0

0800180c <DMA2_Stream7_IRQHandler>:
#endif
#ifndef DMA2_STREAM7_DISABLE_IRQHANDLER
void DMA2_Stream7_IRQHandler(void) {
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream7);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <DMA2_Stream7_IRQHandler+0x10>)
 8001812:	f7ff ff0d 	bl	8001630 <TM_DMA_INT_ProcessInterrupt>
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	400264b8 	.word	0x400264b8

08001820 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af02      	add	r7, sp, #8
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	4608      	mov	r0, r1
 800182a:	4611      	mov	r1, r2
 800182c:	461a      	mov	r2, r3
 800182e:	4603      	mov	r3, r0
 8001830:	807b      	strh	r3, [r7, #2]
 8001832:	460b      	mov	r3, r1
 8001834:	707b      	strb	r3, [r7, #1]
 8001836:	4613      	mov	r3, r2
 8001838:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00e      	beq.n	800185e <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f823 	bl	800188c <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8001846:	7838      	ldrb	r0, [r7, #0]
 8001848:	787a      	ldrb	r2, [r7, #1]
 800184a:	8879      	ldrh	r1, [r7, #2]
 800184c:	7d3b      	ldrb	r3, [r7, #20]
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	7c3b      	ldrb	r3, [r7, #16]
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	4603      	mov	r3, r0
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f830 	bl	80018bc <TM_GPIO_INT_Init>
 800185c:	e000      	b.n	8001860 <TM_GPIO_Init+0x40>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 800185e:	bf00      	nop
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop

08001868 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8001876:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800187a:	0a9b      	lsrs	r3, r3, #10
 800187c:	b29b      	uxth	r3, r3
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop

0800188c <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ffe7 	bl	8001868 <TM_GPIO_GetPortSource>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	2301      	movs	r3, #1
 80018a0:	fa03 f102 	lsl.w	r1, r3, r2
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <TM_GPIO_INT_EnableClock+0x2c>)
 80018a6:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <TM_GPIO_INT_EnableClock+0x2c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	430b      	orrs	r3, r1
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800

080018bc <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	4608      	mov	r0, r1
 80018c6:	4611      	mov	r1, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	807b      	strh	r3, [r7, #2]
 80018ce:	460b      	mov	r3, r1
 80018d0:	707b      	strb	r3, [r7, #1]
 80018d2:	4613      	mov	r3, r2
 80018d4:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffc6 	bl	8001868 <TM_GPIO_GetPortSource>
 80018dc:	4603      	mov	r3, r0
 80018de:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	e067      	b.n	80019b6 <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	fa42 f303 	asr.w	r3, r2, r3
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d05b      	beq.n	80019ae <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80018f6:	7bbb      	ldrb	r3, [r7, #14]
 80018f8:	7bba      	ldrb	r2, [r7, #14]
 80018fa:	4932      	ldr	r1, [pc, #200]	; (80019c4 <TM_GPIO_INT_Init+0x108>)
 80018fc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001900:	b211      	sxth	r1, r2
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	b212      	sxth	r2, r2
 800190c:	430a      	orrs	r2, r1
 800190e:	b212      	sxth	r2, r2
 8001910:	b291      	uxth	r1, r2
 8001912:	4a2c      	ldr	r2, [pc, #176]	; (80019c4 <TM_GPIO_INT_Init+0x108>)
 8001914:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	0052      	lsls	r2, r2, #1
 8001920:	2103      	movs	r1, #3
 8001922:	fa01 f202 	lsl.w	r2, r1, r2
 8001926:	43d2      	mvns	r2, r2
 8001928:	4013      	ands	r3, r2
 800192a:	7e39      	ldrb	r1, [r7, #24]
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	0052      	lsls	r2, r2, #1
 8001930:	fa01 f202 	lsl.w	r2, r1, r2
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2103      	movs	r1, #3
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	4013      	ands	r3, r2
 800194c:	7879      	ldrb	r1, [r7, #1]
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	0052      	lsls	r2, r2, #1
 8001952:	fa01 f202 	lsl.w	r2, r1, r2
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 800195c:	787b      	ldrb	r3, [r7, #1]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d002      	beq.n	8001968 <TM_GPIO_INT_Init+0xac>
 8001962:	787b      	ldrb	r3, [r7, #1]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d123      	bne.n	80019b0 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	2101      	movs	r1, #1
 8001970:	fa01 f202 	lsl.w	r2, r1, r2
 8001974:	b292      	uxth	r2, r2
 8001976:	43d2      	mvns	r2, r2
 8001978:	401a      	ands	r2, r3
 800197a:	7839      	ldrb	r1, [r7, #0]
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	b29b      	uxth	r3, r3
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2103      	movs	r1, #3
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	4013      	ands	r3, r2
 800199c:	7f39      	ldrb	r1, [r7, #28]
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	0052      	lsls	r2, r2, #1
 80019a2:	fa01 f202 	lsl.w	r2, r1, r2
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	e000      	b.n	80019b0 <TM_GPIO_INT_Init+0xf4>
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 80019ae:	bf00      	nop
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	3301      	adds	r3, #1
 80019b4:	73fb      	strb	r3, [r7, #15]
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d994      	bls.n	80018e6 <TM_GPIO_INT_Init+0x2a>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	2001f4b4 	.word	0x2001f4b4

080019c8 <TM_TIMER_PROPERTIES_GetTimerProperties>:
 * | along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32f4_timer_properties.h"

TM_TIMER_PROPERTIES_Result_t TM_TIMER_PROPERTIES_GetTimerProperties(TIM_TypeDef* TIMx, TM_TIMER_PROPERTIES_t* Timer_Data) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
	RCC_ClocksTypeDef RCC_ClocksStruct;

	/* Get clocks */
	RCC_GetClocksFreq(&RCC_ClocksStruct);
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fa32 	bl	8000e40 <RCC_GetClocksFreq>
	
	/* All timers have 16-bit prescaler */
	Timer_Data->MaxPrescaler = 0xFFFF;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019e2:	609a      	str	r2, [r3, #8]
	
	if (0 /* 32bit timers with PCLK2 max frequency */
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ea:	d003      	beq.n	80019f4 <TM_TIMER_PROPERTIES_GetTimerProperties+0x2c>
#ifdef TIM2
		|| TIMx == TIM2
#endif
#ifdef TIM5
		|| TIMx == TIM5
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a29      	ldr	r2, [pc, #164]	; (8001a94 <TM_TIMER_PROPERTIES_GetTimerProperties+0xcc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d108      	bne.n	8001a06 <TM_TIMER_PROPERTIES_GetTimerProperties+0x3e>
#endif
	) {
		Timer_Data->TimerFrequency = RCC_ClocksStruct.PCLK2_Frequency;	/* Clock */
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	601a      	str	r2, [r3, #0]
		Timer_Data->MaxPeriod = 0xFFFFFFFF;								/* Max period */
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	605a      	str	r2, [r3, #4]
		
		/* Timer valid */
		return TM_TIMER_PROPERTIES_Result_Ok;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e042      	b.n	8001a8c <TM_TIMER_PROPERTIES_GetTimerProperties+0xc4>
	} else if (0	/* 16bit timers with HCLK clock frequency */
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <TM_TIMER_PROPERTIES_GetTimerProperties+0xd0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00f      	beq.n	8001a2e <TM_TIMER_PROPERTIES_GetTimerProperties+0x66>
#ifdef TIM1
		|| TIMx == TIM1
#endif
#ifdef TIM8
		|| TIMx == TIM8
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a22      	ldr	r2, [pc, #136]	; (8001a9c <TM_TIMER_PROPERTIES_GetTimerProperties+0xd4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00b      	beq.n	8001a2e <TM_TIMER_PROPERTIES_GetTimerProperties+0x66>
#endif
#ifdef TIM9
		|| TIMx == TIM9
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a21      	ldr	r2, [pc, #132]	; (8001aa0 <TM_TIMER_PROPERTIES_GetTimerProperties+0xd8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d007      	beq.n	8001a2e <TM_TIMER_PROPERTIES_GetTimerProperties+0x66>
#endif
#ifdef TIM10
		|| TIMx == TIM10
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a20      	ldr	r2, [pc, #128]	; (8001aa4 <TM_TIMER_PROPERTIES_GetTimerProperties+0xdc>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d003      	beq.n	8001a2e <TM_TIMER_PROPERTIES_GetTimerProperties+0x66>
#endif
#ifdef TIM11
		|| TIMx == TIM11
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a1f      	ldr	r2, [pc, #124]	; (8001aa8 <TM_TIMER_PROPERTIES_GetTimerProperties+0xe0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d108      	bne.n	8001a40 <TM_TIMER_PROPERTIES_GetTimerProperties+0x78>
#endif
	) {
		Timer_Data->TimerFrequency = RCC_ClocksStruct.HCLK_Frequency;	/* Clock */
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	601a      	str	r2, [r3, #0]
		Timer_Data->MaxPeriod = 0xFFFF;									/* Max period */
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a3a:	605a      	str	r2, [r3, #4]
		
		/* Timer valid */
		return TM_TIMER_PROPERTIES_Result_Ok;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e025      	b.n	8001a8c <TM_TIMER_PROPERTIES_GetTimerProperties+0xc4>
	} else if (0	/* 16bit timers with PCLK2 clock frequency */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a1a      	ldr	r2, [pc, #104]	; (8001aac <TM_TIMER_PROPERTIES_GetTimerProperties+0xe4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d017      	beq.n	8001a78 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
#ifdef TIM3
		|| TIMx == TIM3
#endif
#ifdef TIM4
		|| TIMx == TIM4
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <TM_TIMER_PROPERTIES_GetTimerProperties+0xe8>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d013      	beq.n	8001a78 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
#endif
#ifdef TIM6
		|| TIMx == TIM6
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a18      	ldr	r2, [pc, #96]	; (8001ab4 <TM_TIMER_PROPERTIES_GetTimerProperties+0xec>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d00f      	beq.n	8001a78 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
#endif
#ifdef TIM7
		|| TIMx == TIM7
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <TM_TIMER_PROPERTIES_GetTimerProperties+0xf0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00b      	beq.n	8001a78 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
#endif
#ifdef TIM12
		|| TIMx == TIM12
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a16      	ldr	r2, [pc, #88]	; (8001abc <TM_TIMER_PROPERTIES_GetTimerProperties+0xf4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d007      	beq.n	8001a78 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
#endif
#ifdef TIM13
		|| TIMx == TIM13
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <TM_TIMER_PROPERTIES_GetTimerProperties+0xf8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d003      	beq.n	8001a78 <TM_TIMER_PROPERTIES_GetTimerProperties+0xb0>
#endif
#ifdef TIM14
		|| TIMx == TIM14
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <TM_TIMER_PROPERTIES_GetTimerProperties+0xfc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d108      	bne.n	8001a8a <TM_TIMER_PROPERTIES_GetTimerProperties+0xc2>
#endif
	) {
		Timer_Data->TimerFrequency = RCC_ClocksStruct.PCLK2_Frequency;	/* Clock */
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	601a      	str	r2, [r3, #0]
		Timer_Data->MaxPeriod = 0xFFFF;									/* Max period */
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a84:	605a      	str	r2, [r3, #4]
		
		/* Timer valid */
		return TM_TIMER_PROPERTIES_Result_Ok;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <TM_TIMER_PROPERTIES_GetTimerProperties+0xc4>
	}
	
	/* Timer is not valid */
	return TM_TIMER_PROPERTIES_Result_TimerNotValid;
 8001a8a:	2302      	movs	r3, #2
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40000c00 	.word	0x40000c00
 8001a98:	40010000 	.word	0x40010000
 8001a9c:	40010400 	.word	0x40010400
 8001aa0:	40014000 	.word	0x40014000
 8001aa4:	40014400 	.word	0x40014400
 8001aa8:	40014800 	.word	0x40014800
 8001aac:	40000400 	.word	0x40000400
 8001ab0:	40000800 	.word	0x40000800
 8001ab4:	40001000 	.word	0x40001000
 8001ab8:	40001400 	.word	0x40001400
 8001abc:	40001800 	.word	0x40001800
 8001ac0:	40001c00 	.word	0x40001c00
 8001ac4:	40002000 	.word	0x40002000

08001ac8 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency>:

TM_TIMER_PROPERTIES_Result_t TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency(TM_TIMER_PROPERTIES_t* Timer_Data, double frequency) {
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	ed87 0b00 	vstr	d0, [r7]
	if (frequency > Timer_Data->TimerFrequency) {
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fcb7 	bl	800044c <__aeabi_ui2d>
 8001ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ae2:	f7fe ff9b 	bl	8000a1c <__aeabi_dcmplt>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00a      	beq.n	8001b02 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x3a>
		/* Reset values */
		Timer_Data->Prescaler = 0;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
		Timer_Data->Period = 0;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	60da      	str	r2, [r3, #12]
		Timer_Data->Frequency = 0;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	615a      	str	r2, [r3, #20]
		
		/* Frequency too high */
		return TM_TIMER_PROPERTIES_Result_FrequencyTooHigh;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e069      	b.n	8001bd6 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x10e>
	} else if (frequency == 0) {
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b0e:	f7fe ff7b 	bl	8000a08 <__aeabi_dcmpeq>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00a      	beq.n	8001b2e <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x66>
		/* Reset values */
		Timer_Data->Prescaler = 0;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
		Timer_Data->Period = 0;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	60da      	str	r2, [r3, #12]
		Timer_Data->Frequency = 0;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	615a      	str	r2, [r3, #20]
		
		/* Not valid frequency */
		return TM_TIMER_PROPERTIES_Result_FrequencyTooLow;
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	e053      	b.n	8001bd6 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x10e>
	}
	
	/* Fix for 16/32bit timers */
	if (Timer_Data->MaxPeriod <= 0xFFFF) {
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b36:	d204      	bcs.n	8001b42 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x7a>
		Timer_Data->MaxPeriod++;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	605a      	str	r2, [r3, #4]
	}
	
	/* Get minimum prescaler and maximum resolution for timer */
	Timer_Data->Prescaler = 0;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
	do {
		/* Get clock */
		Timer_Data->Period = (Timer_Data->TimerFrequency / (Timer_Data->Prescaler + 1));
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	3301      	adds	r3, #1
 8001b52:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	60da      	str	r2, [r3, #12]
		/* Get period */
		Timer_Data->Period = (Timer_Data->Period / frequency);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fc74 	bl	800044c <__aeabi_ui2d>
 8001b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b68:	f7fe fe10 	bl	800078c <__aeabi_ddiv>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	460c      	mov	r4, r1
 8001b70:	4618      	mov	r0, r3
 8001b72:	4621      	mov	r1, r4
 8001b74:	f7fe ff7a 	bl	8000a6c <__aeabi_d2uiz>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	60da      	str	r2, [r3, #12]
		/* Increase prescaler value */
		Timer_Data->Prescaler++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	611a      	str	r2, [r3, #16]
	} while (Timer_Data->Period > (Timer_Data->MaxPeriod) && Timer_Data->Prescaler <= (Timer_Data->MaxPrescaler + 1));
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d906      	bls.n	8001ba2 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0xda>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d9d2      	bls.n	8001b48 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x80>
	/* Check for too low frequency */ 
	if (Timer_Data->Prescaler > (Timer_Data->MaxPrescaler + 1)) {
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	691a      	ldr	r2, [r3, #16]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	3301      	adds	r3, #1
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d90a      	bls.n	8001bc6 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0xfe>
		/* Reset values */
		Timer_Data->Prescaler = 0;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
		Timer_Data->Period = 0;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	60da      	str	r2, [r3, #12]
		Timer_Data->Frequency = 0;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
		
		/* Prescaler too high, frequency is too low for use */
		return TM_TIMER_PROPERTIES_Result_FrequencyTooLow;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	e007      	b.n	8001bd6 <TM_TIMER_PROPERTIES_GenerateDataForWorkingFrequency+0x10e>
	}
	
	/* Set frequency */
	Timer_Data->Frequency = frequency;
 8001bc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bca:	f7fe ff4f 	bl	8000a6c <__aeabi_d2uiz>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	615a      	str	r2, [r3, #20]
	
	/* Return OK */
	return TM_TIMER_PROPERTIES_Result_Ok;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd90      	pop	{r4, r7, pc}
 8001bde:	bf00      	nop

08001be0 <TM_TIMER_PROPERTIES_EnableClock>:

TM_TIMER_PROPERTIES_Result_t TM_TIMER_PROPERTIES_EnableClock(TIM_TypeDef* TIMx) {
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
#ifdef TIM1
	if (TIMx == TIM1) {
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a49      	ldr	r2, [pc, #292]	; (8001d10 <TM_TIMER_PROPERTIES_EnableClock+0x130>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d105      	bne.n	8001bfc <TM_TIMER_PROPERTIES_EnableClock+0x1c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001bf0:	4a48      	ldr	r2, [pc, #288]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001bf2:	4b48      	ldr	r3, [pc, #288]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6453      	str	r3, [r2, #68]	; 0x44
	}
#endif
#ifdef TIM2
	if (TIMx == TIM2) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c02:	d105      	bne.n	8001c10 <TM_TIMER_PROPERTIES_EnableClock+0x30>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001c04:	4a43      	ldr	r2, [pc, #268]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001c06:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
#ifdef TIM3
	if (TIMx == TIM3) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a41      	ldr	r2, [pc, #260]	; (8001d18 <TM_TIMER_PROPERTIES_EnableClock+0x138>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d105      	bne.n	8001c24 <TM_TIMER_PROPERTIES_EnableClock+0x44>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001c18:	4a3e      	ldr	r2, [pc, #248]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
#ifdef TIM4
	if (TIMx == TIM4) {
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a3d      	ldr	r2, [pc, #244]	; (8001d1c <TM_TIMER_PROPERTIES_EnableClock+0x13c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d105      	bne.n	8001c38 <TM_TIMER_PROPERTIES_EnableClock+0x58>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001c2c:	4a39      	ldr	r2, [pc, #228]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001c2e:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f043 0304 	orr.w	r3, r3, #4
 8001c36:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
#ifdef TIM5
	if (TIMx == TIM5) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a39      	ldr	r2, [pc, #228]	; (8001d20 <TM_TIMER_PROPERTIES_EnableClock+0x140>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d105      	bne.n	8001c4c <TM_TIMER_PROPERTIES_EnableClock+0x6c>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001c40:	4a34      	ldr	r2, [pc, #208]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001c42:	4b34      	ldr	r3, [pc, #208]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f043 0308 	orr.w	r3, r3, #8
 8001c4a:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
#ifdef TIM6
	if (TIMx == TIM6) {
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a35      	ldr	r2, [pc, #212]	; (8001d24 <TM_TIMER_PROPERTIES_EnableClock+0x144>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d105      	bne.n	8001c60 <TM_TIMER_PROPERTIES_EnableClock+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8001c54:	4a2f      	ldr	r2, [pc, #188]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001c56:	4b2f      	ldr	r3, [pc, #188]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f043 0310 	orr.w	r3, r3, #16
 8001c5e:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
#ifdef TIM7
	if (TIMx == TIM7) {
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a31      	ldr	r2, [pc, #196]	; (8001d28 <TM_TIMER_PROPERTIES_EnableClock+0x148>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d105      	bne.n	8001c74 <TM_TIMER_PROPERTIES_EnableClock+0x94>
		RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 8001c68:	4a2a      	ldr	r2, [pc, #168]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f043 0320 	orr.w	r3, r3, #32
 8001c72:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
#ifdef TIM8
	if (TIMx == TIM8) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a2d      	ldr	r2, [pc, #180]	; (8001d2c <TM_TIMER_PROPERTIES_EnableClock+0x14c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d105      	bne.n	8001c88 <TM_TIMER_PROPERTIES_EnableClock+0xa8>
		RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8001c7c:	4a25      	ldr	r2, [pc, #148]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001c7e:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	6453      	str	r3, [r2, #68]	; 0x44
	}
#endif
#ifdef TIM9
	if (TIMx == TIM9) {
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a29      	ldr	r2, [pc, #164]	; (8001d30 <TM_TIMER_PROPERTIES_EnableClock+0x150>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d105      	bne.n	8001c9c <TM_TIMER_PROPERTIES_EnableClock+0xbc>
		RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 8001c90:	4a20      	ldr	r2, [pc, #128]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9a:	6453      	str	r3, [r2, #68]	; 0x44
	}
#endif
#ifdef TIM10
	if (TIMx == TIM10) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a25      	ldr	r2, [pc, #148]	; (8001d34 <TM_TIMER_PROPERTIES_EnableClock+0x154>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d105      	bne.n	8001cb0 <TM_TIMER_PROPERTIES_EnableClock+0xd0>
		RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 8001ca4:	4a1b      	ldr	r2, [pc, #108]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cae:	6453      	str	r3, [r2, #68]	; 0x44
	}
#endif
#ifdef TIM11
	if (TIMx == TIM11) {
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a21      	ldr	r2, [pc, #132]	; (8001d38 <TM_TIMER_PROPERTIES_EnableClock+0x158>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d105      	bne.n	8001cc4 <TM_TIMER_PROPERTIES_EnableClock+0xe4>
		RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 8001cb8:	4a16      	ldr	r2, [pc, #88]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc2:	6453      	str	r3, [r2, #68]	; 0x44
	}
#endif
#ifdef TIM12
	if (TIMx == TIM12) {
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <TM_TIMER_PROPERTIES_EnableClock+0x15c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d105      	bne.n	8001cd8 <TM_TIMER_PROPERTIES_EnableClock+0xf8>
		RCC->APB1ENR |= RCC_APB1ENR_TIM12EN;
 8001ccc:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cd6:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
#ifdef TIM13
	if (TIMx == TIM13) {
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <TM_TIMER_PROPERTIES_EnableClock+0x160>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d105      	bne.n	8001cec <TM_TIMER_PROPERTIES_EnableClock+0x10c>
		RCC->APB1ENR |= RCC_APB1ENR_TIM13EN;
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cea:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
#ifdef TIM14
	if (TIMx == TIM14) {
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <TM_TIMER_PROPERTIES_EnableClock+0x164>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d105      	bne.n	8001d00 <TM_TIMER_PROPERTIES_EnableClock+0x120>
		RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 8001cf4:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <TM_TIMER_PROPERTIES_EnableClock+0x134>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfe:	6413      	str	r3, [r2, #64]	; 0x40
	}
#endif
	
	/* Return OK */
	return TM_TIMER_PROPERTIES_Result_Ok;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40010000 	.word	0x40010000
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40000400 	.word	0x40000400
 8001d1c:	40000800 	.word	0x40000800
 8001d20:	40000c00 	.word	0x40000c00
 8001d24:	40001000 	.word	0x40001000
 8001d28:	40001400 	.word	0x40001400
 8001d2c:	40010400 	.word	0x40010400
 8001d30:	40014000 	.word	0x40014000
 8001d34:	40014400 	.word	0x40014400
 8001d38:	40014800 	.word	0x40014800
 8001d3c:	40001800 	.word	0x40001800
 8001d40:	40001c00 	.word	0x40001c00
 8001d44:	40002000 	.word	0x40002000

08001d48 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
 /* Initialize system */
	SystemInit();
 8001d4c:	f000 f874 	bl	8001e38 <SystemInit>

	/* Initialize DAC1, use TIM4 for signal generation */
	TM_DAC_SIGNAL_Init(TM_DAC1, TIM6);
 8001d50:	4907      	ldr	r1, [pc, #28]	; (8001d70 <main+0x28>)
 8001d52:	2000      	movs	r0, #0
 8001d54:	f7ff f9c0 	bl	80010d8 <TM_DAC_SIGNAL_Init>

	/* Output predefined sine signal with frequency of 40kHz */
	TM_DAC_SIGNAL_SetSignal(TM_DAC1, TM_DAC_SIGNAL_Signal_Sinus, 1280000);
 8001d58:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8001d68 <main+0x20>
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7ff fa0c 	bl	800117c <TM_DAC_SIGNAL_SetSignal>


	while (1) {

		}
 8001d64:	e7fe      	b.n	8001d64 <main+0x1c>
 8001d66:	bf00      	nop
 8001d68:	00000000 	.word	0x00000000
 8001d6c:	41338800 	.word	0x41338800
 8001d70:	40001000 	.word	0x40001000

08001d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d7a:	e003      	b.n	8001d84 <LoopCopyDataInit>

08001d7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d82:	3104      	adds	r1, #4

08001d84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d84:	480b      	ldr	r0, [pc, #44]	; (8001db4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d8c:	d3f6      	bcc.n	8001d7c <CopyDataInit>
  ldr  r2, =_sbss
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	; (8001dbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d90:	e002      	b.n	8001d98 <LoopFillZerobss>

08001d92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d94:	f842 3b04 	str.w	r3, [r2], #4

08001d98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d9c:	d3f9      	bcc.n	8001d92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d9e:	f000 f84b 	bl	8001e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001da2:	f000 f8fb 	bl	8001f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da6:	f7ff ffcf 	bl	8001d48 <main>
  bx  lr    
 8001daa:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001dac:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001db0:	0800200c 	.word	0x0800200c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001db4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001db8:	2001f494 	.word	0x2001f494
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001dbc:	2001f494 	.word	0x2001f494
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001dc0:	2001f4d4 	.word	0x2001f4d4

08001dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC_IRQHandler>
	...

08001dc8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop

08001dd8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001ddc:	e7fe      	b.n	8001ddc <HardFault_Handler+0x4>
 8001dde:	bf00      	nop

08001de0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001de4:	e7fe      	b.n	8001de4 <MemManage_Handler+0x4>
 8001de6:	bf00      	nop

08001de8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001dec:	e7fe      	b.n	8001dec <BusFault_Handler+0x4>
 8001dee:	bf00      	nop

08001df0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001df4:	e7fe      	b.n	8001df4 <UsageFault_Handler+0x4>
 8001df6:	bf00      	nop

08001df8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop

08001e08 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop

08001e18 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop

08001e28 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop

08001e38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e3c:	4a16      	ldr	r2, [pc, #88]	; (8001e98 <SystemInit+0x60>)
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <SystemInit+0x60>)
 8001e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001e4c:	4a13      	ldr	r2, [pc, #76]	; (8001e9c <SystemInit+0x64>)
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <SystemInit+0x64>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e58:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <SystemInit+0x64>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <SystemInit+0x64>)
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <SystemInit+0x64>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <SystemInit+0x64>)
 8001e70:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <SystemInit+0x68>)
 8001e72:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e74:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <SystemInit+0x64>)
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <SystemInit+0x64>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <SystemInit+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001e86:	f000 f80d 	bl	8001ea4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e8a:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <SystemInit+0x60>)
 8001e8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e90:	609a      	str	r2, [r3, #8]
#endif
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000ed00 	.word	0xe000ed00
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	24003010 	.word	0x24003010

08001ea4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001eb2:	4a36      	ldr	r2, [pc, #216]	; (8001f8c <SetSysClock+0xe8>)
 8001eb4:	4b35      	ldr	r3, [pc, #212]	; (8001f8c <SetSysClock+0xe8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001ebe:	4b33      	ldr	r3, [pc, #204]	; (8001f8c <SetSysClock+0xe8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d103      	bne.n	8001edc <SetSysClock+0x38>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001eda:	d1f0      	bne.n	8001ebe <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <SetSysClock+0xe8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	e001      	b.n	8001ef2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d142      	bne.n	8001f7e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001ef8:	4a24      	ldr	r2, [pc, #144]	; (8001f8c <SetSysClock+0xe8>)
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <SetSysClock+0xe8>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f02:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001f04:	4a22      	ldr	r2, [pc, #136]	; (8001f90 <SetSysClock+0xec>)
 8001f06:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <SetSysClock+0xec>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f0e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001f10:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <SetSysClock+0xe8>)
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <SetSysClock+0xe8>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001f18:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <SetSysClock+0xe8>)
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <SetSysClock+0xe8>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f22:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001f24:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <SetSysClock+0xe8>)
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <SetSysClock+0xe8>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001f2e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <SetSysClock+0xe8>)
 8001f32:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <SetSysClock+0xf0>)
 8001f34:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001f36:	4a15      	ldr	r2, [pc, #84]	; (8001f8c <SetSysClock+0xe8>)
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <SetSysClock+0xe8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f40:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001f42:	bf00      	nop
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <SetSysClock+0xe8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f9      	beq.n	8001f44 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <SetSysClock+0xf4>)
 8001f52:	f240 7205 	movw	r2, #1797	; 0x705
 8001f56:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001f58:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <SetSysClock+0xe8>)
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <SetSysClock+0xe8>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f023 0303 	bic.w	r3, r3, #3
 8001f62:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001f64:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <SetSysClock+0xe8>)
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <SetSysClock+0xe8>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f043 0302 	orr.w	r3, r3, #2
 8001f6e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001f70:	bf00      	nop
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <SetSysClock+0xe8>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d1f9      	bne.n	8001f72 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40007000 	.word	0x40007000
 8001f94:	07405408 	.word	0x07405408
 8001f98:	40023c00 	.word	0x40023c00

08001f9c <__libc_init_array>:
 8001f9c:	b570      	push	{r4, r5, r6, lr}
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <__libc_init_array+0x3c>)
 8001fa0:	4c0e      	ldr	r4, [pc, #56]	; (8001fdc <__libc_init_array+0x40>)
 8001fa2:	1ae4      	subs	r4, r4, r3
 8001fa4:	10a4      	asrs	r4, r4, #2
 8001fa6:	2500      	movs	r5, #0
 8001fa8:	461e      	mov	r6, r3
 8001faa:	42a5      	cmp	r5, r4
 8001fac:	d004      	beq.n	8001fb8 <__libc_init_array+0x1c>
 8001fae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fb2:	4798      	blx	r3
 8001fb4:	3501      	adds	r5, #1
 8001fb6:	e7f8      	b.n	8001faa <__libc_init_array+0xe>
 8001fb8:	f000 f816 	bl	8001fe8 <_init>
 8001fbc:	4c08      	ldr	r4, [pc, #32]	; (8001fe0 <__libc_init_array+0x44>)
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <__libc_init_array+0x48>)
 8001fc0:	1ae4      	subs	r4, r4, r3
 8001fc2:	10a4      	asrs	r4, r4, #2
 8001fc4:	2500      	movs	r5, #0
 8001fc6:	461e      	mov	r6, r3
 8001fc8:	42a5      	cmp	r5, r4
 8001fca:	d004      	beq.n	8001fd6 <__libc_init_array+0x3a>
 8001fcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fd0:	4798      	blx	r3
 8001fd2:	3501      	adds	r5, #1
 8001fd4:	e7f8      	b.n	8001fc8 <__libc_init_array+0x2c>
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}
 8001fd8:	08002004 	.word	0x08002004
 8001fdc:	08002004 	.word	0x08002004
 8001fe0:	08002008 	.word	0x08002008
 8001fe4:	08002004 	.word	0x08002004

08001fe8 <_init>:
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fea:	bf00      	nop
 8001fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fee:	bc08      	pop	{r3}
 8001ff0:	469e      	mov	lr, r3
 8001ff2:	4770      	bx	lr

08001ff4 <_fini>:
 8001ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff6:	bf00      	nop
 8001ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ffa:	bc08      	pop	{r3}
 8001ffc:	469e      	mov	lr, r3
 8001ffe:	4770      	bx	lr
